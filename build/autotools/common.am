
lol_recursive_rule = \
	@if test -n "$(SUBDIRS)"; then for subdir in $(SUBDIRS); do \
	    ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $(patsubst %-recursive, %, $@)) || exit 1; \
	  done; \
	fi

bench: bench-recursive
bench-recursive:
	$(lol_recursive_rule)

lolcheck: lolcheck-recursive
lolcheck-recursive:
	$(lol_recursive_rule)


#
# Flex and Bison files build rule
#

generated: generated-recursive
generated-recursive:
	$(lol_recursive_rule)
	@if test -n "$(filter %-scanner.l, $(EXTRA_DIST))"; then \
	  echo $(MKDIR_P) generated; \
	  $(MKDIR_P) generated; \
	  rm -f generated/[a-zA-Z]*; \
	  for scanner in $(patsubst %-scanner.l, %, $(filter %-scanner.l, $(EXTRA_DIST))); do \
	    b="`basename $$scanner`"; \
	    echo flex -v -o "generated/$$b-scanner.cpp" "$$scanner-scanner.l"; \
	    flex -v -o "generated/$$b-scanner.cpp" "$$scanner-scanner.l" || exit 1; \
	  done; \
	  for parser in $(patsubst %-parser.y, %, $(filter %-parser.y, $(EXTRA_DIST))); do \
	    b="`basename $$parser`"; \
	    echo bison -o "generated/$$b-parser.cpp" --defines="generated/$$b-parser.h" -d -b "generated/$$b" "$$parser-parser.y"; \
	    bison -o "generated/$$b-parser.cpp" --defines="generated/$$b-parser.h" -d -b "generated/$$b" "$$parser-parser.y" || exit 1; \
	  done; \
	fi


#
# .lolfx build rule
#

SUFFIXES = .lolfx
.lolfx.o:
	(echo "char const *"; \
         echo "lolfx_$(notdir $(basename $(filter %.lolfx, $^))) ="; \
	 $(SED) 's/"/\\"/g' $(filter %.lolfx, $^) | $(SED) 's/\([^\r]*\).*/"\1\\n"/'; \
	 echo ";") \
	| $(CXXCOMPILE) -xc++ -c - -o $@


#
# Additional rules
#

.PHONY: bench lolcheck generated

