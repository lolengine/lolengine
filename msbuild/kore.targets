<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
     - Automatically build Kore together with the target application if enabled
   -->

  <Target Name="KoreCompile" AfterTargets="BuildGenerateSources"
          Condition="'$(ConfigurationType)'!='StaticLibrary' and '$(enable_kore)'!='no'">
    <ItemGroup>
      <KoreDirs Include="$(KoreSources)" />
      <ClCompile Include="%(KoreDirs.Identity)/**/*.c" />
      <ClCompile Include="%(KoreDirs.Identity)/**/*.cpp" />
      <GLSLShader Include="$(KoreDirectory)/GLSLShaders/**/*.glsl" />
    </ItemGroup>
  </Target>

  <!--
     - Steam AppId support (FIXME: should be somewhere else)
   -->

  <Target Name="KoreCopy" AfterTargets="AfterBuild" Condition="'$(ConfigurationType)'=='Application' and '$(LolWindowsPublishingPlatform)'=='steam' and '$(Platform)'=='x64'">
    <Copy SourceFiles="$(STEAM_SDK_PATH)\redistributable_bin\win64\steam_api64.dll" DestinationFolder="$(OutDir)" ContinueOnError="true" />
    <WriteLinesToFile File="$(OutDir)steam_appid.txt" Lines="$(LolSteamAppId)" Overwrite="True"/>
  </Target>


  <!--
     - Microsoft Store support
   -->

  <!-- MSSTORE Task to create the Gameconfig file -->
  <UsingTask TaskName="LolXboxCreateGameConfig" TaskFactory="CodeTaskFactory"
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Input ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
      <Output ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml" />
      <Reference Include="System.Xml.Linq" />
      <Using Namespace="System.Xml.Linq" />
      <Code Type="Fragment" Language="cs"><![CDATA[
          var doc = XDocument.Load(Input.ItemSpec);

          var game = doc.Element("Game");
          game.Element("TitleId").Value = "$(LolXboxTitleId)";
          game.Element("MSAAppId").Value = "$(LolXboxMSAAppId)";
          game.Element("StoreId").Value = "$(LolXboxStoreId)";

          var id = game.Element("Identity");
          id.Attribute("Name").Value = "$(LolXboxIdentityName)";
          id.Attribute("Publisher").Value = "CN=$(LolXboxPublisherId)";
          id.Attribute("Version").Value = "$(LolXboxAppVersion)";

          var exe = game.Element("ExecutableList").Element("Executable");
          exe.Attribute("Name").Value = "$(TargetName).exe";

          if ("$(Platform)" == "x64")
          {
              exe.Attribute("TargetDeviceFamily").Value = "PC";

              game.Add(new XElement("DesktopRegistration",
                           new XElement("DependencyList",
                               new XElement("KnownDependency",
                                   new XAttribute("Name", "VC14")))));
          }
          else
          {
              exe.Attribute("TargetDeviceFamily").Value = "Scarlett";
          }

          var vis = game.Element("ShellVisuals");
          vis.Attribute("Description").Value = "$(ProjectName)";
          vis.Attribute("DefaultDisplayName").Value = "$(LolXboxDisplayName)";
          vis.Attribute("PublisherDisplayName").Value = "$(LolXboxPublisherName)";

          doc.Save(Output.ItemSpec);

          var filename = Output.GetMetadata("Filename") + Output.GetMetadata("Extension");
          Input.SetMetadata("ExecutionDescription", filename + " [generated]");
      ]]></Code>
    </Task>
  </UsingTask>

  <PropertyGroup Condition="'$(PublishForXbox)'=='true'">
    <ComputeCompileInputsTargets>_LolCreateXboxConfig;$(ComputeCompileInputsTargets)</ComputeCompileInputsTargets>
    <LolXboxGameConfigTemplate>$(LolEngineDir)/authoring/microsoftgame.template.config</LolXboxGameConfigTemplate>
    <FinalizeGameConfigSource>$(OutDir)$(ProjectName).MicrosoftGame.Config</FinalizeGameConfigSource>
    <!-- FIXME: find a better name and place for this property -->
  </PropertyGroup>

  <!-- Target to create the Gameconfig file.
     - Depends on PrepareForBuild because the final output directory must exist. -->
  <Target Name="_LolCreateXboxConfig" AfterTargets="AssignProjectConfiguration" DependsOnTargets="PrepareForBuild"
          Inputs="$(LolXboxGameConfigTemplate)" Outputs="$(FinalizeGameConfigSource)"
          Condition="'$(PublishForXbox)'=='true'">
    <LolXboxCreateGameConfig Input="$(LolXboxGameConfigTemplate)" Output="$(FinalizeGameConfigSource)" />
    <Message Importance="High" Text="Generating $(FinalizeGameConfigSource)" />
    <ItemGroup>
      <MGCCompile Include="$(FinalizeGameConfigSource)" FileType="Document" />
    </ItemGroup>
  </Target>

  <Target Name="_LolPackageXboxProject" AfterTargets="Link"
          Condition="Exists('$(LolXboxAuthoringFolder)') and '$(LolXboxPackageProject)'=='true' and '$(PublishForXbox)'=='true' and $(SECRETLEKB) != ''">

    <PropertyGroup>
      <MGCToolExe>$(GRDKLatest)../../bin/makepkg.exe</MGCToolExe>
    </PropertyGroup>

    <!-- Copy authoring files -->
    <ItemGroup>
      <XboxAuthoringFiles Include="$(ProjectDir)/$(LolXboxAuthoringFolder)/**/*.*"/>
    </ItemGroup>

    <Message Text="%(XboxAuthoringFiles.FullPath)"/>
    <Message Importance="High" Text="Copying authoring files from $(ProjectDir)$(LolXboxAuthoringFolder)" />

    <Copy SourceFiles="@(XboxAuthoringFiles)"
          DestinationFolder="$(OutDir)/authoring/%(RecursiveDir)" />

    <Copy Condition="!Exists('$(OutDir)MicrosoftGame.Config')"
          SourceFiles="$(FinalizeGameConfigSource)"
          DestinationFiles="$(OutDir)MicrosoftGame.Config" />

    <Message Importance="High" Text="Running Packaging command using $(MGCToolExe)" />
    <MakeDir Directories="$(OutDir)PackagedVersion"/>
    <Exec Command="&quot;$(MGCToolExe.Replace('\','\\'))&quot; pack /$(LolXboxEncryptionLevel) $(SECRETLEKB) /f $(OutDir)authoring/layout.xml /d $(OutDir) /pd $(OutDir)PackagedVersion "/>
  </Target>

</Project>
