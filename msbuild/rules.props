<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <LinkIncremental Condition="'$(Configuration)'=='Debug'">true</LinkIncremental>
    <LinkIncremental Condition="'$(Configuration)'=='Release'">false</LinkIncremental>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Use MakeRelative() so that <ObjectFileName> can use %(RelativeDir) -->
    <BinDir>$([MSBuild]::MakeRelative("$(ProjectDir)","$(SolutionDir)binaries\"))</BinDir>
    <OutDir>$(BinDir)$(Platform.ToLower())-$(PlatformToolset.ToLower())-$(Configuration.ToLower())\</OutDir>
    <IntDir>$(OutDir)obj\$(ProjectName)\</IntDir>
    <ObjectExt Condition="'$(ObjectExt)'==''">.obj</ObjectExt>
  </PropertyGroup>


  <!--
     - Set fallbacks for undefined properties
   -->

  <PropertyGroup>
    <LolPackageVersion Condition="'$(LolPackageVersion)'==''">0.0</LolPackageVersion>

    <!-- The linker flag to export a symbol and force it to be pulled from a static
       - library even if it is not referenced in the code. -->
    <ExportSymbolLinkerFlag Condition="'$(ExportSymbolLinkerFlag)'==''">/EXPORT:</ExportSymbolLinkerFlag>
  </PropertyGroup>


  <!--
     - Set item definitions: macros, compiler and linker flags, etc.
   -->

  <ItemDefinitionGroup>

    <ClCompile>
      <!-- Set a reasonably high warning level -->
      <WarningLevel>Level3</WarningLevel>

      <!-- Protect against source files in different directories having the same name.
         - FIXME: we would like to use $(IntDir)%(RelativeDir) here but this is subject
         - to directory escaping if ClCompile items are outside the project directory,
         - e.g. with Kore, or even LolEmbed items. -->
      <ObjectFileName>$(IntDir)%(Directory)</ObjectFileName>

      <!-- Use latest version of the C++ draft -->
      <LanguageStandard>stdcpplatest</LanguageStandard>

      <!-- Always multiprocessor, always generate debug info, never minimal rebuild -->
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <MinimalRebuild>false</MinimalRebuild>

      <AdditionalIncludeDirectories>
          $(LolEngineDir)\lol\include;
          $(LolEngineDir)\src\include;
          $(PegtlIncludes);
          $(ImguiIncludes);
          %(AdditionalIncludeDirectories)
      </AdditionalIncludeDirectories>

      <AdditionalIncludeDirectories Condition="$(PlatformIsWindows)">
          $(SdlIncludes);
          $(CppHttpIncludes);
          $(FfmpegIncludes);
          %(AdditionalIncludeDirectories)
      </AdditionalIncludeDirectories>

      <PreprocessorDefinitions>
          PACKAGE_VERSION="$(LolPackageVersion)";
          LUA_ANSI;
          %(PreprocessorDefinitions)
      </PreprocessorDefinitions>

      <PreprocessorDefinitions Condition="'$(ConfigurationType)'=='StaticLibrary'">_LIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>

      <!-- Debug, release, etc. macros -->
      <PreprocessorDefinitions Condition="'$(Configuration)'=='Debug'">_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(Configuration)'=='Release'">NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>

      <!-- Trim trailing backslashes and escape them for C++ -->
      <PreprocessorDefinitions>LOL_CONFIG_PROJECTDIR="$(ProjectDir.Trim('\').Replace('\','/'))";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <PreprocessorDefinitions>LOL_CONFIG_SOLUTIONDIR="$(SolutionDir.Trim('\').Replace('\','/'))";%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>

    <ClCompile Condition="'$(Configuration)'=='Debug'">
      <Optimization>Disabled</Optimization>
    </ClCompile>

    <ClCompile Condition="'$(Configuration)'=='Release'">
      <!-- For Microsoft tools -->
      <Optimization>MaxSpeed</Optimization>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>
    </ClCompile>

    <Link Condition="'$(Configuration)'=='Release'">
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
    </Link>
  </ItemDefinitionGroup>


  <ItemDefinitionGroup Condition="$(PlatformIsWindows)">
    <ClCompile>
      <PreprocessorDefinitions>_CRT_SECURE_NO_WARNINGS;$(Win32Defines);%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <RuntimeLibrary Condition="'$(Configuration)'=='Debug'">MultiThreadedDebugDLL</RuntimeLibrary>
      <RuntimeLibrary Condition="'$(Configuration)'=='Release'">MultiThreadedDLL</RuntimeLibrary>
      <!-- Make bigobj the default option, it makes sense with C++ -->
      <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>
    </ClCompile>

    <Link>
      <!-- FIXME: not for the static library! -->
      <AdditionalDependencies>kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;$(SdlDeps);$(FfmpegDeps);$(GdiDeps);$(CppHttpDeps);%(AdditionalDependencies)</AdditionalDependencies>
      <AdditionalLibraryDirectories>$(SdlLibs);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalLibraryDirectories>$(CppHttpLibs);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalLibraryDirectories>$(FfmpegLibs);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>

      <!-- Use Windows subsystem if a GUI library is used -->
      <SubSystem>Console</SubSystem>
      <SubSystem Condition="'$(enable_sdl)'=='yes'">Windows</SubSystem>
      <SubSystem Condition="'$(enable_kore)'=='yes'">Windows</SubSystem>
    </Link>
  </ItemDefinitionGroup>

  <!-- GDK for Windows Store apps.
     - https://learn.microsoft.com/fr-fr/gaming/gdk/_content/gc/tools-pc/visualstudio/gr-vs-templates
   -->
  <ItemDefinitionGroup Condition="'$(LolWindowsPublishingPlatform)'=='msstore' and '$(Platform)'=='x64'">
    <ClCompile>
      <PreprocessorDefinitions>_GAMING_DESKTOP;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <AdditionalDependencies>xgameruntime.lib;gameinput.lib;d3d12.lib;dxgi.lib;dxguid.lib;uuid.lib;kernel32.lib;user32.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
  </ItemDefinitionGroup>

  <!--
     - Compile and link with Kore if enabled
   -->
  <ItemDefinitionGroup Condition="'$(enable_kore)'!='no'">
    <ClCompile>
      <AdditionalIncludeDirectories>$(KoreIncludes);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <PreprocessorDefinitions>$(KoreDefines);%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <AdditionalLibraryDirectories>$(KoreLibs);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalDependencies>$(KoreDeps);%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
  </ItemDefinitionGroup>

  <!--
     - Post-build hook to run commands
   -->
  <ItemDefinitionGroup>
    <PostBuildEvent Condition="$(PlatformIsWindows)">
      <Command Condition="'$(enable_sdl)'!='no'">
        rem do nothing
      </Command>
    </PostBuildEvent>
  </ItemDefinitionGroup>

</Project>
