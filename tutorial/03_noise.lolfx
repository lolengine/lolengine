-- GLSL.Vert --

#version 120

attribute vec2 in_Position;

void main(void)
{
    gl_Position = vec4(in_Position, 0.0, 1.0);
}

-- GLSL.Frag --

#version 120

uniform float u_Time;

vec4 mod289(vec4 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 perm(vec4 x)
{
    return mod289(((x * 34.0) + 1.0) * x);
}

float noise3d(vec3 p)
{
    mat3 r = mat3(0.36, 0.48, -0.8, -0.8, 0.60, 0.0, 0.48, 0.64, 0.60);
    p = r * p;

    vec3 a = floor(p);
    vec3 d = p - a;
    d = d * d * (3.0 - 2.0 * d);

    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
    vec4 k1 = perm(b.xyxy);
    vec4 k2 = perm(k1.xyxy + b.zzww);

    vec4 c = k2 + a.zzzz;
    vec4 k3 = perm(c);
    vec4 k4 = perm(c + 1.0);

    vec4 o1 = fract(k3 * (1.0 / 41.0));
    vec4 o2 = fract(k4 * (1.0 / 41.0));

    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

    return o4.y * d.y + o4.x * (1.0 - d.y);
}

void main(void)
{
    vec2 xy = gl_FragCoord.xy * 2.0;
    xy.y -= u_Time * 400.0;
    float z = u_Time * 2.0;

    float p = noise3d(vec3(xy / 80.0, z)) / 2.0
            + noise3d(vec3(xy / 40.0, z)) / 4.0
            + noise3d(vec3(xy / 20.0, z)) / 8.0
            + noise3d(vec3(xy / 10.0, z)) / 16.0;

    /* Scroll by adding [-.5,.5] */
    p -= gl_FragCoord.y / 720.0 - 0.5;
    p = max(p, 0.0);
    p = min(p, 1.0);

    float q = p * p * (3.0 - 2.0 * p);
    float r = q * q * (3.0 - 2.0 * q);
    gl_FragColor = vec4(min(q * 2.0, 1.0),
                        max(r * 1.5 - 0.5, 0.0),
                        max(q * 8.0 - 7.3, 0.0),
                        1.0);
}

-- HLSL.Vert --

void main(float2 in_Position : POSITION,
          uniform float2 u_WinSize,
          out float4 out_Position : POSITION,
          out float2 pass_Position : TEXCOORD0)
{
    //pass_Position = in_Position * u_WinSize;
    pass_Position = in_Position * float2(1280.0, 720.0);
    out_Position = float4(in_Position, 0.0, 1.0);
}

-- HLSL.Frag --

float4 mod289(float4 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 perm(float4 x)
{
    return mod289(((x * 34.0) + 1.0) * x);
}

float noise3d(float3 p)
{
    float3x3 r = float3x3(0.36, 0.48, -0.8, -0.8, 0.60, 0.0, 0.48, 0.64, 0.60);
    p = mul(r, p);

    float3 a = floor(p);
    float3 d = p - a;
    d = d * d * (3.0 - 2.0 * d);

    float4 b = a.xxyy + float4(0.0, 1.0, 0.0, 1.0);
    float4 k1 = perm(b.xyxy);
    float4 k2 = perm(k1.xyxy + b.zzww);

    float4 c = k2 + a.zzzz;
    float4 k3 = perm(c);
    float4 k4 = perm(c + 1.0);

    float4 o1 = frac(k3 * (1.0 / 41.0));
    float4 o2 = frac(k4 * (1.0 / 41.0));

    float4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    float2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

    return o4.y * d.y + o4.x * (1.0 - d.y);
}

void main(in float2 pass_Position : TEXCOORD0,
          uniform float u_Time,
          out float4 out_FragColor : COLOR)
{
    float2 xy = pass_Position;
    xy.y -= u_Time * 400.0;
    float z = u_Time * 2.0;

    float p = noise3d(float3(xy / 80.0, z)) / 2.0
            + noise3d(float3(xy / 40.0, z)) / 4.0
            + noise3d(float3(xy / 20.0, z)) / 8.0
            + noise3d(float3(xy / 10.0, z)) / 16.0;

    /* Scroll by adding [-.5,.5] */
    p -= pass_Position.y / 1440.0;
    p = max(p, 0.0);
    p = min(p, 1.0);

    float q = p * p * (3.0 - 2.0 * p);
    float r = q * q * (3.0 - 2.0 * q);
    out_FragColor = float4(min(q * 2.0, 1.0),
                           max(r * 1.5 - 0.5, 0.0),
                           max(q * 8.0 - 7.3, 0.0),
                           1.0);
}
