#line 2 "generated/easymesh-scanner.cpp"

#line 4 "generated/easymesh-scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer EasyMeshFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *EasyMeshalloc (yy_size_t  );
void *EasyMeshrealloc (void *,yy_size_t  );
void EasyMeshfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 87
#define YY_END_OF_BUFFER 88
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[376] =
    {   0,
        0,    0,   88,   86,   85,   84,   86,   78,   79,   86,
       77,   86,   86,   75,   86,   82,   83,   86,   86,   86,
       86,   86,   86,   86,   24,   47,   20,   86,   80,   81,
        0,    0,   75,   74,   76,    0,   59,   55,   64,    0,
        0,   66,   62,   65,    0,    0,   51,    0,    0,    0,
        0,    6,    0,   48,   49,   50,    0,   25,    0,   21,
       22,   23,    7,    0,    0,    0,    0,    0,   44,   45,
       46,    0,    0,    0,    0,    0,    0,    0,    0,   17,
       18,   19,    0,   15,   16,    0,    0,   76,    0,    0,
       67,    0,   63,    0,    0,    0,   58,    0,    0,    0,

        0,    0,    0,   54,    0,    0,    0,    0,    0,    8,
        9,   10,    0,    0,   32,   33,   34,    0,    0,    0,
        0,   35,   36,   37,    0,   26,   27,   28,    0,    0,
       12,    0,    0,   11,    0,    0,   29,   30,   31,    0,
       68,    0,   74,    0,   57,    0,    0,    0,    0,    0,
        0,    0,    0,   61,   60,   56,   38,   39,   40,   41,
       42,   43,    0,    0,    4,    2,    1,    5,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   53,    0,   52,
        0,    0,    0,    0,    0,    0,   13,    0,   72,   14,
        0,    0,   69,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    3,    0,    0,    0,   73,    0,    0,    0,
       47,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    2,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    4,
        0,    5,    0,    0,    0,   24,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   70,    0,    0,   64,
        0,    0,    0,    0,   62,    0,    0,   51,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    1,

        0,    0,    7,    0,    0,    0,    0,    0,    0,    0,
        0,   71,    0,    0,    0,    0,    0,    0,   54,    0,
        8,    0,    0,    0,    0,    0,   20,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       55,    0,    0,    0,   65,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    1,    4,    1,    1,    1,    1,    5,
        6,    1,    7,    3,    8,    9,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    1,    1,    1,
        1,    1,    1,    1,   12,   12,   13,   12,   14,   12,
        1,    1,    1,    1,    1,   15,    1,    1,    1,    1,
        1,    1,   16,    1,    1,    1,    1,    1,    1,    1,
       17,    1,   18,    1,    1,    1,   19,   20,   21,   22,

       23,   24,   25,   26,   27,   28,    1,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,    1,   45,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[46] =
    {   0,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[385] =
    {   0,
        0,    0,  455,  456,  456,  456,    0,  456,  456,   37,
       38,  443,  443,   41,  416,  456,  456,   33,   36,   25,
      413,  431,   30,   33,   45,   68,   93,   42,  456,  456,
        0,  438,   57,   69,    0,  423,  456,   60,  425,  410,
      424,  456,   60,  412,   54,  412,  423,  416,  407,  410,
      406,  456,  402,  456,  456,  456,  414,  456,  398,  456,
      456,  456,   80,  397,   61,   76,  404,   79,  456,  456,
      456,   74,  403,  411,  390,   52,  389,  397,   96,  456,
      456,  456,  392,  456,  456,    0,  133,    0,  410,  392,
      456,  125,  456,  404,  403,  396,  456,   82,  109,   89,

      399,  390,  132,  390,  382,  384,  381,  388,  395,  384,
      456,  456,  391,  392,  456,  456,  456,  378,  383,  116,
      385,  456,  456,  456,  384,  456,  456,  456,  121,  375,
      456,  374,  381,  456,  382,  366,  456,  456,  456,  364,
        0,  389,  388,  360,  456,  365,  137,  369,  354,  365,
      355,  134,  131,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  133,  368,  360,  361,  358,  356,  360,  363,
      353,  365,  346,  359,  349,  345,  342,  456,  341,  456,
      340,  341,  339,  336,  352,  349,  456,  335,  456,  456,
      333,  142,    0,  349,  327,  334,  341,  336,  328,  330,

      343,  342,  328,  333,  339,  322,  329,  138,  141,  144,
      332,  332,  456,  326,  317,  330,  456,  315,  320,  325,
      146,  318,  149,  320,  308,  323,  152,  306,  323,  322,
      305,  310,  155,  315,  314,    0,  321,  299,  307,  312,
      313,  294,  308,  297,  305,  292,  288,  306,  289,  456,
      291,  456,  303,  158,  293,  161,  288,  284,  292,  297,
      294,  286,  277,  294,  277,  278,    0,  272,  278,  456,
      277,  286,  269,  270,  456,  268,  272,  456,  271,  264,
      273,  264,  271,  164,  259,  256,  272,  263,  256,  267,
      272,    0,  261,  267,  266,  261,  260,  262,  259,  456,

      260,  245,  189,  262,  253,  256,  238,  245,  253,  252,
      239,  456,  250,  249,  248,  251,  248,  239,  456,  230,
      456,  235,  236,  237,  236,  241,  169,  242,  225,  237,
      228,  231,  233,  232,  229,  231,  227,  220,  221,  212,
      456,  212,  223,  227,  456,  210,  215,  212,  216,  219,
      217,  216,  201,  217,  206,  212,  202,  196,  213,  211,
      195,  202,  190,  193,  188,  181,  201,  190,  181,  186,
      198,  183,  174,  185,  456,  210,  180,  228,  174,  162,
      155,  139,  103,   79
    } ;

static yyconst flex_int16_t yy_def[385] =
    {   0,
      375,    1,  375,  375,  375,  375,  376,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      377,  375,  375,  375,  378,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  379,  375,  378,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      380,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  381,  375,  375,  375,  375,  375,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  382,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  383,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  384,  375,  375,  375,  375,  375,  375,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,    0,  375,  375,  375,  375,  375,
      375,  375,  375,  375
    } ;

static yyconst flex_int16_t yy_nxt[502] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,    4,   15,    4,    4,    4,   16,   17,   18,   19,
       20,   21,    4,   22,    4,    4,    4,    4,   23,   24,
        4,    4,    4,    4,   25,   26,   27,    4,   28,    4,
        4,    4,    4,   29,   30,   32,   32,   33,   33,   32,
       47,   33,   37,   38,   39,   40,   41,   45,   46,   53,
       48,   51,   52,   57,   83,   32,   42,   33,   43,   44,
      132,   84,   58,   54,   55,   56,   59,   85,   90,   34,
       95,  312,   87,  114,   91,   60,   61,   62,   63,  133,
       64,   87,   96,   65,   98,   99,  100,   66,  110,  111,

       67,  115,  116,  117,   68,  292,  125,  118,   69,   70,
       71,   72,  119,  121,  126,  127,  128,   73,  112,  122,
      123,  124,  136,  157,  158,   74,   75,   76,   77,  161,
      162,   78,   79,   80,   81,   82,  137,  138,  139,  142,
      142,  267,  179,  143,  146,  147,  148,  149,  150,  159,
      165,  160,  180,  183,  184,  196,  185,  236,  151,  186,
      152,  153,  206,  203,  193,  207,  204,  166,  197,  167,
      205,  234,  168,  208,  209,  210,  141,  235,  198,  157,
      158,  159,   86,  160,  161,  162,   69,   70,   71,  115,
      116,  117,  126,  127,  128,  137,  138,  139,   54,   55,

       56,   60,   61,   62,  122,  123,  124,  321,  111,   80,
       81,   82,   31,  187,  155,  190,  374,  373,  372,  371,
      370,  154,   93,  369,  368,  367,  366,  112,   88,  365,
       88,  364,  131,  363,  180,  362,  361,  360,   85,  359,
      134,  358,  357,  356,   58,  355,  354,  353,  352,  351,
      350,  349,  348,  347,  346,  345,  344,  343,  342,  341,
      340,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  329,  145,  328,   84,  327,  326,  325,  324,  323,
      322,  320,  319,  318,  156,  317,  316,  315,  314,  313,
      311,  310,  309,  308,  307,  306,  305,  304,  303,  302,

      301,  300,  299,   97,  298,  297,  296,  295,  294,  293,
      291,  290,  289,  288,  287,  286,  285,  284,  283,  282,
      281,  280,  279,  278,  277,  276,  275,  274,  273,   42,
      272,  271,  270,  269,  268,  213,  266,  265,  264,  263,
      262,  261,  260,  259,  258,  178,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  245,  244,
      243,  242,  241,  240,  239,   91,  238,   37,  237,  233,
      232,  231,  230,  229,  228,  227,  226,  225,  224,  223,
      222,  221,  220,  219,  218,  217,  216,  215,  214,  213,
      212,  211,  202,  201,  200,  199,  195,  194,  143,  143,

      192,  191,  190,  189,  188,  187,  182,  181,  178,  177,
      176,  175,  174,  173,  172,  171,   52,  170,  169,  164,
      163,  156,  155,  154,  145,  144,  140,  135,  134,  131,
      130,  129,  120,  113,  109,  108,  107,  106,  105,  104,
      103,  102,  101,   97,   94,   93,   92,   89,   34,   50,
       49,   36,   35,   34,  375,    3,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,

      375
    } ;

static yyconst flex_int16_t yy_chk[502] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   11,   10,   11,   14,
       20,   14,   18,   18,   18,   18,   18,   19,   19,   24,
       20,   23,   23,   25,   28,   33,   18,   33,   18,   18,
       76,   28,   25,   24,   24,   24,   25,   28,   38,   34,
       43,  384,   34,   65,   38,   25,   25,   25,   26,   76,
       26,   34,   43,   26,   45,   45,   45,   26,   63,   63,

       26,   65,   65,   65,   26,  383,   72,   66,   26,   26,
       26,   27,   66,   68,   72,   72,   72,   27,   63,   68,
       68,   68,   79,   98,   98,   27,   27,   27,   27,  100,
      100,   27,   27,   27,   27,   27,   79,   79,   79,   87,
       87,  382,  120,   87,   92,   92,   92,   92,   92,   99,
      103,   99,  120,  129,  129,  147,  129,  381,   92,  129,
       92,   92,  153,  152,  380,  153,  152,  103,  147,  103,
      152,  192,  103,  163,  163,  163,  379,  192,  147,  208,
      208,  209,  377,  209,  210,  210,  221,  221,  221,  223,
      223,  223,  227,  227,  227,  233,  233,  233,  254,  254,

      254,  256,  256,  256,  284,  284,  284,  303,  303,  327,
      327,  327,  376,  374,  373,  372,  371,  370,  369,  368,
      367,  366,  365,  364,  363,  362,  361,  303,  378,  360,
      378,  359,  358,  357,  356,  355,  354,  353,  352,  351,
      350,  349,  348,  347,  346,  344,  343,  342,  340,  339,
      338,  337,  336,  335,  334,  333,  332,  331,  330,  329,
      328,  326,  325,  324,  323,  322,  320,  318,  317,  316,
      315,  314,  313,  311,  310,  309,  308,  307,  306,  305,
      304,  302,  301,  299,  298,  297,  296,  295,  294,  293,
      291,  290,  289,  288,  287,  286,  285,  283,  282,  281,

      280,  279,  277,  276,  274,  273,  272,  271,  269,  268,
      266,  265,  264,  263,  262,  261,  260,  259,  258,  257,
      255,  253,  251,  249,  248,  247,  246,  245,  244,  243,
      242,  241,  240,  239,  238,  237,  235,  234,  232,  231,
      230,  229,  228,  226,  225,  224,  222,  220,  219,  218,
      216,  215,  214,  212,  211,  207,  206,  205,  204,  203,
      202,  201,  200,  199,  198,  197,  196,  195,  194,  191,
      188,  186,  185,  184,  183,  182,  181,  179,  177,  176,
      175,  174,  173,  172,  171,  170,  169,  168,  167,  166,
      165,  164,  151,  150,  149,  148,  146,  144,  143,  142,

      140,  136,  135,  133,  132,  130,  125,  121,  119,  118,
      114,  113,  110,  109,  108,  107,  106,  105,  104,  102,
      101,   96,   95,   94,   90,   89,   83,   78,   77,   75,
       74,   73,   67,   64,   59,   57,   53,   51,   50,   49,
       48,   47,   46,   44,   41,   40,   39,   36,   32,   22,
       21,   15,   13,   12,    3,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,

      375
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "easymesh/easymesh-scanner.l"
#line 2 "easymesh/easymesh-scanner.l"
//
// Lol Engine
//
// Copyright: (c) 2010-2013 Sam Hocevar <sam@hocevar.net>
//            (c) 2009-2013 Cédric Lecacheur <jordx@free.fr>
//            (c) 2009-2013 Benjamin "Touky" Huet <huet.benjamin@gmail.com>
//   This program is free software; you can redistribute it and/or
//   modify it under the terms of the Do What The Fuck You Want To
//   Public License, Version 2, as published by Sam Hocevar. See
//   http://www.wtfpl.net/ for more details.
//

#include <lol/engine-internal.h>

#include <cstdlib>
using std::exit;
using std::malloc;
using std::realloc;
using std::free;

#include "easymesh/easymesh-compiler.h"

typedef lol::EasyMeshParser::token token;
typedef lol::EasyMeshParser::token_type token_type;

#ifndef YY_DECL
#   define YY_DECL lol::EasyMeshParser::token_type \
        lol::EasyMeshScanner::lex(lol::EasyMeshParser::semantic_type* yylval, \
                                  lol::EasyMeshParser::location_type* yylloc)
#endif

#define yyterminate() return token::T_END
#define YY_NO_UNISTD_H
#define YY_USER_ACTION yylloc->columns(yyleng);
#line 687 "generated/easymesh-scanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 44 "easymesh/easymesh-scanner.l"


  /* reset location at the beginning of yylex() */
    yylloc->step();


#line 799 "generated/easymesh-scanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 376 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 375 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 50 "easymesh/easymesh-scanner.l"
{ return token::T_CSGUNION; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 51 "easymesh/easymesh-scanner.l"
{ return token::T_CSGSUBSTRACT; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 52 "easymesh/easymesh-scanner.l"
{ return token::T_CSGSUBSTRACTLOSS; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 53 "easymesh/easymesh-scanner.l"
{ return token::T_CSGAND; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 54 "easymesh/easymesh-scanner.l"
{ return token::T_CSGXOR; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 56 "easymesh/easymesh-scanner.l"
{ return token::T_LOOP; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 57 "easymesh/easymesh-scanner.l"
{ return token::T_COLOR; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 58 "easymesh/easymesh-scanner.l"
{ return token::T_ACOLOR; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 59 "easymesh/easymesh-scanner.l"
{ return token::T_BCOLOR; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 60 "easymesh/easymesh-scanner.l"
{ return token::T_VCOLOR; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 62 "easymesh/easymesh-scanner.l"
{ return token::T_TOGGLESCALEWINDING; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 63 "easymesh/easymesh-scanner.l"
{ return token::T_TOGGLEQUADWEIGHTING; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 64 "easymesh/easymesh-scanner.l"
{ return token::T_TOGGLEPOSTBUILDNORMAL; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 65 "easymesh/easymesh-scanner.l"
{ return token::T_TOGGLEVERTNOCLEANUP; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 67 "easymesh/easymesh-scanner.l"
{ return token::T_VERTMERGE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 68 "easymesh/easymesh-scanner.l"
{ return token::T_VERTSEPARATE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 70 "easymesh/easymesh-scanner.l"
{ return token::T_TRANSLATEX; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 71 "easymesh/easymesh-scanner.l"
{ return token::T_TRANSLATEY; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 72 "easymesh/easymesh-scanner.l"
{ return token::T_TRANSLATEZ; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 73 "easymesh/easymesh-scanner.l"
{ return token::T_TRANSLATE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 74 "easymesh/easymesh-scanner.l"
{ return token::T_ROTATEX; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 75 "easymesh/easymesh-scanner.l"
{ return token::T_ROTATEY; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 76 "easymesh/easymesh-scanner.l"
{ return token::T_ROTATEZ; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 77 "easymesh/easymesh-scanner.l"
{ return token::T_ROTATE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 78 "easymesh/easymesh-scanner.l"
{ return token::T_RADIALJITTER; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 79 "easymesh/easymesh-scanner.l"
{ return token::T_TAPERX; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 80 "easymesh/easymesh-scanner.l"
{ return token::T_TAPERY; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 81 "easymesh/easymesh-scanner.l"
{ return token::T_TAPERZ; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 82 "easymesh/easymesh-scanner.l"
{ return token::T_TWISTX; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 83 "easymesh/easymesh-scanner.l"
{ return token::T_TWISTY; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 84 "easymesh/easymesh-scanner.l"
{ return token::T_TWISTZ; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 85 "easymesh/easymesh-scanner.l"
{ return token::T_SHEARX; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 86 "easymesh/easymesh-scanner.l"
{ return token::T_SHEARY; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 87 "easymesh/easymesh-scanner.l"
{ return token::T_SHEARZ; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 88 "easymesh/easymesh-scanner.l"
{ return token::T_STRETCHX; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 89 "easymesh/easymesh-scanner.l"
{ return token::T_STRETCHY; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 90 "easymesh/easymesh-scanner.l"
{ return token::T_STRETCHZ; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 91 "easymesh/easymesh-scanner.l"
{ return token::T_BENDXY; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 92 "easymesh/easymesh-scanner.l"
{ return token::T_BENDXZ; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 93 "easymesh/easymesh-scanner.l"
{ return token::T_BENDYX; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 94 "easymesh/easymesh-scanner.l"
{ return token::T_BENDYZ; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 95 "easymesh/easymesh-scanner.l"
{ return token::T_BENDZX; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 96 "easymesh/easymesh-scanner.l"
{ return token::T_BENDZY; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 97 "easymesh/easymesh-scanner.l"
{ return token::T_SCALEX; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 98 "easymesh/easymesh-scanner.l"
{ return token::T_SCALEY; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 99 "easymesh/easymesh-scanner.l"
{ return token::T_SCALEZ; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 100 "easymesh/easymesh-scanner.l"
{ return token::T_SCALE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 101 "easymesh/easymesh-scanner.l"
{ return token::T_MIRRORX; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 102 "easymesh/easymesh-scanner.l"
{ return token::T_MIRRORY; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 103 "easymesh/easymesh-scanner.l"
{ return token::T_MIRRORZ; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 104 "easymesh/easymesh-scanner.l"
{ return token::T_CHAMFER; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 105 "easymesh/easymesh-scanner.l"
{ return token::T_SPLITTRIANGLE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 106 "easymesh/easymesh-scanner.l"
{ return token::T_SMOOTHMESH; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 107 "easymesh/easymesh-scanner.l"
{ return token::T_DUPLICATE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "easymesh/easymesh-scanner.l"
{ return token::T_CYLINDER; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "easymesh/easymesh-scanner.l"
{ return token::T_SPHERE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "easymesh/easymesh-scanner.l"
{ return token::T_CAPSULE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "easymesh/easymesh-scanner.l"
{ return token::T_TORUS; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "easymesh/easymesh-scanner.l"
{ return token::T_BOX; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "easymesh/easymesh-scanner.l"
{ return token::T_SMOOTHCHAMFBOX; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "easymesh/easymesh-scanner.l"
{ return token::T_FLATCHAMFBOX; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "easymesh/easymesh-scanner.l"
{ return token::T_STAR; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "easymesh/easymesh-scanner.l"
{ return token::T_EXPANDEDSTAR; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "easymesh/easymesh-scanner.l"
{ return token::T_DISC; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "easymesh/easymesh-scanner.l"
{ return token::T_TRIANGLE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "easymesh/easymesh-scanner.l"
{ return token::T_QUAD; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "easymesh/easymesh-scanner.l"
{ return token::T_COG; }
	YY_BREAK
 /* =======  BASE COLOR TYPES  ========================================= */
 /* COLOR */
case 68:
YY_RULE_SETUP
#line 125 "easymesh/easymesh-scanner.l"
{
        uint32_t tmp = std::strtol(yytext + 1, nullptr, 16);
        yylval->u32val = 0x11000000u * (tmp >> 8)
                       | 0x00110000u * ((tmp >> 4) & 0xf)
                       | 0x00001100u * (tmp & 0xf)
                       | 0x000000ffu;
        return token::COLOR; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 132 "easymesh/easymesh-scanner.l"
{
        uint32_t tmp = std::strtol(yytext + 1, nullptr, 16);
        yylval->u32val = 0x11000000u * (tmp >> 12)
                       | 0x00110000u * ((tmp >> 8) & 0xf)
                       | 0x00001100u * ((tmp >> 4) & 0xf)
                       | 0x00000011u * (tmp & 0xf);
        return token::COLOR; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 139 "easymesh/easymesh-scanner.l"
{
        yylval->u32val = 0xffu
                       | 0x100u * (uint32_t)std::strtol(yytext + 1, nullptr, 16);
        return token::COLOR; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 143 "easymesh/easymesh-scanner.l"
{
        yylval->u32val = (uint32_t)std::strtol(yytext + 1, nullptr, 16);
        return token::COLOR; }
	YY_BREAK
 /* =======  BASE DATA TYPES  ========================================= */
 /* BOOL */
case 72:
YY_RULE_SETUP
#line 149 "easymesh/easymesh-scanner.l"
{ yylval->bval = true; return token::BOOLEAN; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 150 "easymesh/easymesh-scanner.l"
{ yylval->bval = false; return token::BOOLEAN; }
	YY_BREAK
 /* FLOAT */
case 74:
YY_RULE_SETUP
#line 152 "easymesh/easymesh-scanner.l"
{
        yylval->fval = (float)std::atof(yytext); return token::F_NUMBER; }
	YY_BREAK
 /* INT */
case 75:
YY_RULE_SETUP
#line 155 "easymesh/easymesh-scanner.l"
{
        yylval->ival = std::atoi(yytext); return token::I_NUMBER; }
	YY_BREAK
 /* ======= COMMENTS ======= */
case 76:
YY_RULE_SETUP
#line 159 "easymesh/easymesh-scanner.l"
{ /* ignore this */ }
	YY_BREAK
 /* Semantics tokens */
case 77:
YY_RULE_SETUP
#line 162 "easymesh/easymesh-scanner.l"
{ return token_type('-'); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 163 "easymesh/easymesh-scanner.l"
{ return token_type('('); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 164 "easymesh/easymesh-scanner.l"
{ return token_type(')'); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 165 "easymesh/easymesh-scanner.l"
{ return token_type('{'); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 166 "easymesh/easymesh-scanner.l"
{ return token_type('}'); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 167 "easymesh/easymesh-scanner.l"
{ return token_type('['); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 168 "easymesh/easymesh-scanner.l"
{ return token_type(']'); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 169 "easymesh/easymesh-scanner.l"
{ /* ignore this */ }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 170 "easymesh/easymesh-scanner.l"
{ /* ignore this */ }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 171 "easymesh/easymesh-scanner.l"
{ return token::T_ERROR; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 173 "easymesh/easymesh-scanner.l"
ECHO;
	YY_BREAK
#line 1341 "generated/easymesh-scanner.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	EasyMeshfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	EasyMeshfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					EasyMeshrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) EasyMeshrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 376 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 376 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 375);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) EasyMeshalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) EasyMeshalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		EasyMeshfree((void *) b->yy_ch_buf  );

	EasyMeshfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)EasyMeshalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)EasyMeshrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) EasyMeshalloc(new_size  );

		else
			(yy_start_stack) = (int *) EasyMeshrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *EasyMeshalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *EasyMeshrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void EasyMeshfree (void * ptr )
{
	free( (char *) ptr );	/* see EasyMeshrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 173 "easymesh/easymesh-scanner.l"



lol::EasyMeshScanner::EasyMeshScanner(char const *command)
    : EasyMeshFlexLexer(0, 0),
      m_input(command)
{
}

lol::EasyMeshScanner::~EasyMeshScanner()
{
}

int lol::EasyMeshScanner::LexerInput(char* buf, int max_size)
{
    (void)max_size; /* unused for now */

    buf[0] = m_input[0];
    if (buf[0])
        ++m_input;
    return buf[0] ? 1 : 0;
}

#ifdef yylex
#undef yylex
#endif
int EasyMeshFlexLexer::yylex()
{
    std::cerr << "in EasyMeshFlexLexer::yylex() !" << std::endl;
    return 0;
}

int EasyMeshFlexLexer::yywrap()
{
    return 1;
}


