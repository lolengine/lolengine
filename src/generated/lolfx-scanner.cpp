#line 2 "generated/lolfx-scanner.cpp"

#line 4 "generated/lolfx-scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer LolFxFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *LolFxalloc (yy_size_t  );
void *LolFxrealloc (void *,yy_size_t  );
void LolFxfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 443
#define YY_END_OF_BUFFER 444
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1627] =
    {   0,
        0,    0,  437,  437,  442,  442,  444,  434,  432,  433,
      434,  434,  434,  434,  434,  434,  434,  434,  429,  429,
      434,  434,  434,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  434,  430,  430,  431,  431,  431,
      431,  430,  431,  431,  431,  431,  431,  431,  430,  430,
      430,  430,  430,  431,  431,  430,  430,  434,  437,  438,
      439,  442,  441,  432,  411,    0,    0,    0,    0,    0,
        0,    0,    0,  419,  414,  424,  417,  406,  420,  407,
      421,  435,  440,  418,    0,  428,  429,  412,  408,  410,

      409,  413,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  129,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  134,  135,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  425,  416,  430,  431,  431,  430,
      431,  431,  431,  431,  431,  431,  431,   99,  431,  431,
      431,  431,  431,  430,  431,  104,  105,  431,  431,  431,

      431,  431,  431,  431,  431,  431,  430,  431,  430,  431,
      431,  431,  430,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  430,  426,  415,  437,  436,
      442,    0,    0,    0,    0,  366,    0,    0,    0,    0,
        0,  427,  422,  423,  431,  152,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  133,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  137,  431,  431,  431,
      431,  431,  387,  431,  431,  431,  431,  139,  431,  431,

      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  400,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  430,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  103,  431,  431,  107,  431,  431,  431,  431,
      431,  431,  431,  431,  109,  431,  430,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  430,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  431,  431,  374,
      431,  121,  431,  431,  431,  123,  431,  431,  431,  376,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  131,  381,  431,  431,  431,  431,  431,
      431,  431,  384,  431,  173,  431,  431,  431,  431,  321,
      326,  331,  336,  431,  178,  385,  431,  431,  431,  431,
      431,  185,  431,  431,  431,  188,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  398,  431,  431,  231,

      431,  147,  431,  431,  431,  431,  431,  431,  431,  431,
      149,  431,  431,  430,  431,   91,  431,  431,   93,  431,
      431,  431,  431,  431,  431,  431,  431,  101,  431,    4,
      431,  431,  431,  431,  431,  431,  431,   45,   62,   66,
       70,  431,  431,  431,  430,  431,  431,  431,  431,  431,
      431,  431,  431,   89,  117,  431,  431,  431,  431,   59,
       60,   61,  119,  431,  430,    0,  362,  363,    0,    0,
        0,    0,    0,  370,    0,    0,    0,  431,  431,  431,
      241,  246,  251,  256,  122,  431,  431,  375,  431,  431,
      377,  431,  431,  431,  125,  431,  431,  431,  431,  431,

      431,  431,  431,  167,  431,  431,  431,  169,  132,  431,
      431,  431,  431,  431,  431,  136,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  191,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      393,  431,  431,  211,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  399,  431,  431,  431,  341,  346,  351,
      356,  431,  402,  236,  431,  404,  431,  431,  431,  431,
      150,  431,   92,   50,   51,   52,  431,   95,  431,  431,
      431,   77,   81,   85,  431,   74,   75,   76,   90,  102,

       43,  106,  431,  431,   53,   54,   55,  431,  431,  431,
      431,  431,  431,    2,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,   56,   57,   58,  431,  120,    0,
      364,  365,  367,    0,    0,    0,  372,    0,  431,  431,
      431,  431,  431,  431,  431,  155,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  379,  431,  431,  431,
      130,  301,  306,  311,  316,  431,  431,  168,  261,  266,
      271,  276,  383,  431,  431,  431,  431,  175,  431,  322,
      327,  332,  337,  323,  328,  333,  338,  324,  329,  334,
      339,  325,  330,  335,  340,  431,  431,  180,  431,  182,

      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  391,  431,  431,  431,  431,  140,  431,
      431,  431,  431,  431,  431,  210,  394,  395,  431,  214,
      215,  145,  146,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  237,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  100,  431,
      431,    6,   63,   64,   65,   67,   68,   69,   71,   72,
       73,  431,  431,  431,  110,    3,    5,  115,  431,  116,
      431,  431,  431,  431,  361,  368,    0,  371,    0,  431,
      431,  431,  242,  247,  252,  257,  243,  248,  253,  258,

      244,  249,  254,  259,  245,  250,  255,  260,  431,  157,
      431,  431,  159,  431,  431,  431,  431,  127,  431,  128,
      431,  281,  286,  291,  296,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  170,  431,  431,  431,  431,
      431,  179,  431,  386,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  193,  389,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  206,  431,  431,  431,  217,
      431,  431,  431,  431,  232,  431,  342,  347,  352,  357,
      343,  348,  353,  358,  344,  349,  354,  359,  345,  350,
      355,  360,  148,  431,  431,  431,  405,  431,  431,  431,

      431,   97,   98,   78,   79,   80,   82,   83,   84,   86,
       87,   88,  431,  431,   44,  431,  431,  206,  431,  221,
      118,  431,   49,  369,  373,  431,  431,  431,  431,  124,
      431,  431,  431,  431,  431,  431,  126,  431,  431,  431,
      431,  431,  431,  302,  307,  312,  317,  303,  308,  313,
      318,  304,  309,  314,  319,  305,  310,  315,  320,  431,
      382,  262,  267,  272,  277,  263,  268,  273,  278,  264,
      269,  274,  279,  265,  270,  275,  280,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  388,  431,  431,  431,
      431,  431,  431,  431,  196,  431,  431,  431,  198,  431,

      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  397,  431,  431,  431,  431,  233,  401,  403,
      431,  431,  240,  431,   94,   96,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  373,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      282,  287,  292,  297,  283,  288,  293,  298,  284,  289,
      294,  299,  285,  290,  295,  300,  431,  431,  431,  431,
      431,  177,  431,  183,  431,  431,  431,  431,  431,  431,
      431,  390,  431,  431,  431,  197,  431,  431,  431,  141,
      142,  143,  431,  431,  431,  431,  431,  431,  431,  218,

      222,  224,  228,  431,  431,  431,  431,  431,   48,   47,
      431,  431,  431,  431,  431,  431,   46,  111,  112,  113,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      154,  431,  431,  431,  431,  431,  378,  431,  431,  431,
      431,  431,  431,  174,  176,  181,  431,  431,  431,  187,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  212,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,   14,   15,   16,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,    1,   20,   21,   22,  431,  431,  431,  431,  431,

      431,  431,  431,  431,  431,  431,  431,  431,  431,  172,
      431,  431,  186,  431,  190,  192,  431,  431,  431,  431,
      431,  201,  203,  205,  431,  144,  431,  431,  431,  396,
      431,  219,  431,  431,  431,  226,  229,  234,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,   37,  431,  431,  431,  114,  431,  431,  431,  431,
      431,  431,  431,  153,  431,  158,  431,  431,  431,  431,
      431,  166,  380,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  208,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  239,  431,  431,   38,

      431,  431,   17,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,   39,  431,  431,   23,  431,
      431,  161,  431,  162,  431,  431,  431,  431,  431,  138,
      189,  431,  431,  431,  431,  431,  431,  431,  431,  207,
      431,  431,  220,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  108,  431,  431,  431,  431,
       26,  431,   30,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  171,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  223,
      225,  431,  431,  235,  238,  431,  431,  431,   28,   31,

      431,   10,  431,   11,  431,  431,  431,  431,  431,  431,
      431,  431,   29,   32,  431,  431,  431,  431,  431,  431,
      431,  184,  194,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,   18,   19,  431,  431,  431,    7,
      431,  431,  431,    8,  431,  431,   24,   25,  431,  431,
      431,  431,  160,  431,  431,  165,  392,  195,  431,  431,
      202,  204,  431,  213,  216,  227,  230,  431,  431,  431,
      431,   40,  431,   33,  431,  431,  431,  431,  156,  431,
      164,  431,  431,  431,   41,   35,  431,  431,  431,  431,
        9,   42,   36,  431,  431,  431,  200,  431,  431,  431,

      431,  431,  431,  431,  199,  431,  431,  431,   27,  431,
      431,  431,  431,   12,   13,  431,  431,  431,  431,  431,
      151,  431,  209,   34,  163,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    7,    8,    1,    1,
        1,    9,   10,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   19,   19,   19,   19,    1,    1,   20,
       21,   22,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,   49,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,    1,   77,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[78] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        1,    1,    1,    4,    4,    4,    4,    4,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1
    } ;

static yyconst flex_int16_t yy_base[1633] =
    {   0,
        0,    0,   75,   76, 2932, 2931, 2933, 2936,   78, 2936,
     2911,   79, 2910,   75, 2909,   76,   77,   78,   77,   88,
       72, 2908,   73,   71,   81,  137,  131,  119,  157,   89,
      162,   83,    0,  142,  175,  187,  173,  192,  222,  273,
      242,  243,  261,   78,  114,  270,  313,   62,  362,  219,
      340,  389,  177,  323,  203,  311,  367,  248,  435,  302,
      416,  444,  494,  424,  485,  497,  374,   89,    0, 2936,
     2915,    0, 2936,  121, 2936,  521, 2872,  237,   66, 2867,
     2857, 2860, 2868, 2936, 2936, 2936, 2936, 2936, 2936, 2936,
     2936, 2936, 2936, 2936,  514, 2936,  582, 2901, 2936, 2936,

     2936, 2900,    0,  146,  174,  205,  223,  292,  303,  305,
      303,  382,  305,  319,  377,  380,  428,  550,  401,  539,
      422,  433,  439,  455,  515,  475,  482,  480,  507,  510,
      514,  516,  540,  555,  556,    0,  577,  559,  567,  562,
      565,  573,  564,  582,  587,  595,  582,  603,  580,  596,
      603,  605,  592,  634,  593,  636,  610,  644,  635,  609,
      646,  620,  616,  650,  640,  669,  644,  653,  684,  659,
      682,  661,  689,  671, 2936, 2936,  690, 2850,  689,  704,
     2864,  695,  696,  732,  735,  693, 2867,  735, 2862,  705,
      718,  720,  735,  753, 2859,    0,  750, 2864, 2859, 2838,

      750,  737, 2858,  771,  741,  783,  759,  804,  792,  809,
      754, 2846,  816, 2858,  768,  845,  803,  783,  834,  841,
     2854, 2840,  856,  856,  817,  831, 2936, 2936,    0, 2936,
        0, 2851,  113, 2852, 2837,  123, 2851, 2839, 2851, 2847,
     2832,  911, 2936, 2936,  861, 2849,  852,  858,  861,  887,
      883,  885,  886,  889,  892,  879,  891,  891,  890,  896,
      894,  914,  916,  902,  920,  923,  923,  910,  928,  925,
      918,  920,  928,  915,  934,    0,  931,  926,  932,  931,
      926,  942,  942,  946,  944,  945,  974,  966,  970,  960,
      979,  976,    0,  970,  980,  974,  969,  972,  978,  971,

      986,  978,  992,  974,  977,  986,  980,  992,  988,  999,
      983, 2848, 1012,  990, 1006, 1005, 1004, 1009, 1020, 1030,
     1018, 1020, 1032, 1022, 1037, 1036, 1029, 1026, 1028, 1033,
     1050, 1047,    0, 1049, 1036, 1051, 1040, 1050, 1046, 1047,
     1057, 1058, 1079, 1088, 1078,  725, 2829, 1079, 1091, 2843,
     1088, 1076, 1078, 1098, 1097, 2825, 1099, 2841, 1097, 1084,
     2823, 1103,    0, 2834, 1086, 1143, 2840, 2827, 2836, 2823,
     2821, 1146, 2827, 1110, 1100, 2832,  788, 1119, 1102, 1117,
     2819, 1125, 2815, 1125, 1127, 1144, 1132, 1148, 2819, 2828,
     2805, 1161, 1154, 1147, 1114, 2820, 2822, 2822, 2817, 2810,

     2819, 2819, 2810, 2816, 2813, 2814, 2799, 1146, 1163,    0,
     1166, 1200, 1160, 1167, 1177,    0, 1171, 1177, 1166,    0,
     1166, 1176, 1181, 1183, 1192, 1184, 1188, 1202, 1213, 1206,
     1204, 1215, 1207,    0,    0, 1212, 1204, 1218, 1204, 1211,
     1211, 1222,    0, 1212,    0, 1215, 1221, 1217, 1219, 1216,
     1217, 1221, 1222, 1239, 1257,    0, 1250, 1258, 1242, 1244,
     1248,    0, 1269, 1250, 1257,    0, 1263, 1257, 1269, 1278,
     1275, 1272, 1277, 1264, 1264, 1285, 1273, 1280, 1289, 1276,
     1279, 1277, 1290, 1308, 1294, 1310, 1301, 1304, 1317, 1306,
     1324, 1325, 1325, 1318, 1321, 1313,    0, 1312, 1322,    0,

     1333, 1373, 1331, 1335, 1338, 1345, 1346, 1342, 1353, 1349,
        0, 1351, 1367,    0, 2808, 1394, 1362,  380,    0, 1358,
     1362, 1369, 1363, 1390,  395, 1380, 1114,    0, 1388,    0,
     1374, 2800, 1375, 2797, 2798, 1118, 2792,    0, 2788, 2787,
     2786, 2788, 1378, 2800,    0, 1388, 1384, 1391, 2787, 1402,
     2791, 1404, 1387,    0, 1420, 1394, 2789, 1344, 2795,    0,
        0,    0,    0, 1412,    0, 2789, 2936, 2936, 2796, 2783,
     2794, 2794, 2777, 2936, 2784, 2790, 2786, 1414, 1408, 1408,
     1404, 1405, 1408, 1410,    0, 1420, 1435,    0, 1435, 1426,
        0, 1428, 1431, 1424, 2794, 1434, 1434, 1437, 1445, 1432,

     1434, 1439, 1453, 1489, 1450, 1458, 1449,    0, 1499, 1469,
     1453, 1468, 1471, 1488, 1492,    0, 1482, 1510, 1514, 1518,
     1526, 1493, 1511, 1480, 1493, 1511, 1514, 1526, 1513, 1513,
     1514, 1529, 1530, 1518, 1519, 1519, 1537, 1538, 1524, 1524,
     1541, 1529, 1534, 1549, 1546, 1548, 1533, 1535, 1551, 1567,
        0, 1569, 1573,    0, 1583, 1583, 1580, 1568, 1581, 1585,
     1582, 1591, 1575,    0, 1587, 1590, 1595, 1573, 1574, 1576,
     1578, 1585,    0,    0, 1590,    0, 1587, 1582, 1607, 1600,
        0, 2791,    0,    0,    0,    0, 1595, 2792, 1597, 1600,
     1609, 2767, 2766, 2765, 1624,    0,    0,    0,    0, 1648,

        0,    0, 2779, 2775,    0,    0,    0, 2766, 1651, 1654,
     1657, 2772, 1616,    0, 1635, 1642, 1653, 2776, 1639, 2762,
     1652, 1643, 1644, 2770,    0,    0,    0, 2767,    0, 2775,
     2936, 2936, 2936, 2773, 2774, 2776, 2936, 2761, 1645, 1664,
     1646, 1674, 1678, 1682, 1702,    0, 1675, 1662, 1672, 2775,
     1678, 1680, 1688, 1694, 1679, 1681,    0, 1682, 1699, 1685,
     1721, 1681, 1682, 1686, 1688, 1715, 1711,    0, 1697, 1698,
     1699, 1700,    0, 1709, 1708, 1727, 1735,    0, 1736,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1738, 1731,    0, 1724,    0,

     1738, 1743, 1727, 1731, 1740, 1740, 1751, 1740, 1751, 1740,
     1756, 1757, 1746,    0, 1759, 1769, 1758, 1757,    0, 1768,
     1774, 1779, 1778, 1761, 1773,    0,    0,    0, 1780, 2774,
        0, 1772,    0, 1777, 1780, 1778, 1794, 1788, 1795, 1790,
     1818, 1822, 1839, 1843, 1809, 1819,    0, 1824, 1828, 1829,
     2752, 1833, 1823, 1825, 1842, 1853, 1859, 1865, 1869, 2771,
     2766,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 2754, 1835, 1851,    0, 1839,    0, 1845, 2749,    0,
     1862, 1862, 2763, 2760, 2936, 2936, 2761, 2936, 2751, 1856,
     1870, 1877,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 1862,    0,
     1877, 1869, 1864, 1867, 1886, 1870, 1885,    0, 1886,    0,
     1885, 1872, 1873, 1874, 1875, 1935, 1939, 1943, 1947, 2764,
     1896, 1952, 1956, 1960, 1964,    0, 1936, 1961, 1959, 1944,
     1962,    0, 1961,    0, 1964, 1952, 1964, 1952, 1970, 1953,
     1972, 1973, 1957,    0,    0, 1971, 1951, 1960, 1963, 1979,
     1966, 1964, 1979, 1964, 1967, 2021, 2002, 2015, 2001,    0,
     1999, 2017, 2032, 2018,    0, 2023,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 2025, 2012, 2023,    0, 2027, 2743, 2029,

     2029,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 2748, 2743,    0, 2031, 2745, 2072, 2750, 2076,
        0, 2740,    0, 2936,    0, 2026, 2040, 2034, 2050,    0,
     2072, 2068, 2071, 2070, 2061, 2064,    0, 2071, 2085, 2094,
     2099, 2103, 2122,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 2106,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 2091, 2093, 2115,
     2118, 2117, 2122, 2119, 2110, 2123,    0, 2107, 2123, 2122,
     2126, 2126, 2128, 2128,    0, 2116, 2117, 2118,    0, 2136,

     2120, 2137, 2139, 2140, 2141, 2159, 2127, 2146, 2163, 2166,
     2171, 2172,    0, 2174, 2175, 2177, 2161, 2182,    0,    0,
     2183, 2184,    0, 2752,    0,    0, 2736, 2193, 2186, 2741,
     2186, 2187, 2188, 2733, 2182, 2739, 2205,    0, 2193, 2210,
     2211, 2202, 2212, 2225, 2209, 2227, 2210, 2214, 2230, 2230,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 2236, 2230, 2234, 2222,
     2233,    0, 2232,    0, 2234, 2227, 2245, 2231, 2239, 2248,
     2256,    0, 2241, 2258, 2257,    0, 2252, 2253, 1907,    0,
        0,    0, 2259, 2275, 2277, 2262, 2272, 2265, 2282, 2787,

     2287, 2288,    0, 2288, 2289, 2274, 2288, 2292,    0,    0,
     2747, 2746, 2745, 2727, 2726, 2277,    0,  298, 2286,    0,
     2740, 2300, 2740, 2740, 2739, 2738, 2720, 2719, 2300, 2293,
        0, 2289, 2294, 2309, 2318, 2316,    0, 2305, 2319, 2329,
     2319, 2338, 2336,    0,    0,    0, 2341, 2334, 2336,    0,
     2340, 2328, 2336, 2331, 2331, 2347, 2348, 2350, 2353, 2354,
     2355, 2344, 2356, 2343, 2363, 2739, 2345, 2367,  155, 2357,
     2358, 2363, 2379, 2380, 2376, 2382, 2391, 2737,  491,    0,
     2731, 2734, 2389, 2717, 2726, 2715, 2713, 2726, 2722, 2723,
     2394,    0, 2727, 2373,    0, 2721, 2724, 2380, 2381, 2403,

     2388, 2402, 2401, 2404, 2408, 2401, 2397, 2396, 2413,    0,
     2400, 2399,    0, 2411,    0,    0, 2410, 2725, 2411, 2413,
     2434, 2439, 2441,    0, 2445,    0, 2442, 2430, 2432,    0,
     2431,    0, 2430, 2437, 2438, 2456, 2460,    0, 2457, 2458,
     2446, 2706, 2705, 2703, 2716, 2714, 2714, 2443, 2700, 2714,
     2693, 2707, 2704, 2693, 2687,  350, 2672, 2666, 2664, 2677,
     2671, 2667, 2446,    0, 2448,    0, 2453, 2459, 2455, 2456,
     2483,    0,    0, 2476, 2477, 2482, 2468, 2493, 2493, 2476,
     2484, 2504, 2489, 2490, 2492,    0, 2506, 2492, 2507, 2491,
     2517, 2518, 2502, 2503, 2522, 2511,    0, 2431, 2258, 2167,

     2115, 2041, 2014, 2522, 2013, 2009, 2010, 1992, 1989, 1989,
     1942, 1941, 1950, 1877, 1876, 1891, 1882, 1879, 1878, 2510,
     2523,    0, 2527,    0, 2516, 2522, 2534, 2526, 2535,    0,
        0, 2532, 2553, 2549, 2557, 2540, 2544, 2545, 2555,    0,
     2565, 2561,    0, 2543, 2544, 2555, 2556, 2562, 2556, 1436,
     1435, 1107,  832,  833,  829,    0,  802,  799,  767,  764,
      744,  735,    0,  713,  694,  688,  687,  665,  657,  651,
      626, 2572, 2573, 2567, 2565, 2583, 2580,    0, 2574, 2588,
     2579, 2594, 2579, 2600, 2607, 2609, 2595, 2595, 2612,    0,
        0, 2617, 2618,    0,    0,  609,  516,  500,    0,    0,

      497,  487,  472,  474,  484,  467,  426,  434,  428,  404,
      402,  408,    0,    0,  406, 2616, 2617, 2603, 2619, 2605,
     2606,    0,    0, 2610, 2608, 2626, 2627, 2610, 2612, 2624,
     2635, 2623, 2619, 2624,    0,    0,  405,  394,  378,    0,
      375,  355,  369,    0,  340,  341,    0,    0,  301,  293,
     2652, 2637,    0, 2652, 2657,    0,    0,    0, 2658, 2661,
        0,    0, 2656,    0,    0,    0,    0,  267,  260,  277,
      274,    0,  269,  237,  217,  210,  205, 2650,    0, 2671,
        0, 2669, 2657, 2657,    0,    0,  222,  217,  205,  206,
        0,    0,    0, 2672, 2658, 2662,    0, 2661,  196,  191,

      168,  176, 2679, 2680,    0, 2686,  148,  144,    0,  121,
     2683, 2683, 2671,    0,    0,   67, 2675, 2690, 2691,   28,
        0, 2679,    0,    0,    0, 2936, 2747, 2751,   86, 2755,
     2759, 2763
    } ;

static yyconst flex_int16_t yy_def[1633] =
    {   0,
     1626,    1, 1627, 1627, 1628, 1628, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1626, 1629, 1629,   26, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629,   40, 1629, 1629, 1629, 1629, 1629, 1626, 1630, 1626,
     1626, 1631, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,

     1626, 1626, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1626, 1626, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1626, 1626, 1630, 1626,
     1631, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1626, 1626, 1626, 1626, 1626,

     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1626, 1626, 1626, 1626, 1626, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1626, 1632, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1632, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,

     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629,    0, 1626, 1626, 1626, 1626,
     1626, 1626
    } ;

static yyconst flex_int16_t yy_nxt[3014] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,   14,   15,   16,
       17,    8,   18,   19,   20,   20,   20,   20,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   33,   34,   35,   36,   37,   38,   33,   39,
       40,   41,   42,   43,   44,   33,   33,   33,   45,   33,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   33,
       33,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   67,   67,   68,   70,   70,   74,
       76,   74,   85,   71,   71,   88,   92,   90,   95,  103,
       93,   98,   99,  101,  102,   86,   89,   91,   94,   95,

     1624,   97,   97,   97,   97,   97,   97,  174,  104,  227,
      136,  105,  182,  106,  107,  131,  183,  108,  137,   96,
      109,  236,   74,  110,   74,  132,  184,  111,  133,  237,
       96, 1620,   77,   78,  175,  174,  104,   79,  136,  105,
       80,  106,  107,  131,   81,  108,  137,   96,  109,   82,
       83,  110,  123,  132,  124,  111,  133,  118,   96,  112,
      113,  119,  176,  114,  125,  228,  115,  120, 1332, 1333,
      116,  397,  138,  117, 1616,  121,  401,  122,  139,  126,
      123,  398,  124,  245,  134,  118,  402,  112,  113,  119,
      127,  114,  125,  128,  115,  120,  129,  140,  116,  134,

      138,  117,  130,  121,  135,  122,  139,  126,  246,  142,
      146,  245,  134,  143,  148,  147, 1615,  141,  127,  135,
     1614,  128,  149,  144,  129,  140, 1610,  134,  150,  145,
      130,  151,  135,  138,  152,  195,  246,  142,  146,  139,
     1609,  143,  148,  147,  153,  141,  247,  135,  154,  248,
      149,  144,  123,  200,  124, 1608,  150,  145,  155,  151,
     1607,  138,  152, 1602,  125,  163,  156,  201,  164, 1601,
     1600,  165,  153,  168,  247, 1599,  154,  248,  169, 1593,
      190,  166,  124,  170, 1592,  146,  155,  171,  167, 1591,
      147,  172,  125,  163,  156,  157,  164,  173,  233,  165,

      234,  168,  158,  159,  235, 1590,  169,  104,  160,  166,
      105,  170,  106,  146,  161,  171,  167,  162,  205,  172,
      177,  177, 1589,  157, 1588,  173,  177, 1587,  249,  250,
      158,  159,  251,  140, 1586,  104,  160,  177,  105,  178,
      106, 1585,  161, 1577,  252,  162,  107,  255, 1284,  108,
      136, 1576,  109,  141,  256,  110,  249,  250,  137,  111,
      251,  202,  126,  177,  177,  203, 1285,  207,  207,  177,
      207,  207,  252,  127,  107,  255,  128,  179,  196,  129,
      180,  141,  256,  110,  181,  130,  197,  111,  118,  142,
      191,  198,  119,  143,  199,  684,  685,  686,  120,  257,

     1412,  192,  258,  144,  193, 1575,  121,  129,  122,  145,
      692,  693,  694,  130, 1574,  131,  185,  142, 1413, 1573,
      186,  143,  253,  254,  187,  132,  188,  257,  133, 1572,
      258,  204, 1571,  189,  121, 1570,  122,  145,  153,  177,
      177,  265,  154,  131, 1569,  177,  226,  226,  226,  226,
      253,  254,  155,  132,  168, 1568,  194,  148,  268,  169,
      156,  259,  260,  261,  170,  149,  209,  177,  269,  265,
      210,  150,  177, 1550,  151, 1549, 1548,  152, 1547,  270,
      155, 1546,  218,  177, 1545,  206,  268,  219,  156,  259,
      260,  261,  220,  149,  211,  221,  269,  271, 1544,  150,

      207,  207,  208,  207,  207,  152,  212,  270,  274,  207,
      207,  171,  207,  213,  214,  172,  215,  163,  275,  276,
      164,  173,   76,  165, 1543,  271,  174,  242,  242,  242,
      242,  242,  242,  166, 1542,  222,  274,  277,  278,  223,
      167, 1343, 1541,  172, 1540,  163,  275,  276,  216,  224,
      279,  165,  272, 1344,  225, 1539,  273,  280, 1345,  207,
      207,  217,  207,  207, 1538,  277,  278, 1537,  167,  226,
      226,  226,  226,  266,   77,   78,  281,  262,  279,   79,
      272,  267,   80,  263,  273,  280,   81,  264,  282,  283,
     1536,   82,   83,   95,  288,   97,   97,   97,   97,   97,

       97,  266,  289,  290,  281,  262,  291,  292,  293,  267,
      284,  263,  294,  285,  286,  264,  282,  283,  287,  295,
      296,  297,  288,  298,   96,  301,  302,  299,  306,  303,
      289,  290,  307,  304,  291,  292,  293,  312,  284,  305,
      294,  285,  286,  300,  316,  321,  287,  295,  296,  297,
      324,  298,   96,  301,  302,  299,  306,  303,  325,  313,
      307,  304,  308,  319,  309,  312,  317,  305,  322,  310,
      329,  300,  316,  321,  326,  311,  314,  315,  324,  330,
      318,  334,  320, 1535,  327,  323,  325,  313,  335,  339,
      308,  319,  309, 1515,  317,  328,  322,  310,  329,  331,

      342,  345,  326,  311,  314,  315,  340,  330,  318,  334,
      320,  332,  327,  323,  336,  333,  335,  339, 1514,  343,
      337,  341,  344,  328,  338,  249, 1513,  331,  342,  345,
      250,  256, 1512,  265,  340,  253,  254, 1511, 1510,  332,
      346,  346,  336,  333, 1509,  270,  346,  343,  337,  341,
      344,  274,  338,  348,  346,  346,  275,  346,  349,  352,
      346,  355,  262,  351,  254,  259,  260,  261,  263,  266,
      361,  346,  264,  359,  276,  514,  514,  267,  290,  360,
     1508,  514,  298,  284,  362,  289,  285,  286,  316,  281,
      354,  287,  514,  259,  260,  353,  263,  266,  324, 1507,

      264,  294,  363,  346,  346,  357,  372,  299,  295,  346,
      375,  284, 1506,  289,  365,  286,  380,  281,  335,  366,
      346,  367,  371,  300,  377,  377,  384,  377,  377,  294,
      303, 1505,  307,  331,  304,  299,  374,  308,  322,  309,
      305, 1504,  346,  346,  310,  332,  387,  345,  346,  333,
      311,  300,  376,  545,  545,  323,  545,  545,  378,  346,
      307,  331,  304, 1503,  336,  308,  322,  309,  305,  326,
      337,  339,  310,  386,  338,  394, 1502,  333,  379,  327,
      340,  377,  377,  382,  377,  377,  343,  408,  410,  344,
      328,  389,  388,  411,  412,  341, 1501,  326,  337,  339,

     1500, 1499,  338,  395,  395,  395,  395,  327,  392,  413,
      414,  415,  416,  417,  393,  408,  410,  344,  385,  418,
      419,  411,  412,  341,  242,  242,  242,  242,  242,  242,
      420,  421,  422,  423,  424,  425,  426,  413,  414,  415,
      416,  417,  427,  428,  429,  430,  431,  418,  419,  432,
      433,  434,  435,  436,  437,  438,  439,  440,  420,  421,
      422,  423,  424,  425,  426,  441,  442,  443,  444,  445,
      427,  428,  429,  430,  431,  446,  447,  432,  433,  434,
      435,  436,  437,  438,  439,  440,  448,  449,  450,  451,
      452,  453,  455,  441,  442,  443,  444,  445,  456,  457,

      454,  458,  459,  446,  447,  460,  461,  462,  463,  464,
      465,  466,  467,  468,  448,  449,  469,  470,  471,  472,
      455,  473,  474,  475,  476,  477,  456,  457,  454,  458,
      459,  481,  482,  460,  461,  462,  463,  464,  465,  466,
      467,  468,  483,  484,  469,  470,  471,  472,  485,  473,
      474,  475,  476,  477,  479,  486,  487,  488,  480,  481,
      482,  489,  490,  492,  493,  494,  495,  496,  497,  498,
      483,  484,  499,  500,  491,  501,  485,  502,  503,  505,
      506,  507,  479,  486,  487,  488,  480,  504,  508,  489,
      490,  492,  493,  494,  495,  496,  497,  498,  509,  510,

      499,  500,  491,  501,  511,  502,  503,  505,  506,  507,
      512,  513,  412,  413,  416,  504,  508,  419,  424,  425,
      426,  429,  431,  434,  438,  439,  509,  510,  448,  696,
      697,  698,  511,  705,  706,  707,  461,  464,  512,  513,
      516,  517,  519,  469,  477,  520,  521,  522,  523,  524,
      526,  528,  529,  531,  483,  490,  533,  450,  451,  452,
      453,  539,  540,  541,  543,  464,  492,  491,  496,  454,
      500,  546,  547,  502, 1498,  503,  560,  561,  562,  511,
      513,  578,  548,  490,  504,  457,  565,  565,  565,  565,
      579,  580,  585,  586,  552,  550,  553,  454,  554,  587,

      588,  555,  508,  556,  589,  590,  591,  563,  564,  578,
      592,  593,  504,  457,  581,  582,  583,  584,  579,  580,
      585,  586,  597,  594,  595,  596,  598,  587,  588,  599,
      508,  600,  589,  590,  591,  601,  602,  603,  592,  593,
      604,  605,  606,  607,  608,  609,  610,  611,  612,  613,
      597,  594,  595,  596,  598,  614,  615,  599,  616,  600,
      617,  618,  619,  601,  602,  603,  620,  621,  604,  605,
      606,  607,  608,  609,  610,  611,  612,  613,  622,  623,
      625,  626,  627,  614,  615,  628,  616,  629,  617,  618,
      619,  630,  631,  632,  620,  621,  633,  624,  634,  635,

      636,  637,  638,  639,  640,  641,  622,  623,  625,  626,
      627,  642,  643,  628,  644,  629,  645,  646,  647,  630,
      631,  632,  648,  649,  633,  624,  634,  635,  636,  637,
      638,  639,  640,  641,  650,  651,  652,  653,  654,  642,
      643,  657,  644,  655,  645,  646,  647,  656,  658,  659,
      648,  649,  660,  661,  662,  663,  664,  665,  666,  725,
      726,  727,  650,  651,  652,  653,  654,  672,  667,  657,
      673,  655,  674,  675,  676,  656,  658,  659,  677,  678,
      660,  661,  662,  663,  664,  665,  666,  668,  669,  670,
      671,  679,  680,  681,  585,  672,  667,  590,  673,  597,

      674,  675,  676,  595,  596,  598,  677,  678,  581,  582,
      583,  584,  601,  603,  608,  609,  616,  629,  635,  679,
      680,  681,  683,  643,  649,  687,  658,  689,  659,  663,
      672,  688,  596,  690,  668,  669,  670,  671,  681,  739,
      691,  695,  699,  700,  702,  713,  715,  740,  741,  742,
      743,  716,  717,  744,  719,  745,  721,  722,  723,  746,
      747,  748,  749,  750,  751,  752,  729,  739,  754,  755,
      756,  757,  758,  759,  760,  740,  741,  742,  743,  761,
      766,  744,  767,  745,  768, 1497, 1496,  746,  747,  748,
      749,  750,  751,  752,  773,  774,  754,  755,  756,  757,

      758,  759,  760,  762,  763,  764,  765,  761,  766,  775,
      767,  776,  768,  769,  770,  771,  772,  777,  778,  779,
      796,  799,  773,  774,  780,  781,  782,  783,  784,  785,
      786,  787,  788,  789,  790,  791,  797,  775,  800,  776,
      792,  793,  794,  795,  801,  777,  778,  779,  796,  799,
      798,  802,  803,  804,  805,  806,  807,  808,  810,  811,
      812,  813,  814,  815,  797,  816,  800,  817,  818,  819,
      809,  820,  801,  821,  822,  823,  824,  825,  798,  802,
      803,  804,  805,  806,  807,  808,  810,  811,  812,  813,
      814,  815,  826,  816,  827,  817,  818,  819,  809,  820,

      828,  821,  822,  823,  824,  825,  829,  830,  831,  832,
      833,  834,  835,  836,  837,  838,  839,  840,  841,  842,
      826,  843,  827,  844,  845,  846,  847,  848,  828,  849,
      850,  749,  755,  756,  829,  830,  831,  832,  833,  834,
      835,  836,  837,  838,  839,  840,  841,  842,  759,  843,
      761,  844,  845,  846,  847,  848,  804,  849,  850,  852,
      853,  854,  769,  770,  771,  772,  863,  864,  865,  866,
      867,  868,  869,  870,  871,  811,  855,  819,  859,  825,
      832,  833,  837,  845,  873,  890,  891,  892,  893,  894,
      895,  896,  897,  898,  899,  900,  901,  902,  903,  904,

      909,  910,  911,  874,  913,  875,  914,  876,  878,  880,
      881,  882,  915,  890,  891,  892,  905,  906,  907,  908,
      916,  917,  918,  919,  920,  921,  926,  927,  909,  910,
      911,  928,  913,  929,  914,  922,  923,  924,  925,  930,
      915,  931,  932,  933,  934,  935,  936,  937,  916,  917,
      918,  919,  920,  921,  926,  927,  938,  939,  940,  928,
      941,  929,  942,  943,  944,  945,  946,  930,  947,  931,
      932,  933,  934,  935,  936,  937,  948,  949,  950,  951,
      952,  953,  954,  955,  938,  939,  940,  956,  941,  957,
      942,  943,  944,  945,  946,  958,  947,  959,  960,  961,

      962,  963,  964,  965,  948,  949,  950,  951,  952,  953,
      954,  955,  966,  967,  969,  956,  970,  957,  971,  972,
      973,  974,  975,  958,  976,  959,  960,  961,  962,  963,
      964,  965,  977,  978,  979,  980,  981,  982,  983,  984,
      966,  967,  969,  993,  970,  994,  971,  972,  973,  974,
      975,  995,  976,  985,  986,  987,  988,  989,  990,  991,
      992,  997,  998,  911,  996,  917,  918,  920, 1004, 1005,
     1006,  993,  947,  994, 1007, 1008, 1009,  954,  966,  995,
     1010, 1011, 1012,  922,  923,  924,  925,  969,  973,  997,
      998, 1000,  996, 1001, 1002, 1003,  993, 1026, 1027, 1028,

     1016, 1029, 1030, 1031, 1032,  954, 1018, 1034, 1035, 1017,
     1036, 1037, 1038, 1033, 1039,  969, 1020, 1040, 1041, 1042,
     1043, 1259, 1260, 1261, 1021, 1026, 1027, 1028, 1471, 1029,
     1030, 1031, 1032, 1470, 1469, 1034, 1035, 1061, 1036, 1037,
     1038, 1468, 1039, 1467, 1466, 1040, 1041, 1042, 1043, 1044,
     1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
     1055, 1056, 1057, 1058, 1059, 1061, 1062, 1063, 1064, 1065,
     1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
     1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
     1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,

     1096, 1097, 1098, 1099, 1100, 1101, 1102, 1465, 1464, 1463,
     1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
     1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
     1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1109, 1110,
     1111, 1112, 1462, 1113, 1118, 1106, 1114, 1115, 1116, 1119,
     1120, 1121, 1122, 1123, 1030, 1037, 1117, 1086, 1461, 1460,
     1459, 1107, 1458, 1457, 1455, 1139, 1109, 1110, 1111, 1112,
     1108, 1113, 1118, 1106, 1140, 1141, 1142, 1119, 1120, 1121,
     1122, 1123, 1125, 1126, 1117, 1129, 1131, 1132, 1133, 1107,
     1114, 1115, 1116, 1139, 1143, 1454, 1106, 1144, 1145, 1146,

     1117, 1147, 1140, 1141, 1142, 1148, 1149, 1150, 1151, 1152,
     1153, 1154, 1107, 1155, 1156, 1157, 1158, 1159, 1160, 1161,
     1162, 1108, 1143, 1134, 1135, 1144, 1145, 1146, 1117, 1147,
     1167, 1168, 1169, 1148, 1149, 1150, 1163, 1164, 1165, 1166,
     1107, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
     1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1167, 1168,
     1169, 1187, 1188, 1189, 1190, 1191, 1192, 1453, 1195, 1170,
     1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180,
     1181, 1182, 1183, 1184, 1185, 1186, 1196, 1197, 1198, 1187,
     1188, 1189, 1190, 1191, 1192, 1193, 1195, 1199, 1200, 1201,

     1202, 1194, 1203, 1204, 1205, 1207, 1208, 1211, 1212, 1213,
     1176, 1190, 1191, 1192, 1196, 1197, 1198, 1452, 1193, 1224,
     1225, 1226, 1206, 1193, 1194, 1199, 1200, 1201, 1202, 1194,
     1203, 1204, 1205, 1207, 1208, 1229, 1230, 1231, 1216, 1218,
     1219, 1220, 1232, 1233, 1214, 1215, 1193, 1234, 1235, 1236,
     1206, 1237, 1222, 1238, 1239, 1240, 1227, 1228, 1241, 1242,
     1243, 1244, 1245, 1229, 1230, 1231, 1246, 1247, 1248, 1249,
     1232, 1233, 1250, 1251, 1252, 1234, 1235, 1236, 1253, 1237,
     1254, 1238, 1239, 1240, 1255, 1256, 1241, 1242, 1243, 1244,
     1245, 1257, 1258, 1262, 1246, 1247, 1248, 1249, 1263, 1264,

     1250, 1251, 1252, 1265, 1266, 1267, 1253, 1268, 1254, 1270,
     1271, 1273, 1255, 1256, 1274, 1275, 1276, 1277, 1248, 1257,
     1258, 1262, 1272, 1263, 1298, 1451, 1263, 1264, 1299, 1300,
     1301, 1265, 1266, 1267, 1302, 1268, 1286, 1270, 1271, 1273,
     1303, 1304, 1274, 1275, 1276, 1277, 1283, 1305, 1287, 1306,
     1272, 1291, 1298, 1288, 1289, 1307, 1299, 1300, 1301, 1308,
     1309, 1310, 1302, 1311, 1312, 1313, 1314, 1315, 1303, 1304,
     1316, 1317, 1318, 1319, 1320, 1305, 1321, 1306, 1322, 1323,
     1324, 1325, 1326, 1307, 1327, 1328, 1330, 1308, 1309, 1310,
     1331, 1311, 1312, 1313, 1314, 1315, 1334, 1335, 1316, 1317,

     1318, 1319, 1320, 1336, 1321, 1337, 1322, 1323, 1324, 1325,
     1326, 1338, 1327, 1328, 1330, 1339, 1340, 1341, 1331, 1312,
     1326, 1363, 1364, 1358, 1334, 1335, 1365, 1366, 1367, 1368,
     1369, 1336, 1370, 1337, 1371, 1359, 1372, 1373, 1374, 1338,
     1360, 1375, 1376, 1339, 1340, 1341, 1377, 1348, 1356, 1363,
     1364, 1378, 1380, 1381, 1365, 1366, 1367, 1368, 1369, 1382,
     1370, 1383, 1371, 1384, 1372, 1373, 1374, 1385, 1386, 1375,
     1376, 1387, 1388, 1389, 1377, 1390, 1391, 1392, 1393, 1378,
     1380, 1381, 1394, 1395, 1396, 1397, 1376, 1382, 1420, 1383,
     1421, 1384, 1422, 1423, 1424, 1385, 1386, 1425, 1450, 1387,

     1388, 1389, 1428, 1390, 1391, 1392, 1393, 1429, 1430, 1431,
     1394, 1395, 1396, 1397, 1404, 1432, 1420, 1433, 1421, 1434,
     1422, 1423, 1424, 1426, 1435, 1425, 1427, 1436, 1437, 1438,
     1428, 1439, 1440, 1441, 1442, 1429, 1430, 1431, 1443, 1444,
     1445, 1446, 1447, 1432, 1448, 1433, 1449, 1434, 1430, 1472,
     1473, 1426, 1435, 1474, 1427, 1436, 1437, 1438, 1475, 1439,
     1440, 1441, 1442, 1476, 1477, 1478, 1443, 1444, 1445, 1446,
     1447, 1479, 1448, 1480, 1449, 1481, 1456, 1472, 1473, 1482,
     1483, 1474, 1484, 1485, 1486, 1487, 1475, 1488, 1489, 1490,
     1491, 1476, 1477, 1478, 1492, 1493, 1494, 1495, 1516, 1479,

     1517, 1480, 1518, 1481, 1519, 1520, 1521, 1482, 1483, 1522,
     1484, 1485, 1486, 1487, 1523, 1488, 1489, 1490, 1491, 1524,
     1525, 1526, 1492, 1493, 1494, 1495, 1516, 1527, 1517, 1528,
     1518, 1529, 1519, 1520, 1521, 1530, 1531, 1522, 1532, 1533,
     1534, 1551, 1523, 1552, 1553, 1554, 1555, 1524, 1525, 1526,
     1556, 1557, 1558, 1559, 1560, 1527, 1561, 1528, 1562, 1529,
     1563, 1564, 1565, 1530, 1531, 1566, 1532, 1533, 1534, 1551,
     1567, 1552, 1553, 1554, 1555, 1578, 1579, 1580, 1556, 1557,
     1558, 1559, 1560, 1581, 1561, 1582, 1562, 1583, 1563, 1564,
     1565, 1584, 1594, 1566, 1595, 1596, 1597, 1598, 1567, 1603,

     1604, 1605, 1606, 1578, 1579, 1580, 1611, 1612, 1613, 1617,
     1618, 1581, 1619, 1582, 1621, 1583, 1622, 1623, 1625, 1584,
     1594, 1419, 1595, 1596, 1597, 1598, 1418, 1603, 1604, 1605,
     1606, 1417, 1416, 1415, 1611, 1612, 1613, 1617, 1618, 1414,
     1619, 1411, 1621, 1410, 1622, 1623, 1625,   69,   69,   69,
       69,   72,   72,   72,   72,  229, 1409, 1408,  229,  231,
     1407,  231,  231, 1138, 1406, 1138, 1138, 1405, 1403, 1402,
     1401, 1400, 1399, 1398, 1379, 1362, 1361, 1357, 1355, 1354,
     1353, 1352, 1351, 1350, 1349, 1347, 1346, 1342, 1329, 1297,
     1296, 1295, 1294, 1293, 1292, 1290, 1282, 1281, 1280, 1279,

     1278, 1269, 1223, 1221, 1217, 1210, 1209, 1137, 1136, 1130,
     1128, 1127, 1124, 1060, 1025, 1024, 1023, 1022, 1019, 1015,
     1014, 1013,  999,  968,  912,  889,  888,  887,  886,  885,
      884,  883,  879,  877,  872,  862,  861,  860,  858,  857,
      856,  753,  851,  753,  738,  737,  736,  735,  734,  733,
      732,  731,  730,  728,  724,  720,  718,  714,  712,  711,
      710,  709,  708,  704,  703,  701,  682,  577,  576,  575,
      574,  573,  572,  571,  570,  569,  568,  567,  566,  559,
      558,  557,  551,  549,  544,  542,  538,  537,  536,  535,
      534,  532,  530,  527,  525,  518,  515,  478,  409,  407,

      406,  405,  404,  403,  400,  399,  396,  391,  390,  383,
      381,  373,  370,  369,  368,  364,  358,  356,  350,  347,
      244,  243,  241,  240,  239,  238,  232,  230,  100,   87,
       84,   75, 1626,   73,   73,    7, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,

     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626
    } ;

static yyconst flex_int16_t yy_chk[3014] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    9,
       12,    9,   14,    3,    4,   16,   18,   17,   19, 1629,
       18,   21,   21,   23,   23,   14,   16,   17,   18,   20,

     1620,   20,   20,   20,   20,   20,   20,   44,   24,   68,
       32,   24,   48,   24,   25,   30,   48,   25,   32,   19,
       25,   79,   74,   25,   74,   30,   48,   25,   30,   79,
       20, 1616,   12,   12,   45,   44,   24,   12,   32,   24,
       12,   24,   25,   30,   12,   25,   32,   19,   25,   12,
       12,   25,   28,   30,   28,   25,   30,   27,   20,   26,
       26,   27,   45,   26,   28,   68,   26,   27, 1269, 1269,
       26,  233,   34,   26, 1610,   27,  236,   27,   34,   29,
       28,  233,   28,  104,   31,   27,  236,   26,   26,   27,
       29,   26,   28,   29,   26,   27,   29,   35,   26,   53,

       34,   26,   29,   27,   31,   27,   34,   29,  105,   36,
       37,  104,   31,   36,   38,   37, 1608,   35,   29,   53,
     1607,   29,   38,   36,   29,   35, 1602,   53,   38,   36,
       29,   38,   31,   55,   38,   53,  105,   36,   37,   55,
     1601,   36,   38,   37,   39,   35,  106,   53,   39,  107,
       38,   36,   50,   55,   50, 1600,   38,   36,   39,   38,
     1599,   55,   38, 1590,   50,   41,   39,   55,   41, 1589,
     1588,   41,   39,   42,  106, 1587,   39,  107,   42, 1577,
       50,   41,   50,   42, 1576,   58,   39,   43,   41, 1575,
       58,   43,   50,   41,   39,   40,   41,   43,   78,   41,

       78,   42,   40,   40,   78, 1574,   42,   46,   40,   41,
       46,   42,   46,   58,   40,   43,   41,   40,   58,   43,
       46,   46, 1573,   40, 1571,   43,   46, 1570,  108,  109,
       40,   40,  110,   56, 1569,   46,   40,   46,   46,   46,
       46, 1568,   40, 1550,  111,   40,   47,  113, 1218,   47,
       54, 1549,   47,   56,  114,   47,  108,  109,   54,   47,
      110,   56,   51,   47,   47,   56, 1218,   60,   60,   47,
       60,   60,  111,   51,   47,  113,   51,   47,   54,   51,
       47,   56,  114,   47,   47,   51,   54,   47,   49,   57,
       51,   54,   49,   57,   54,  518,  518,  518,   49,  115,

     1356,   51,  116,   57,   51, 1546,   49,   51,   49,   57,
      525,  525,  525,   51, 1545,   52,   49,   57, 1356, 1543,
       49,   57,  112,  112,   49,   52,   49,  115,   52, 1542,
      116,   57, 1541,   49,   49, 1539,   49,   57,   61,   52,
       52,  119,   61,   52, 1538,   52,   67,   67,   67,   67,
      112,  112,   61,   52,   64, 1537,   52,   59,  121,   64,
       61,  117,  117,  117,   64,   59,   61,   61,  122,  119,
       61,   59,   61, 1515,   59, 1512, 1511,   59, 1510,  123,
       61, 1509,   64,   61, 1508,   59,  121,   64,   61,  117,
      117,  117,   64,   59,   62,   64,  122,  124, 1507,   59,

       59,   59,   59,   59,   59,   59,   62,  123,  126,   62,
       62,   65,   62,   62,   62,   65,   62,   63,  127,  128,
       63,   65,   76,   63, 1506,  124,   66,   95,   95,   95,
       95,   95,   95,   63, 1505,   65,  126,  129,  130,   65,
       63, 1279, 1504,   65, 1503,   63,  127,  128,   63,   65,
      131,   63,  125, 1279,   66, 1502,  125,  132, 1279,   63,
       63,   63,   63,   63, 1501,  129,  130, 1498,   63,   66,
       66,   66,   66,  120,   76,   76,  133,  118,  131,   76,
      125,  120,   76,  118,  125,  132,   76,  118,  134,  135,
     1497,   76,   76,   97,  138,   97,   97,   97,   97,   97,

       97,  120,  139,  140,  133,  118,  141,  142,  143,  120,
      137,  118,  144,  137,  137,  118,  134,  135,  137,  144,
      145,  146,  138,  147,   97,  149,  150,  148,  152,  151,
      139,  140,  153,  151,  141,  142,  143,  155,  137,  151,
      144,  137,  137,  148,  157,  160,  137,  144,  145,  146,
      162,  147,   97,  149,  150,  148,  152,  151,  163,  156,
      153,  151,  154,  159,  154,  155,  158,  151,  161,  154,
      165,  148,  157,  160,  164,  154,  156,  156,  162,  165,
      158,  167,  159, 1496,  164,  161,  163,  156,  168,  170,
      154,  159,  154, 1471,  158,  164,  161,  154,  165,  166,

      172,  174,  164,  154,  156,  156,  171,  165,  158,  167,
      159,  166,  164,  161,  169,  166,  168,  170, 1470,  173,
      169,  171,  173,  164,  169,  179, 1469,  166,  172,  174,
      180,  183, 1468,  186,  171,  182,  182, 1467, 1466,  166,
      177,  177,  169,  166, 1465,  190,  177,  173,  169,  171,
      173,  191,  169,  179,  180,  180,  192,  177,  180,  183,
      180,  186,  185,  182,  182,  184,  184,  184,  185,  188,
      192,  180,  185,  190,  193,  346,  346,  188,  202,  191,
     1464,  346,  205,  197,  192,  201,  197,  197,  211,  194,
      185,  197,  346,  184,  184,  184,  185,  188,  215, 1462,

      185,  204,  193,  194,  194,  188,  202,  206,  204,  194,
      205,  197, 1461,  201,  197,  197,  211,  194,  218,  197,
      194,  197,  201,  206,  207,  207,  215,  207,  207,  204,
      208, 1460,  209,  217,  208,  206,  204,  210,  213,  210,
      208, 1459,  209,  209,  210,  217,  218,  225,  209,  217,
      210,  206,  206,  377,  377,  213,  377,  377,  208,  209,
      209,  217,  208, 1458,  219,  210,  213,  210,  208,  216,
      219,  220,  210,  217,  219,  225, 1457,  217,  210,  216,
      223,  213,  213,  213,  213,  213,  224,  245,  247,  224,
      216,  220,  219,  248,  249,  223, 1455,  216,  219,  220,

     1454, 1453,  219,  226,  226,  226,  226,  216,  223,  250,
      251,  252,  253,  254,  224,  245,  247,  224,  216,  255,
      256,  248,  249,  223,  242,  242,  242,  242,  242,  242,
      257,  258,  259,  260,  261,  261,  262,  250,  251,  252,
      253,  254,  263,  264,  265,  266,  267,  255,  256,  268,
      269,  270,  271,  272,  273,  274,  275,  277,  257,  258,
      259,  260,  261,  261,  262,  278,  279,  280,  281,  282,
      263,  264,  265,  266,  267,  283,  284,  268,  269,  270,
      271,  272,  273,  274,  275,  277,  285,  286,  287,  287,
      287,  287,  288,  278,  279,  280,  281,  282,  289,  290,

      287,  291,  292,  283,  284,  294,  295,  296,  297,  298,
      299,  300,  301,  302,  285,  286,  303,  304,  305,  306,
      288,  307,  308,  309,  310,  311,  289,  290,  287,  291,
      292,  314,  315,  294,  295,  296,  297,  298,  299,  300,
      301,  302,  316,  317,  303,  304,  305,  306,  318,  307,
      308,  309,  310,  311,  313,  319,  320,  321,  313,  314,
      315,  322,  323,  324,  325,  326,  327,  328,  329,  330,
      316,  317,  331,  332,  323,  334,  318,  335,  336,  337,
      338,  339,  313,  319,  320,  321,  313,  336,  340,  322,
      323,  324,  325,  326,  327,  328,  329,  330,  341,  342,

      331,  332,  323,  334,  343,  335,  336,  337,  338,  339,
      344,  345,  348,  349,  351,  336,  340,  352,  353,  353,
      354,  355,  357,  359,  360,  362,  341,  342,  365,  527,
      527,  527,  343,  536,  536,  536,  374,  375,  344,  345,
      348,  349,  351,  378,  379,  352,  353,  353,  354,  355,
      357,  359,  360,  362,  380,  382,  365,  366,  366,  366,
      366,  372,  372,  372,  374,  375,  384,  382,  385,  366,
      386,  378,  379,  387, 1452,  388,  392,  392,  392,  393,
      394,  408,  380,  382,  388,  372,  395,  395,  395,  395,
      409,  411,  413,  414,  384,  382,  385,  366,  386,  415,

      417,  387,  392,  388,  418,  419,  421,  393,  394,  408,
      422,  423,  388,  372,  412,  412,  412,  412,  409,  411,
      413,  414,  425,  423,  424,  424,  426,  415,  417,  427,
      392,  428,  418,  419,  421,  429,  430,  431,  422,  423,
      432,  433,  436,  437,  438,  439,  440,  441,  442,  444,
      425,  423,  424,  424,  426,  446,  447,  427,  448,  428,
      449,  450,  451,  429,  430,  431,  452,  453,  432,  433,
      436,  437,  438,  439,  440,  441,  442,  444,  454,  455,
      457,  458,  459,  446,  447,  460,  448,  461,  449,  450,
      451,  463,  464,  465,  452,  453,  467,  455,  468,  469,

      470,  471,  472,  473,  474,  475,  454,  455,  457,  458,
      459,  476,  477,  460,  478,  461,  479,  480,  481,  463,
      464,  465,  482,  483,  467,  455,  468,  469,  470,  471,
      472,  473,  474,  475,  484,  485,  486,  487,  488,  476,
      477,  490,  478,  489,  479,  480,  481,  489,  491,  492,
      482,  483,  493,  494,  495,  496,  498,  499,  501,  558,
      558,  558,  484,  485,  486,  487,  488,  503,  501,  490,
      504,  489,  505,  506,  507,  489,  491,  492,  508,  509,
      493,  494,  495,  496,  498,  499,  501,  502,  502,  502,
      502,  510,  512,  513,  517,  503,  501,  520,  504,  522,

      505,  506,  507,  521,  521,  523,  508,  509,  516,  516,
      516,  516,  524,  526,  529,  531,  533,  543,  546,  510,
      512,  513,  517,  547,  548,  520,  550,  522,  552,  553,
      556,  521,  521,  523,  555,  555,  555,  555,  564,  578,
      524,  526,  529,  531,  533,  543,  546,  579,  580,  581,
      582,  547,  548,  583,  550,  584,  552,  553,  556,  586,
      587,  589,  590,  592,  593,  594,  564,  578,  596,  597,
      598,  599,  600,  601,  602,  579,  580,  581,  582,  603,
      605,  583,  606,  584,  607, 1451, 1450,  586,  587,  589,
      590,  592,  593,  594,  610,  611,  596,  597,  598,  599,

      600,  601,  602,  604,  604,  604,  604,  603,  605,  612,
      606,  613,  607,  609,  609,  609,  609,  614,  615,  617,
      622,  624,  610,  611,  618,  618,  618,  618,  619,  619,
      619,  619,  620,  620,  620,  620,  623,  612,  625,  613,
      621,  621,  621,  621,  626,  614,  615,  617,  622,  624,
      623,  627,  628,  629,  630,  631,  632,  633,  634,  635,
      636,  637,  638,  639,  623,  640,  625,  641,  642,  643,
      633,  644,  626,  645,  646,  647,  648,  649,  623,  627,
      628,  629,  630,  631,  632,  633,  634,  635,  636,  637,
      638,  639,  650,  640,  652,  641,  642,  643,  633,  644,

      653,  645,  646,  647,  648,  649,  655,  656,  657,  658,
      659,  660,  661,  662,  663,  665,  666,  667,  668,  669,
      650,  670,  652,  671,  672,  675,  677,  678,  653,  679,
      680,  687,  689,  690,  655,  656,  657,  658,  659,  660,
      661,  662,  663,  665,  666,  667,  668,  669,  691,  670,
      695,  671,  672,  675,  677,  678,  713,  679,  680,  687,
      689,  690,  700,  700,  700,  700,  709,  709,  709,  710,
      710,  710,  711,  711,  711,  715,  691,  716,  695,  717,
      719,  721,  722,  723,  713,  739,  740,  741,  742,  742,
      742,  742,  743,  743,  743,  743,  744,  744,  744,  744,

      747,  748,  749,  715,  751,  716,  752,  717,  719,  721,
      722,  723,  753,  739,  740,  741,  745,  745,  745,  745,
      754,  755,  756,  758,  759,  760,  762,  763,  747,  748,
      749,  764,  751,  765,  752,  761,  761,  761,  761,  766,
      753,  767,  769,  770,  771,  772,  774,  775,  754,  755,
      756,  758,  759,  760,  762,  763,  776,  777,  779,  764,
      796,  765,  797,  799,  801,  802,  803,  766,  804,  767,
      769,  770,  771,  772,  774,  775,  805,  806,  807,  808,
      809,  810,  811,  812,  776,  777,  779,  813,  796,  815,
      797,  799,  801,  802,  803,  816,  804,  817,  818,  820,

      821,  822,  823,  824,  805,  806,  807,  808,  809,  810,
      811,  812,  825,  829,  832,  813,  834,  815,  835,  836,
      837,  838,  839,  816,  840,  817,  818,  820,  821,  822,
      823,  824,  841,  841,  841,  841,  842,  842,  842,  842,
      825,  829,  832,  845,  834,  846,  835,  836,  837,  838,
      839,  848,  840,  843,  843,  843,  843,  844,  844,  844,
      844,  849,  850,  852,  848,  853,  854,  855,  856,  856,
      856,  845,  873,  846,  857,  857,  857,  874,  876,  848,
      858,  858,  858,  859,  859,  859,  859,  878,  881,  849,
      850,  852,  848,  853,  854,  855,  882,  890,  891,  892,

      873,  909,  911,  912,  913,  874,  876,  914,  915,  874,
      916,  917,  919,  913,  921,  878,  881,  922,  923,  924,
      925, 1189, 1189, 1189,  882,  890,  891,  892, 1419,  909,
      911,  912,  913, 1418, 1417,  914,  915,  931,  916,  917,
      919, 1416,  921, 1415, 1414,  922,  923,  924,  925,  926,
      926,  926,  926,  927,  927,  927,  927,  928,  928,  928,
      928,  929,  929,  929,  929,  931,  932,  932,  932,  932,
      933,  933,  933,  933,  934,  934,  934,  934,  935,  935,
      935,  935,  937,  938,  939,  940,  941,  943,  945,  946,
      947,  948,  949,  950,  951,  952,  953,  956,  957,  958,

      959,  960,  961,  962,  963,  964,  965, 1413, 1412, 1411,
      937,  938,  939,  940,  941,  943,  945,  946,  947,  948,
      949,  950,  951,  952,  953,  956,  957,  958,  959,  960,
      961,  962,  963,  964,  965,  966,  966,  966,  967,  968,
      969,  971, 1410,  972,  974,  966,  973,  973,  973,  976,
      994,  995,  996,  998, 1000, 1001,  973, 1016, 1409, 1408,
     1407,  966, 1406, 1405, 1403, 1026,  967,  968,  969,  971,
      966,  972,  974,  966, 1027, 1028, 1029,  976,  994,  995,
      996,  998, 1000, 1001,  973, 1016, 1018, 1018, 1018,  966,
     1020, 1020, 1020, 1026, 1031, 1402, 1018, 1032, 1033, 1034,

     1020, 1035, 1027, 1028, 1029, 1036, 1038, 1039, 1040, 1040,
     1040, 1040, 1018, 1041, 1041, 1041, 1041, 1042, 1042, 1042,
     1042, 1018, 1031, 1018, 1018, 1032, 1033, 1034, 1020, 1035,
     1060, 1078, 1079, 1036, 1038, 1039, 1043, 1043, 1043, 1043,
     1018, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089,
     1090, 1091, 1092, 1093, 1094, 1096, 1097, 1098, 1060, 1078,
     1079, 1100, 1101, 1102, 1103, 1104, 1105, 1401, 1107, 1080,
     1081, 1082, 1083, 1084, 1085, 1086, 1088, 1089, 1090, 1091,
     1092, 1093, 1094, 1096, 1097, 1098, 1108, 1109, 1110, 1100,
     1101, 1102, 1103, 1104, 1105, 1106, 1107, 1111, 1112, 1114,

     1115, 1106, 1116, 1117, 1118, 1121, 1122, 1128, 1128, 1128,
     1129, 1131, 1132, 1133, 1108, 1109, 1110, 1400, 1135, 1137,
     1137, 1137, 1118, 1106, 1135, 1111, 1112, 1114, 1115, 1106,
     1116, 1117, 1118, 1121, 1122, 1139, 1140, 1141, 1129, 1131,
     1132, 1133, 1142, 1143, 1128, 1128, 1135, 1144, 1145, 1146,
     1118, 1147, 1135, 1148, 1149, 1150, 1137, 1137, 1167, 1168,
     1169, 1170, 1171, 1139, 1140, 1141, 1173, 1175, 1176, 1177,
     1142, 1143, 1178, 1179, 1180, 1144, 1145, 1146, 1181, 1147,
     1183, 1148, 1149, 1150, 1184, 1185, 1167, 1168, 1169, 1170,
     1171, 1187, 1188, 1193, 1173, 1175, 1176, 1177, 1194, 1195,

     1178, 1179, 1180, 1196, 1197, 1198, 1181, 1199, 1183, 1201,
     1202, 1204, 1184, 1185, 1205, 1206, 1207, 1208, 1216, 1187,
     1188, 1193, 1202, 1222, 1229, 1399, 1194, 1195, 1230, 1232,
     1233, 1196, 1197, 1198, 1234, 1199, 1219, 1201, 1202, 1204,
     1235, 1236, 1205, 1206, 1207, 1208, 1216, 1238, 1219, 1239,
     1202, 1222, 1229, 1219, 1219, 1240, 1230, 1232, 1233, 1241,
     1242, 1243, 1234, 1247, 1248, 1249, 1251, 1252, 1235, 1236,
     1253, 1254, 1255, 1256, 1257, 1238, 1258, 1239, 1259, 1260,
     1261, 1262, 1263, 1240, 1264, 1265, 1267, 1241, 1242, 1243,
     1268, 1247, 1248, 1249, 1251, 1252, 1270, 1271, 1253, 1254,

     1255, 1256, 1257, 1272, 1258, 1273, 1259, 1260, 1261, 1262,
     1263, 1274, 1264, 1265, 1267, 1275, 1276, 1277, 1268, 1283,
     1291, 1298, 1299, 1294, 1270, 1271, 1300, 1301, 1302, 1303,
     1304, 1272, 1305, 1273, 1306, 1294, 1307, 1308, 1309, 1274,
     1294, 1311, 1312, 1275, 1276, 1277, 1314, 1283, 1291, 1298,
     1299, 1317, 1319, 1320, 1300, 1301, 1302, 1303, 1304, 1321,
     1305, 1322, 1306, 1323, 1307, 1308, 1309, 1325, 1327, 1311,
     1312, 1328, 1329, 1331, 1314, 1333, 1334, 1335, 1336, 1317,
     1319, 1320, 1337, 1339, 1340, 1341, 1348, 1321, 1363, 1322,
     1365, 1323, 1367, 1368, 1369, 1325, 1327, 1370, 1398, 1328,

     1329, 1331, 1374, 1333, 1334, 1335, 1336, 1375, 1376, 1377,
     1337, 1339, 1340, 1341, 1348, 1378, 1363, 1379, 1365, 1380,
     1367, 1368, 1369, 1371, 1381, 1370, 1371, 1382, 1383, 1384,
     1374, 1385, 1387, 1388, 1389, 1375, 1376, 1377, 1390, 1391,
     1392, 1393, 1394, 1378, 1395, 1379, 1396, 1380, 1404, 1420,
     1421, 1371, 1381, 1423, 1371, 1382, 1383, 1384, 1425, 1385,
     1387, 1388, 1389, 1426, 1427, 1428, 1390, 1391, 1392, 1393,
     1394, 1429, 1395, 1432, 1396, 1433, 1404, 1420, 1421, 1434,
     1435, 1423, 1436, 1437, 1438, 1439, 1425, 1441, 1442, 1444,
     1445, 1426, 1427, 1428, 1446, 1447, 1448, 1449, 1472, 1429,

     1473, 1432, 1474, 1433, 1475, 1476, 1477, 1434, 1435, 1479,
     1436, 1437, 1438, 1439, 1480, 1441, 1442, 1444, 1445, 1481,
     1482, 1483, 1446, 1447, 1448, 1449, 1472, 1484, 1473, 1485,
     1474, 1486, 1475, 1476, 1477, 1487, 1488, 1479, 1489, 1492,
     1493, 1516, 1480, 1517, 1518, 1519, 1520, 1481, 1482, 1483,
     1521, 1524, 1525, 1526, 1527, 1484, 1528, 1485, 1529, 1486,
     1530, 1531, 1532, 1487, 1488, 1533, 1489, 1492, 1493, 1516,
     1534, 1517, 1518, 1519, 1520, 1551, 1552, 1554, 1521, 1524,
     1525, 1526, 1527, 1555, 1528, 1559, 1529, 1560, 1530, 1531,
     1532, 1563, 1578, 1533, 1580, 1582, 1583, 1584, 1534, 1594,

     1595, 1596, 1598, 1551, 1552, 1554, 1603, 1604, 1606, 1611,
     1612, 1555, 1613, 1559, 1617, 1560, 1618, 1619, 1622, 1563,
     1578, 1362, 1580, 1582, 1583, 1584, 1361, 1594, 1595, 1596,
     1598, 1360, 1359, 1358, 1603, 1604, 1606, 1611, 1612, 1357,
     1613, 1355, 1617, 1354, 1618, 1619, 1622, 1627, 1627, 1627,
     1627, 1628, 1628, 1628, 1628, 1630, 1353, 1352, 1630, 1631,
     1351, 1631, 1631, 1632, 1350, 1632, 1632, 1349, 1347, 1346,
     1345, 1344, 1343, 1342, 1318, 1297, 1296, 1293, 1290, 1289,
     1288, 1287, 1286, 1285, 1284, 1282, 1281, 1278, 1266, 1228,
     1227, 1226, 1225, 1224, 1223, 1221, 1215, 1214, 1213, 1212,

     1211, 1200, 1136, 1134, 1130, 1127, 1124, 1022, 1019, 1017,
     1014, 1013,  999,  930,  889,  887,  884,  883,  879,  872,
      861,  860,  851,  830,  750,  738,  736,  735,  734,  730,
      728,  724,  720,  718,  712,  708,  704,  703,  694,  693,
      692,  688,  682,  595,  577,  576,  575,  573,  572,  571,
      570,  569,  566,  559,  557,  551,  549,  544,  542,  541,
      540,  539,  537,  535,  534,  532,  515,  407,  406,  405,
      404,  403,  402,  401,  400,  399,  398,  397,  396,  391,
      390,  389,  383,  381,  376,  373,  371,  370,  369,  368,
      367,  364,  361,  358,  356,  350,  347,  312,  246,  241,

      240,  239,  238,  237,  235,  234,  232,  222,  221,  214,
      212,  203,  200,  199,  198,  195,  189,  187,  181,  178,
      102,   98,   83,   82,   81,   80,   77,   71,   22,   15,
       13,   11,    7,    6,    5, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,

     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "gpu/lolfx-scanner.l"
#line 2 "gpu/lolfx-scanner.l"
//
// Lol Engine
//
// Copyright: (c) 2010-2012 Sam Hocevar <sam@hocevar.net>
//   This program is free software; you can redistribute it and/or
//   modify it under the terms of the Do What The Fuck You Want To
//   Public License, Version 2, as published by Sam Hocevar. See
//   http://www.wtfpl.net/ for more details.
//

#if defined HAVE_CONFIG_H
#   include "config.h"
#endif

#include <cstdlib>
using std::exit;
using std::malloc;
using std::realloc;
using std::free;
#include <iostream>

#include "core.h"
#include "gpu/lolfx-compiler.h"

typedef lol::LolFxParser::token token;
typedef lol::LolFxParser::token_type token_type;

#ifndef YY_DECL
#   define YY_DECL lol::LolFxParser::token_type \
        lol::LolFxScanner::lex(lol::LolFxParser::semantic_type* yylval, \
                               lol::LolFxParser::location_type* yylloc)
#endif

#define yyterminate() return token::T_END
#define YY_NO_UNISTD_H
#define YY_USER_ACTION yylloc->columns(yyleng);


#line 1657 "generated/lolfx-scanner.cpp"

#define INITIAL 0
#define C_COMMENT 1
#define CPP_COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 46 "gpu/lolfx-scanner.l"



    /* reset location at the beginning of yylex() */
    yylloc->step();

    int language_guess = INITIAL;


 /*
  * GLSL keywords
  */

#line 1778 "generated/lolfx-scanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1627 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1626 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "gpu/lolfx-scanner.l"
{ return token::GT_SUBROUTINE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "gpu/lolfx-scanner.l"
{ return token::GT_PATCH; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 61 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLE; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 62 "gpu/lolfx-scanner.l"
{ return token::GT_FLAT; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 63 "gpu/lolfx-scanner.l"
{ return token::GT_SMOOTH; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 64 "gpu/lolfx-scanner.l"
{ return token::GT_LAYOUT; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 65 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER1DSHADOW; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 66 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DSHADOW; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 67 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLERCUBESHADOW; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 68 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER1DARRAY; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 69 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DARRAY; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 70 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER1DARRAYSHADOW; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 71 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DARRAYSHADOW; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 72 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER1D; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 73 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER2D; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 74 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER3D; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 75 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLERCUBE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 76 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER1DARRAY; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 77 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER2DARRAY; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 78 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER1D; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 79 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER2D; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 80 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER3D; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 81 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLERCUBE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 82 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER1DARRAY; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 83 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER2DARRAY; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 84 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DRECT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 85 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DRECTSHADOW; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 86 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER2DRECT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 87 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER2DRECT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 88 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLERBUFFER; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 89 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLERBUFFER; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 90 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLERBUFFER; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 91 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLERCUBEARRAY; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 92 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLERCUBEARRAYSHADOW; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 93 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLERCUBEARRAY; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 94 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLERCUBEARRAY; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DMS; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 96 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER2DMS; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 97 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER2DMS; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 98 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DMSARRAY; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 99 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER2DMSARRAY; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 100 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER2DMSARRAY; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "gpu/lolfx-scanner.l"
{ return token::GT_HIGHP; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "gpu/lolfx-scanner.l"
{ return token::GT_MEDIUMP; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "gpu/lolfx-scanner.l"
{ return token::GT_LOWP; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "gpu/lolfx-scanner.l"
{ return token::GT_PRECISION; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "gpu/lolfx-scanner.l"
{ return token::GT_INVARIANT; }
	YY_BREAK
/*
  * Deprecated GLSL keywords
  */
case 48:
YY_RULE_SETUP
#line 112 "gpu/lolfx-scanner.l"
{ return token::GT_ATTRIBUTE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 113 "gpu/lolfx-scanner.l"
{ return token::GT_VARYING; }
	YY_BREAK
/*
  * GLSL vector types
  */
case 50:
YY_RULE_SETUP
#line 119 "gpu/lolfx-scanner.l"
{ return token::GT_BVEC2; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 120 "gpu/lolfx-scanner.l"
{ return token::GT_BVEC3; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 121 "gpu/lolfx-scanner.l"
{ return token::GT_BVEC4; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 123 "gpu/lolfx-scanner.l"
{ return token::GT_IVEC2; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 124 "gpu/lolfx-scanner.l"
{ return token::GT_IVEC3; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 125 "gpu/lolfx-scanner.l"
{ return token::GT_IVEC4; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 127 "gpu/lolfx-scanner.l"
{ return token::GT_UVEC2; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 128 "gpu/lolfx-scanner.l"
{ return token::GT_UVEC3; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 129 "gpu/lolfx-scanner.l"
{ return token::GT_UVEC4; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 131 "gpu/lolfx-scanner.l"
{ return token::GT_VEC2; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 132 "gpu/lolfx-scanner.l"
{ return token::GT_VEC3; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 133 "gpu/lolfx-scanner.l"
{ return token::GT_VEC4; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 134 "gpu/lolfx-scanner.l"
{ return token::GT_MAT2; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 135 "gpu/lolfx-scanner.l"
{ return token::GT_MAT2X2; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 136 "gpu/lolfx-scanner.l"
{ return token::GT_MAT2X3; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 137 "gpu/lolfx-scanner.l"
{ return token::GT_MAT2X4; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 138 "gpu/lolfx-scanner.l"
{ return token::GT_MAT3; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 139 "gpu/lolfx-scanner.l"
{ return token::GT_MAT3X2; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 140 "gpu/lolfx-scanner.l"
{ return token::GT_MAT3X3; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 141 "gpu/lolfx-scanner.l"
{ return token::GT_MAT3X4; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 142 "gpu/lolfx-scanner.l"
{ return token::GT_MAT4; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 143 "gpu/lolfx-scanner.l"
{ return token::GT_MAT4X2; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 144 "gpu/lolfx-scanner.l"
{ return token::GT_MAT4X3; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 145 "gpu/lolfx-scanner.l"
{ return token::GT_MAT4X4; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 147 "gpu/lolfx-scanner.l"
{ return token::GT_DVEC2; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 148 "gpu/lolfx-scanner.l"
{ return token::GT_DVEC3; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 149 "gpu/lolfx-scanner.l"
{ return token::GT_DVEC4; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 150 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT2; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 151 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT2X2; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 152 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT2X3; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 153 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT2X4; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 154 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT3; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 155 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT3X2; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 156 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT3X3; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 157 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT3X4; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 158 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT4; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 159 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT4X2; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 160 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT4X3; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 161 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT4X4; }
	YY_BREAK
/*
  * GLSL constant values
  */
case 89:
YY_RULE_SETUP
#line 167 "gpu/lolfx-scanner.l"
{ yylval->ival = 1; return token::BOOLCONSTANT; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 168 "gpu/lolfx-scanner.l"
{ yylval->ival = 0; return token::BOOLCONSTANT; }
	YY_BREAK
/*
  * GLSL keywords that are also valid or reserved in HLSL
  * and HLSL keywords that are also valid or reserved in GLSL.
  */
case 91:
YY_RULE_SETUP
#line 175 "gpu/lolfx-scanner.l"
{ return token::GHT_BOOL; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 176 "gpu/lolfx-scanner.l"
{ return token::GHT_BREAK; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 177 "gpu/lolfx-scanner.l"
{ return token::GHT_CASE; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 178 "gpu/lolfx-scanner.l"
{ return token::GHT_CENTROID; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 179 "gpu/lolfx-scanner.l"
{ return token::GHT_CONST; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 180 "gpu/lolfx-scanner.l"
{ return token::GHT_CONTINUE; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 181 "gpu/lolfx-scanner.l"
{ return token::GHT_DEFAULT; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 182 "gpu/lolfx-scanner.l"
{ return token::GHT_DISCARD; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 183 "gpu/lolfx-scanner.l"
{ return token::GHT_DO; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 184 "gpu/lolfx-scanner.l"
{ return token::GHT_DOUBLE; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 185 "gpu/lolfx-scanner.l"
{ return token::GHT_ELSE; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 186 "gpu/lolfx-scanner.l"
{ return token::GHT_FLOAT; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 187 "gpu/lolfx-scanner.l"
{ return token::GHT_FOR; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 188 "gpu/lolfx-scanner.l"
{ return token::GHT_IF; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 189 "gpu/lolfx-scanner.l"
{ return token::GHT_IN; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 190 "gpu/lolfx-scanner.l"
{ return token::GHT_INOUT; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 191 "gpu/lolfx-scanner.l"
{ return token::GHT_INT; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 192 "gpu/lolfx-scanner.l"
{ return token::GHT_NOPERSPECTIVE; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 193 "gpu/lolfx-scanner.l"
{ return token::GHT_OUT; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 194 "gpu/lolfx-scanner.l"
{ return token::GHT_RETURN; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 195 "gpu/lolfx-scanner.l"
{ return token::GHT_SAMPLER1D; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 196 "gpu/lolfx-scanner.l"
{ return token::GHT_SAMPLER2D; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 197 "gpu/lolfx-scanner.l"
{ return token::GHT_SAMPLER3D; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 198 "gpu/lolfx-scanner.l"
{ return token::GHT_SAMPLERCUBE; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 199 "gpu/lolfx-scanner.l"
{ return token::GHT_STRUCT; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 200 "gpu/lolfx-scanner.l"
{ return token::GHT_SWITCH; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 201 "gpu/lolfx-scanner.l"
{ return token::GHT_UINT; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 202 "gpu/lolfx-scanner.l"
{ return token::GHT_UNIFORM; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 203 "gpu/lolfx-scanner.l"
{ return token::GHT_VOID; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 204 "gpu/lolfx-scanner.l"
{ return token::GHT_WHILE; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 206 "gpu/lolfx-scanner.l"
{ return token::HGT_BOOL; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 207 "gpu/lolfx-scanner.l"
{ return token::HGT_BREAK; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 208 "gpu/lolfx-scanner.l"
{ return token::HGT_CASE; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 209 "gpu/lolfx-scanner.l"
{ return token::HGT_CENTROID; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 210 "gpu/lolfx-scanner.l"
{ return token::HGT_CONST; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 211 "gpu/lolfx-scanner.l"
{ return token::HGT_CONTINUE; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 212 "gpu/lolfx-scanner.l"
{ return token::HGT_DEFAULT; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 213 "gpu/lolfx-scanner.l"
{ return token::HGT_DISCARD; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 214 "gpu/lolfx-scanner.l"
{ return token::HGT_DO; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 215 "gpu/lolfx-scanner.l"
{ return token::HGT_DOUBLE; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 216 "gpu/lolfx-scanner.l"
{ return token::HGT_ELSE; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 217 "gpu/lolfx-scanner.l"
{ return token::HGT_FLOAT; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 218 "gpu/lolfx-scanner.l"
{ return token::HGT_FOR; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 219 "gpu/lolfx-scanner.l"
{ return token::HGT_IF; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 220 "gpu/lolfx-scanner.l"
{ return token::HGT_IN; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 221 "gpu/lolfx-scanner.l"
{ return token::HGT_INOUT; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 222 "gpu/lolfx-scanner.l"
{ return token::HGT_INT; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 223 "gpu/lolfx-scanner.l"
{ return token::HGT_NOPERSPECTIVE; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 224 "gpu/lolfx-scanner.l"
{ return token::HGT_OUT; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 225 "gpu/lolfx-scanner.l"
{ return token::HGT_RETURN; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 226 "gpu/lolfx-scanner.l"
{ return token::HGT_SAMPLER1D; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 227 "gpu/lolfx-scanner.l"
{ return token::HGT_SAMPLER2D; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 228 "gpu/lolfx-scanner.l"
{ return token::HGT_SAMPLER3D; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 229 "gpu/lolfx-scanner.l"
{ return token::HGT_SAMPLERCUBE; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 230 "gpu/lolfx-scanner.l"
{ return token::HGT_STRUCT; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 231 "gpu/lolfx-scanner.l"
{ return token::HGT_SWITCH; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 232 "gpu/lolfx-scanner.l"
{ return token::HGT_UINT; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 233 "gpu/lolfx-scanner.l"
{ return token::HGT_UNIFORM; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 234 "gpu/lolfx-scanner.l"
{ return token::HGT_VOID; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 235 "gpu/lolfx-scanner.l"
{ return token::HGT_WHILE; }
	YY_BREAK
/*
  * HLSL keywords
  * Gathered from http://msdn.microsoft.com/en-us/library/windows/desktop/bb509568%28v=vs.85%29.aspx
  */
case 151:
YY_RULE_SETUP
#line 242 "gpu/lolfx-scanner.l"
{ return token::HT_APPENDSTRUCTUREDBUFFER; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 243 "gpu/lolfx-scanner.l"
{ return token::HT_ASM; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 244 "gpu/lolfx-scanner.l"
{ return token::HT_ASM_FRAGMENT; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 245 "gpu/lolfx-scanner.l"
{ return token::HT_BLENDSTATE; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 246 "gpu/lolfx-scanner.l"
{ return token::HT_BUFFER; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 247 "gpu/lolfx-scanner.l"
{ return token::HT_BYTEADDRESSBUFFER; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 248 "gpu/lolfx-scanner.l"
{ return token::HT_CBUFFER; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 249 "gpu/lolfx-scanner.l"
{ return token::HT_COLUMN_MAJOR; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 250 "gpu/lolfx-scanner.l"
{ return token::HT_COMPILE; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 251 "gpu/lolfx-scanner.l"
{ return token::HT_COMPILE_FRAGMENT; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 252 "gpu/lolfx-scanner.l"
{ return token::HT_COMPILESHADER; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 253 "gpu/lolfx-scanner.l"
{ return token::HT_COMPUTESHADER; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 254 "gpu/lolfx-scanner.l"
{ return token::HT_CONSUMESTRUCTUREDBUFFER; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 255 "gpu/lolfx-scanner.l"
{ return token::HT_DEPTHSTENCILSTATE; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 256 "gpu/lolfx-scanner.l"
{ return token::HT_DEPTHSTENCILVIEW; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 257 "gpu/lolfx-scanner.l"
{ return token::HT_DOMAINSHADER; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 258 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 259 "gpu/lolfx-scanner.l"
{ return token::HT_EXTERN; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 260 "gpu/lolfx-scanner.l"
{ return token::HT_FALSE; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 261 "gpu/lolfx-scanner.l"
{ return token::HT_FXGROUP; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 262 "gpu/lolfx-scanner.l"
{ return token::HT_GEOMETRYSHADER; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 263 "gpu/lolfx-scanner.l"
{ return token::HT_GROUPSHARED; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 264 "gpu/lolfx-scanner.l"
{ return token::HT_HALF; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 265 "gpu/lolfx-scanner.l"
{ return token::HT_HULLSHADER; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 266 "gpu/lolfx-scanner.l"
{ return token::HT_INLINE; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 267 "gpu/lolfx-scanner.l"
{ return token::HT_INPUTPATCH; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 268 "gpu/lolfx-scanner.l"
{ return token::HT_INTERFACE; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 269 "gpu/lolfx-scanner.l"
{ return token::HT_LINE; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 270 "gpu/lolfx-scanner.l"
{ return token::HT_LINEADJ; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 271 "gpu/lolfx-scanner.l"
{ return token::HT_LINEAR; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 272 "gpu/lolfx-scanner.l"
{ return token::HT_LINESTREAM; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 273 "gpu/lolfx-scanner.l"
{ return token::HT_MATRIX; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 274 "gpu/lolfx-scanner.l"
{ return token::HT_NAMESPACE; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 275 "gpu/lolfx-scanner.l"
{ return token::HT_NOINTERPOLATION; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 276 "gpu/lolfx-scanner.l"
{ return token::HT_NULL; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 277 "gpu/lolfx-scanner.l"
{ return token::HT_OUTPUTPATCH; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 278 "gpu/lolfx-scanner.l"
{ return token::HT_PACKOFFSET; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 279 "gpu/lolfx-scanner.l"
{ return token::HT_PASS; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 280 "gpu/lolfx-scanner.l"
{ return token::HT_PIXELFRAGMENT; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 281 "gpu/lolfx-scanner.l"
{ return token::HT_PIXELSHADER; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 282 "gpu/lolfx-scanner.l"
{ return token::HT_POINT; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 283 "gpu/lolfx-scanner.l"
{ return token::HT_POINTSTREAM; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 284 "gpu/lolfx-scanner.l"
{ return token::HT_PRECISE; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 285 "gpu/lolfx-scanner.l"
{ return token::HT_RASTERIZERSTATE; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 286 "gpu/lolfx-scanner.l"
{ return token::HT_RENDERTARGETVIEW; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 287 "gpu/lolfx-scanner.l"
{ return token::HT_REGISTER; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 288 "gpu/lolfx-scanner.l"
{ return token::HT_ROW_MAJOR; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 289 "gpu/lolfx-scanner.l"
{ return token::HT_RWBUFFER; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 290 "gpu/lolfx-scanner.l"
{ return token::HT_RWBYTEADDRESSBUFFER; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 291 "gpu/lolfx-scanner.l"
{ return token::HT_RWSTRUCTUREDBUFFER; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 292 "gpu/lolfx-scanner.l"
{ return token::HT_RWTEXTURE1D; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 293 "gpu/lolfx-scanner.l"
{ return token::HT_RWTEXTURE1DARRAY; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 294 "gpu/lolfx-scanner.l"
{ return token::HT_RWTEXTURE2D; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 295 "gpu/lolfx-scanner.l"
{ return token::HT_RWTEXTURE2DARRAY; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 296 "gpu/lolfx-scanner.l"
{ return token::HT_RWTEXTURE3D; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 297 "gpu/lolfx-scanner.l"
{ return token::HT_SAMPLER; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 298 "gpu/lolfx-scanner.l"
{ return token::HT_SAMPLER_STATE; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 299 "gpu/lolfx-scanner.l"
{ return token::HT_SAMPLERSTATE; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 300 "gpu/lolfx-scanner.l"
{ return token::HT_SAMPLERCOMPARISONSTATE; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 301 "gpu/lolfx-scanner.l"
{ return token::HT_SHARED; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 302 "gpu/lolfx-scanner.l"
{ return token::HT_SNORM; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 303 "gpu/lolfx-scanner.l"
{ return token::HT_STATEBLOCK; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 304 "gpu/lolfx-scanner.l"
{ return token::HT_STATEBLOCK_STATE; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 305 "gpu/lolfx-scanner.l"
{ return token::HT_STATIC; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 306 "gpu/lolfx-scanner.l"
{ return token::HT_STRING; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 307 "gpu/lolfx-scanner.l"
{ return token::HT_STRUCTUREDBUFFER; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 308 "gpu/lolfx-scanner.l"
{ return token::HT_TBUFFER; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 309 "gpu/lolfx-scanner.l"
{ return token::HT_TECHNIQUE; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 310 "gpu/lolfx-scanner.l"
{ return token::HT_TECHNIQUE10; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 311 "gpu/lolfx-scanner.l"
{ return token::HT_TECHNIQUE11XZ; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 312 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 313 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE1D; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 314 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE1DARRAY; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 315 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE2D; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 316 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE2DARRAY; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 317 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE2DMS; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 318 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE2DMSARRAY; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 319 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE3D; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 320 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURECUBE; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 321 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURECUBEARRAY; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 322 "gpu/lolfx-scanner.l"
{ return token::HT_TRUE; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 323 "gpu/lolfx-scanner.l"
{ return token::HT_TYPEDEF; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 324 "gpu/lolfx-scanner.l"
{ return token::HT_TRIANGLE; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 325 "gpu/lolfx-scanner.l"
{ return token::HT_TRIANGLEADJ; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 326 "gpu/lolfx-scanner.l"
{ return token::HT_TRIANGLESTREAM; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 327 "gpu/lolfx-scanner.l"
{ return token::HT_UNORM; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 328 "gpu/lolfx-scanner.l"
{ return token::HT_VECTOR; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 329 "gpu/lolfx-scanner.l"
{ return token::HT_VERTEXFRAGMENT; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 330 "gpu/lolfx-scanner.l"
{ return token::HT_VERTEXSHADER; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 331 "gpu/lolfx-scanner.l"
{ return token::HT_VOLATILE; }
	YY_BREAK
/*
  * HLSL vector types
  * TODO: this can probably be factored somehow
  */
case 241:
YY_RULE_SETUP
#line 338 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL1; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 339 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL1x1; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 340 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL2x1; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 341 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL3x1; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 342 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL4x1; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 343 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL2; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 344 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL1x2; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 345 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL2x2; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 346 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL3x2; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 347 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL4x2; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 348 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL3; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 349 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL1x3; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 350 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL2x3; }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 351 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL3x3; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 352 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL4x3; }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 353 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL4; }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 354 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL1x4; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 355 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL2x4; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 356 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL3x4; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 357 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL4x4; }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 359 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT1; }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 360 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT1x1; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 361 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT2x1; }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 362 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT3x1; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 363 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT4x1; }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 364 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT2; }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 365 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT1x2; }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 366 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT2x2; }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 367 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT3x2; }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 368 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT4x2; }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 369 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT3; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 370 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT1x3; }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 371 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT2x3; }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 372 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT3x3; }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 373 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT4x3; }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 374 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT4; }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 375 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT1x4; }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 376 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT2x4; }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 377 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT3x4; }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 378 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT4x4; }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 380 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE1; }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 381 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE1x1; }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 382 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE2x1; }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 383 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE3x1; }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 384 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE4x1; }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 385 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE2; }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 386 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE1x2; }
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 387 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE2x2; }
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 388 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE3x2; }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 389 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE4x2; }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 390 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE3; }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 391 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE1x3; }
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 392 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE2x3; }
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 393 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE3x3; }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 394 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE4x3; }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 395 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE4; }
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 396 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE1x4; }
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 397 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE2x4; }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 398 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE3x4; }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 399 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE4x4; }
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 401 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD1; }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 402 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD1x1; }
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 403 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD2x1; }
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 404 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD3x1; }
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 405 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD4x1; }
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 406 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD2; }
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 407 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD1x2; }
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 408 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD2x2; }
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 409 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD3x2; }
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 410 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD4x2; }
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 411 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD3; }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 412 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD1x3; }
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 413 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD2x3; }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 414 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD3x3; }
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 415 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD4x3; }
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 416 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD4; }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 417 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD1x4; }
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 418 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD2x4; }
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 419 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD3x4; }
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 420 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD4x4; }
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 422 "gpu/lolfx-scanner.l"
{ return token::HT_INT1; }
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 423 "gpu/lolfx-scanner.l"
{ return token::HT_INT1x1; }
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 424 "gpu/lolfx-scanner.l"
{ return token::HT_INT2x1; }
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 425 "gpu/lolfx-scanner.l"
{ return token::HT_INT3x1; }
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 426 "gpu/lolfx-scanner.l"
{ return token::HT_INT4x1; }
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 427 "gpu/lolfx-scanner.l"
{ return token::HT_INT2; }
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 428 "gpu/lolfx-scanner.l"
{ return token::HT_INT1x2; }
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 429 "gpu/lolfx-scanner.l"
{ return token::HT_INT2x2; }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 430 "gpu/lolfx-scanner.l"
{ return token::HT_INT3x2; }
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 431 "gpu/lolfx-scanner.l"
{ return token::HT_INT4x2; }
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 432 "gpu/lolfx-scanner.l"
{ return token::HT_INT3; }
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 433 "gpu/lolfx-scanner.l"
{ return token::HT_INT1x3; }
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 434 "gpu/lolfx-scanner.l"
{ return token::HT_INT2x3; }
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 435 "gpu/lolfx-scanner.l"
{ return token::HT_INT3x3; }
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 436 "gpu/lolfx-scanner.l"
{ return token::HT_INT4x3; }
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 437 "gpu/lolfx-scanner.l"
{ return token::HT_INT4; }
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 438 "gpu/lolfx-scanner.l"
{ return token::HT_INT1x4; }
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 439 "gpu/lolfx-scanner.l"
{ return token::HT_INT2x4; }
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 440 "gpu/lolfx-scanner.l"
{ return token::HT_INT3x4; }
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 441 "gpu/lolfx-scanner.l"
{ return token::HT_INT4x4; }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 443 "gpu/lolfx-scanner.l"
{ return token::HT_UINT1; }
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 444 "gpu/lolfx-scanner.l"
{ return token::HT_UINT1x1; }
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 445 "gpu/lolfx-scanner.l"
{ return token::HT_UINT2x1; }
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 446 "gpu/lolfx-scanner.l"
{ return token::HT_UINT3x1; }
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 447 "gpu/lolfx-scanner.l"
{ return token::HT_UINT4x1; }
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 448 "gpu/lolfx-scanner.l"
{ return token::HT_UINT2; }
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 449 "gpu/lolfx-scanner.l"
{ return token::HT_UINT1x2; }
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 450 "gpu/lolfx-scanner.l"
{ return token::HT_UINT2x2; }
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 451 "gpu/lolfx-scanner.l"
{ return token::HT_UINT3x2; }
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 452 "gpu/lolfx-scanner.l"
{ return token::HT_UINT4x2; }
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 453 "gpu/lolfx-scanner.l"
{ return token::HT_UINT3; }
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 454 "gpu/lolfx-scanner.l"
{ return token::HT_UINT1x3; }
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 455 "gpu/lolfx-scanner.l"
{ return token::HT_UINT2x3; }
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 456 "gpu/lolfx-scanner.l"
{ return token::HT_UINT3x3; }
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 457 "gpu/lolfx-scanner.l"
{ return token::HT_UINT4x3; }
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 458 "gpu/lolfx-scanner.l"
{ return token::HT_UINT4; }
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 459 "gpu/lolfx-scanner.l"
{ return token::HT_UINT1x4; }
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 460 "gpu/lolfx-scanner.l"
{ return token::HT_UINT2x4; }
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 461 "gpu/lolfx-scanner.l"
{ return token::HT_UINT3x4; }
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 462 "gpu/lolfx-scanner.l"
{ return token::HT_UINT4x4; }
	YY_BREAK
/*
  * HLSL preprocessor directives
  * Gathered from http://msdn.microsoft.com/en-us/library/windows/desktop/bb943993%28v=vs.85%29.aspx
  */
case 361:
YY_RULE_SETUP
#line 469 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_DEFINE; }
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 470 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_ELIF; }
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 471 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_ELSE; }
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 472 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_ENDIF; }
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 473 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_ERROR; }
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 474 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_IF; }
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 475 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_IFDEF; }
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 476 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_IFNDEF; }
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 477 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_INCLUDE; }
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 478 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_LINE; }
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 479 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_PRAGMA; }
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 480 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_UNDEF; }
	YY_BREAK
/*
  * GLSL preprocessor directives
  */
case 373:
YY_RULE_SETUP
#line 486 "gpu/lolfx-scanner.l"
{ /* ignore for now */ }
	YY_BREAK
/*
  * HLSL reserved keywords
  * Gathered from http://msdn.microsoft.com/en-us/library/windows/desktop/bb509569%28v=vs.85%29.aspx
  */
case 374:
YY_RULE_SETUP
#line 493 "gpu/lolfx-scanner.l"
{ return token::HT_AUTO; }
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 494 "gpu/lolfx-scanner.l"
{ return token::HT_CATCH; }
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 495 "gpu/lolfx-scanner.l"
{ return token::HT_CHAR; }
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 496 "gpu/lolfx-scanner.l"
{ return token::HT_CLASS; }
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 497 "gpu/lolfx-scanner.l"
{ return token::HT_CONST_CAST; }
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 498 "gpu/lolfx-scanner.l"
{ return token::HT_DELETE; }
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 499 "gpu/lolfx-scanner.l"
{ return token::HT_DYNAMIC_CAST; }
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 500 "gpu/lolfx-scanner.l"
{ return token::HT_ENUM; }
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 501 "gpu/lolfx-scanner.l"
{ return token::HT_EXPLICIT; }
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 502 "gpu/lolfx-scanner.l"
{ return token::HT_FRIEND; }
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 503 "gpu/lolfx-scanner.l"
{ return token::HT_GOTO; }
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 504 "gpu/lolfx-scanner.l"
{ return token::HT_LONG; }
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 505 "gpu/lolfx-scanner.l"
{ return token::HT_MUTABLE; }
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 506 "gpu/lolfx-scanner.l"
{ return token::HT_NEW; }
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 507 "gpu/lolfx-scanner.l"
{ return token::HT_OPERATOR; }
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 508 "gpu/lolfx-scanner.l"
{ return token::HT_PRIVATE; }
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 509 "gpu/lolfx-scanner.l"
{ return token::HT_PROTECTED; }
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 510 "gpu/lolfx-scanner.l"
{ return token::HT_PUBLIC; }
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 511 "gpu/lolfx-scanner.l"
{ return token::HT_REINTERPRET_CAST; }
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 512 "gpu/lolfx-scanner.l"
{ return token::HT_SHORT; }
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 513 "gpu/lolfx-scanner.l"
{ return token::HT_SIGNED; }
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 514 "gpu/lolfx-scanner.l"
{ return token::HT_SIZEOF; }
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 515 "gpu/lolfx-scanner.l"
{ return token::HT_STATIC_CAST; }
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 516 "gpu/lolfx-scanner.l"
{ return token::HT_TEMPLATE; }
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 517 "gpu/lolfx-scanner.l"
{ return token::HT_THIS; }
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 518 "gpu/lolfx-scanner.l"
{ return token::HT_THROW; }
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 519 "gpu/lolfx-scanner.l"
{ return token::HT_TRY; }
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 520 "gpu/lolfx-scanner.l"
{ return token::HT_TYPENAME; }
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 521 "gpu/lolfx-scanner.l"
{ return token::HT_UNION; }
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 522 "gpu/lolfx-scanner.l"
{ return token::HT_UNSIGNED; }
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 523 "gpu/lolfx-scanner.l"
{ return token::HT_USING; }
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 524 "gpu/lolfx-scanner.l"
{ return token::HT_VIRTUAL; }
	YY_BREAK
/*
  * Various tokens
  */
case 406:
YY_RULE_SETUP
#line 530 "gpu/lolfx-scanner.l"
{ return token::T_INC; }
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 531 "gpu/lolfx-scanner.l"
{ return token::T_DEC; }
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 532 "gpu/lolfx-scanner.l"
{ return token::T_LE; }
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 533 "gpu/lolfx-scanner.l"
{ return token::T_GE; }
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 534 "gpu/lolfx-scanner.l"
{ return token::T_EQ; }
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 535 "gpu/lolfx-scanner.l"
{ return token::T_NE; }
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 536 "gpu/lolfx-scanner.l"
{ return token::T_LEFT; }
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 537 "gpu/lolfx-scanner.l"
{ return token::T_RIGHT; }
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 538 "gpu/lolfx-scanner.l"
{ return token::T_AND; }
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 539 "gpu/lolfx-scanner.l"
{ return token::T_OR; }
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 540 "gpu/lolfx-scanner.l"
{ return token::T_XOR; }
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 542 "gpu/lolfx-scanner.l"
{ return token::T_MULEQ; }
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 543 "gpu/lolfx-scanner.l"
{ return token::T_DIVEQ; }
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 544 "gpu/lolfx-scanner.l"
{ return token::T_MODEQ; }
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 545 "gpu/lolfx-scanner.l"
{ return token::T_ADDEQ; }
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 546 "gpu/lolfx-scanner.l"
{ return token::T_SUBEQ; }
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 547 "gpu/lolfx-scanner.l"
{ return token::T_LEFTEQ; }
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 548 "gpu/lolfx-scanner.l"
{ return token::T_RIGHTEQ; }
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 549 "gpu/lolfx-scanner.l"
{ return token::T_ANDEQ; }
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 550 "gpu/lolfx-scanner.l"
{ return token::T_XOREQ; }
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 551 "gpu/lolfx-scanner.l"
{ return token::T_OREQ; }
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 553 "gpu/lolfx-scanner.l"
{
    yylval->fval = std::atof(yytext);
    return token::FLOATCONSTANT;
}
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 557 "gpu/lolfx-scanner.l"
{
    yylval->uval = std::atoi(yytext);
    return token::UINTCONSTANT;
}
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 561 "gpu/lolfx-scanner.l"
{
    yylval->ival = std::atoi(yytext);
    return token::INTCONSTANT;
}
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 566 "gpu/lolfx-scanner.l"
{
    /* Copy token for now */
    yylval->sval = strdup(yytext);
    return token::FIELDSELECTION;
}
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 572 "gpu/lolfx-scanner.l"
{
    /* Copy token for now */
    yylval->sval = strdup(yytext);
    return token::IDENTIFIER;
}
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 578 "gpu/lolfx-scanner.l"
{ /* ignore whitespace */ }
	YY_BREAK
case 433:
/* rule 433 can match eol */
YY_RULE_SETUP
#line 579 "gpu/lolfx-scanner.l"
{ yylloc->lines(1); }
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 580 "gpu/lolfx-scanner.l"
{ return (token_type)*yytext; /* accept all characters */ }
	YY_BREAK
/*
  * Ignore C comments
  */
case 435:
YY_RULE_SETUP
#line 586 "gpu/lolfx-scanner.l"
{ BEGIN(C_COMMENT); }
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 587 "gpu/lolfx-scanner.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 588 "gpu/lolfx-scanner.l"
{ }
	YY_BREAK
case 438:
/* rule 438 can match eol */
YY_RULE_SETUP
#line 589 "gpu/lolfx-scanner.l"
{ yylloc->lines(1); }
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 590 "gpu/lolfx-scanner.l"
{ }
	YY_BREAK
/*
  * Ignore C++ comments
  */
case 440:
YY_RULE_SETUP
#line 596 "gpu/lolfx-scanner.l"
{ BEGIN(CPP_COMMENT); }
	YY_BREAK
case 441:
/* rule 441 can match eol */
YY_RULE_SETUP
#line 597 "gpu/lolfx-scanner.l"
{ yylloc->lines(1); BEGIN(INITIAL); }
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 598 "gpu/lolfx-scanner.l"
{ }
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 600 "gpu/lolfx-scanner.l"
ECHO;
	YY_BREAK
#line 4133 "generated/lolfx-scanner.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(C_COMMENT):
case YY_STATE_EOF(CPP_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	LolFxfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	LolFxfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					LolFxrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) LolFxrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1627 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1627 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1626);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) LolFxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) LolFxalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		LolFxfree((void *) b->yy_ch_buf  );

	LolFxfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)LolFxalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)LolFxrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) LolFxalloc(new_size  );

		else
			(yy_start_stack) = (int *) LolFxrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *LolFxalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *LolFxrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void LolFxfree (void * ptr )
{
	free( (char *) ptr );	/* see LolFxrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 600 "gpu/lolfx-scanner.l"



lol::LolFxScanner::LolFxScanner(char const *command)
    : LolFxFlexLexer(0, 0),
      m_input(command)
{
}

lol::LolFxScanner::~LolFxScanner()
{
}

int lol::LolFxScanner::LexerInput(char* buf, int max_size)
{
    buf[0] = m_input[0];
    if (buf[0])
        ++m_input;
    return buf[0] ? 1 : 0;
}

#ifdef yylex
#undef yylex
#endif
int LolFxFlexLexer::yylex()
{
    std::cerr << "in LolFxFlexLexer::yylex() !" << std::endl;
    return 0;
}

int LolFxFlexLexer::yywrap()
{
    return 1;
}


