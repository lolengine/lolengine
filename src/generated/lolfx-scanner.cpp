#line 2 "generated/lolfx-scanner.cpp"

#line 4 "generated/lolfx-scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer LolFxFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *LolFxalloc (yy_size_t  );
void *LolFxrealloc (void *,yy_size_t  );
void LolFxfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 445
#define YY_END_OF_BUFFER 446
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1633] =
    {   0,
        0,    0,  439,  439,  444,  444,  446,  436,  434,  435,
      436,  436,  436,  436,  436,  436,  436,  436,  432,  432,
      436,  436,  436,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  436,   91,   91,  433,  433,  433,
      433,   91,  433,  433,  433,  433,  433,  433,   92,   92,
       91,   92,   92,  433,  433,   90,   90,  436,  439,  440,
      441,  444,  443,  434,  414,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  422,  417,  427,  420,  409,  423,
      410,  424,  437,  442,  421,    0,  431,  432,  415,  411,

      413,  412,  416,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      131,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  136,  137,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  428,  419,   91,  433,  433,
       91,  433,  433,  433,  433,  433,  433,  433,  101,  433,
      433,  433,  433,  433,   91,  433,  106,  107,  433,  433,

      433,  433,  433,  433,  433,  433,  433,   92,  433,   91,
      433,  433,  433,   92,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,   90,  429,  418,  439,  438,
      444,    0,    0,    0,    0,    0,  368,    0,    0,    0,
        0,    0,  430,  425,  426,  433,  154,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  135,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  139,  433,  433,
      433,  433,  433,  390,  433,  433,  433,  433,  141,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  403,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,   91,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  105,  433,  433,  109,  433,  433,  433,
      433,  433,  433,  433,  433,  111,  433,   92,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,   90,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  433,  433,
      377,  433,  123,  433,  433,  433,  125,  433,  433,  433,
      379,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  133,  384,  433,  433,  433,  433,
      433,  433,  433,  387,  433,  175,  433,  433,  433,  433,
      323,  328,  333,  338,  433,  180,  388,  433,  433,  433,
      433,  433,  187,  433,  433,  433,  190,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  401,  433,  433,

      233,  433,  149,  433,  433,  433,  433,  433,  433,  433,
      433,  151,  433,  433,   91,  433,   93,  433,  433,   95,
      433,  433,  433,  433,  433,  433,  433,  433,  103,  433,
        4,  433,  433,  433,  433,  433,  433,  433,   45,   61,
       65,   69,  433,  433,  433,   92,  433,  433,  433,  433,
      433,  433,  433,  433,   88,  119,  433,  433,  433,   58,
       59,   60,  121,  433,   90,    0,    0,  364,  365,    0,
        0,    0,    0,    0,  372,    0,    0,    0,  433,  433,
      433,  243,  248,  253,  258,  124,  433,  433,  378,  433,
      433,  380,  433,  433,  433,  127,  433,  433,  433,  433,

      433,  433,  433,  433,  169,  433,  433,  433,  171,  134,
      433,  433,  433,  433,  433,  433,  138,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  193,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  396,  433,  433,  213,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  402,  433,  433,  433,  343,  348,
      353,  358,  433,  405,  238,  433,  407,  433,  433,  433,
      433,  152,  433,   94,   49,   50,   51,  433,   97,  433,
      433,  433,   76,   80,   84,  433,   73,   74,   75,   89,

      104,   43,  108,  433,  433,   52,   53,   54,  433,  433,
      433,  433,  433,  433,    2,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,   55,   56,   57,  122,    0,
        0,  366,  367,  369,    0,    0,    0,  374,    0,  433,
      433,  433,  433,  433,  433,  433,  157,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  382,  433,  433,
      433,  132,  303,  308,  313,  318,  433,  433,  170,  263,
      268,  273,  278,  386,  433,  433,  433,  433,  177,  433,
      324,  329,  334,  339,  325,  330,  335,  340,  326,  331,
      336,  341,  327,  332,  337,  342,  433,  433,  182,  433,

      184,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  394,  433,  433,  433,  433,  142,
      433,  433,  433,  433,  433,  433,  212,  397,  398,  433,
      216,  217,  147,  148,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  239,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  102,
      433,  433,    6,   62,   63,   64,   66,   67,   68,   70,
       71,   72,  433,  433,  433,  112,    3,    5,  117,  433,
      118,  433,  433,  433,    0,  363,  370,    0,  373,    0,
      433,  433,  433,  244,  249,  254,  259,  245,  250,  255,

      260,  246,  251,  256,  261,  247,  252,  257,  262,  433,
      159,  433,  433,  161,  433,  433,  433,  433,  129,  433,
      130,  433,  283,  288,  293,  298,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  172,  433,  433,  433,
      433,  433,  181,  433,  389,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  195,  392,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  208,  433,  433,  433,
      219,  433,  433,  433,  433,  234,  433,  344,  349,  354,
      359,  345,  350,  355,  360,  346,  351,  356,  361,  347,
      352,  357,  362,  150,  433,  433,  433,  408,  433,  433,

      433,  433,   99,  100,   77,   78,   79,   81,   82,   83,
       85,   86,   87,  433,  433,   44,  433,  433,  208,  433,
      223,  120,  433,    0,    0,  371,  375,  433,  433,  433,
      433,  126,  433,  433,  433,  433,  433,  433,  128,  433,
      433,  433,  433,  433,  433,  304,  309,  314,  319,  305,
      310,  315,  320,  306,  311,  316,  321,  307,  312,  317,
      322,  433,  385,  264,  269,  274,  279,  265,  270,  275,
      280,  266,  271,  276,  281,  267,  272,  277,  282,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  391,  433,
      433,  433,  433,  433,  433,  433,  198,  433,  433,  433,

      200,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  400,  433,  433,  433,  433,  235,
      404,  406,  433,  433,  242,  433,   96,   98,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,    0,
      375,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  284,  289,  294,  299,  285,  290,  295,
      300,  286,  291,  296,  301,  287,  292,  297,  302,  433,
      433,  433,  433,  433,  179,  433,  185,  433,  433,  433,
      433,  433,  433,  433,  393,  433,  433,  433,  199,  433,
      433,  433,  143,  144,  145,  433,  433,  433,  433,  433,

      433,  433,  220,  224,  226,  230,  433,  433,  433,  433,
      433,   48,   47,  433,  433,  433,  433,  433,  433,   46,
      113,  114,  115,  433,  433,  433,  433,  433,  433,  433,
      433,    0,  433,  433,  156,  433,  433,  433,  433,  433,
      381,  433,  433,  433,  433,  433,  433,  176,  178,  183,
      433,  433,  433,  189,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  214,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,   14,   15,   16,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,    1,   20,   21,   22,  433,

      433,    0,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  174,  433,  433,  188,  433,  192,
      194,  433,  433,  433,  433,  433,  203,  205,  207,  433,
      146,  433,  433,  433,  399,  433,  221,  433,  433,  433,
      228,  231,  236,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,   37,  433,  433,  433,
      116,  433,  433,  433,  433,  433,  433,  376,  433,  155,
      433,  160,  433,  433,  433,  433,  433,  168,  383,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  210,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  241,  433,  433,   38,  433,  433,   17,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,   39,  433,  433,   23,  433,  433,  163,  433,  164,
      433,  433,  433,  433,  433,  140,  191,  433,  433,  433,
      433,  433,  433,  433,  433,  209,  433,  433,  222,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  110,  433,  433,  433,  433,   26,  433,   30,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  173,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  225,  227,  433,  433,  237,

      240,  433,  433,  433,   28,   31,  433,   10,  433,   11,
      433,  433,  433,  433,  433,  433,  433,  433,   29,   32,
      433,  433,  433,  433,  433,  433,  433,  186,  196,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
       18,   19,  433,  433,  433,    7,  433,  433,  433,    8,
      433,  433,   24,   25,  433,  433,  433,  433,  162,  433,
      433,  167,  395,  197,  433,  433,  204,  206,  433,  215,
      218,  229,  232,  433,  433,  433,  433,   40,  433,   33,
      433,  433,  433,  433,  158,  433,  166,  433,  433,  433,
       41,   35,  433,  433,  433,  433,    9,   42,   36,  433,

      433,  433,  202,  433,  433,  433,  433,  433,  433,  433,
      201,  433,  433,  433,   27,  433,  433,  433,  433,   12,
       13,  433,  433,  433,  433,  433,  153,  433,  211,   34,
      165,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    5,    1,    6,    7,    1,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   18,   18,   18,   18,    1,    1,   19,
       20,   21,    1,    1,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
        1,    1,    1,   48,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,   76,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[77] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    1,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    1,    1,
        1,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    1
    } ;

static yyconst flex_int16_t yy_base[1639] =
    {   0,
        0,    0,   74,   75, 2957, 2956, 2958, 2961, 2955, 2961,
     2936,   77, 2935,   73, 2934,   72,   74,   77,   75,   85,
       68, 2933,   70,   69,   79,  134,  128,  117,  171,   69,
      119,  124,    0,  141,  159,  186,  169,  215,  205,  264,
      249,  184,  238,   75,   96,  275,  313,  212,  362,  185,
      268,  311,  239,  331,  318,  331,  367,  353,  416,  345,
      403,  426,  476,  488,  414,  436,  388,   90,    0, 2961,
     2940,    0, 2961, 2949, 2961,  499,  129, 2896,   59,  110,
     2891,  136, 2885, 2893, 2961, 2961, 2961, 2961, 2961, 2961,
     2961, 2961, 2961, 2961, 2961,  558, 2961,  566, 2926, 2961,

     2961, 2961, 2925,    0,  160,  181,  222,  244,  247,  284,
      301,  310,  463,  330,  356,  382,  385,  486,  558,  375,
      407,  392,  410,  411,  447,  497,  464,  471,  473,  496,
      509,  503,  517,  525,  535,  545,    0,  557,  552,  553,
      551,  556,  565,  556,  572,  568,  577,  563,  593,  562,
      580,  613,  589,  574,  616,  580,  618,  600,  628,  619,
      612,  631,  624,  613,  639,  650,  658,  628,  633,  667,
      660,  671,  660,  672,  676, 2961, 2961,  670, 2875,  675,
      693, 2889,  673,  687,  718,  721,  689, 2892,  721, 2887,
      696,  707,  709,  707,  734, 2884,    0,  756, 2889, 2884,

     2863,  731,  726, 2883,  741,  731,  764,  742,  783,  772,
      801,  743, 2871,  812, 2883,  757,  811,  825,  761,  808,
      796, 2879,  836,  828,  772,  818, 2961, 2961,    0, 2961,
        0,  846, 2877,   61, 2878, 2863,  160, 2877, 2865,  847,
     2874, 2859,  891, 2961, 2961,  848, 2876,  846,  850,  854,
      872,  871,  874,  875,  887,  885,  873,  877,  877,  876,
      882,  880,  901,  898,  884,  903,  908,  908,  893,  911,
      908,  901,  903,  911,  898,  919,    0,  917,  911,  920,
      920,  915,  940,  935,  940,  930,  931,  960,  953,  952,
      942,  961,  961,    0,  953,  963,  957,  952,  955,  961,

      954,  971,  964,  978,  960,  963,  972,  965,  980,  977,
      988,  981, 2875,  982,  985, 1003,  998,  997,  998, 1004,
     1016, 1004, 1003, 1016, 1004, 1020, 1019, 1012, 1009, 1013,
     1019, 1037, 1034,    0, 1035, 1021, 1055, 1027, 1038, 1034,
     1038, 1039, 1043, 1060, 1070, 1060, 1048, 2856, 1062, 1078,
     2870, 1075, 1061, 1065, 1081, 1085, 2852, 1088, 2868, 1088,
     1076, 2850, 1095,    0, 2861, 1076, 1110, 2867, 2854, 2863,
     2850, 2848, 1132, 2854, 1096, 1095, 2859,  784, 1111, 1096,
     1103, 2846, 1111, 2842, 1110, 1111, 1128, 1114, 1129, 2846,
     2855, 1157, 1132, 1125, 1103, 1131, 2848, 2850, 2850, 2845,

     2838, 2847, 2847, 2838, 2844, 1133, 2843, 2828, 1127, 1140,
        0, 1163, 1186, 1159, 1166, 1172,    0, 1167, 1170, 1165,
        0, 1165, 1172, 1179, 1166, 1180, 1169, 1171, 1184, 1192,
     1185, 1184, 1193, 1189,    0,    0, 1197, 1189, 1203, 1189,
     1196, 1208, 1221,    0, 1211,    0, 1210, 1217, 1212, 1213,
     1215, 1216, 1217, 1218, 1225, 1243,    0, 1236, 1244, 1228,
     1228, 1231,    0, 1249, 1231, 1238,    0, 1244, 1238, 1254,
     1263, 1260, 1257, 1274, 1263, 1263, 1280, 1269, 1275, 1283,
     1275, 1278, 1273, 1286, 1294, 1280, 1296, 1287, 1290, 1299,
     1291, 1303, 1306, 1306, 1300, 1306, 1298,    0, 1297, 1307,

        0, 1331, 1357, 1323, 1325, 1328, 1336, 1337, 1339, 1350,
     1335,    0, 1337, 1353,    0, 2837, 1366, 1353, 1380,    0,
     1347, 1357, 1359, 1349, 1378, 1393, 1368, 1405,    0, 1376,
        0, 1370, 2829, 1371, 2826, 2827, 1408, 2821,    0, 2817,
     2816, 2815, 2817, 1376, 2829,    0, 1386, 1379, 1398, 2816,
     1408, 2820, 1409, 1392,    0, 1421, 1405, 2818, 1432,    0,
        0,    0,    0, 1416,    0, 1411, 2819, 2961, 2961, 2826,
     2813, 2824, 2824, 2807, 2961, 1416, 2821, 2817, 1426, 1413,
     1413, 1409, 1410, 1411, 1412,    0, 1419, 1438,    0, 1438,
     1429,    0, 1431, 1434, 1427, 2825, 1437, 1437, 1441, 1449,

     1436, 1438, 1452, 1462, 1492, 1459, 1466, 1462,    0, 1496,
     1473, 1459, 1473, 1479, 1491, 1495,    0, 1485, 1516, 1520,
     1524, 1529, 1496, 1527, 1486, 1483, 1520, 1517, 1531, 1518,
     1518, 1519, 1534, 1535, 1523, 1524, 1524, 1543, 1544, 1530,
     1529, 1545, 1533, 1538, 1552, 1549, 1551, 1536, 1538, 1557,
     1559,    0, 1583, 1582,    0, 1587, 1589, 1586, 1574, 1587,
     1591, 1588, 1597, 1581,    0, 1593, 1596, 1601, 1579, 1580,
     1581, 1582, 1589,    0,    0, 1594,    0, 1591, 1586, 1610,
     1603,    0, 2822,    0,    0,    0,    0, 1598, 2823, 1600,
     1606, 1601, 2798, 2797, 2796, 1638,    0,    0,    0,    0,

     1655,    0,    0, 2810, 2806,    0,    0,    0, 2797, 1658,
     1661, 1664, 2803, 1625,    0, 1626, 1647, 1657, 2807, 1643,
     2793, 1656, 1647, 1648, 2801,    0,    0,    0,    0, 1666,
     2807, 2961, 2961, 2961, 2805, 2806, 1667, 2961, 2794, 1650,
     1669, 1654, 1682, 1686, 1690, 1710,    0, 1683, 1670, 1690,
     2808, 1695, 1696, 1704, 1703, 1688, 1690,    0, 1691, 1708,
     1694, 1724, 1690, 1697, 1698, 1699, 1721, 1716,    0, 1702,
     1706, 1707, 1708,    0, 1717, 1716, 1735, 1743,    0, 1744,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1745, 1737,    0, 1730,

        0, 1750, 1755, 1739, 1747, 1749, 1749, 1760, 1749, 1760,
     1749, 1765, 1772, 1758,    0, 1770, 1775, 1763, 1762,    0,
     1776, 1782, 1787, 1786, 1769, 1781,    0,    0,    0, 1788,
     2807,    0, 1780,    0, 1784, 1786, 1784, 1806, 1800, 1807,
     1806, 1827, 1840, 1849, 1855, 1811, 1820,    0, 1840, 1814,
     1825, 2785, 1829, 1834, 1836, 1853, 1866, 1873, 1876, 1882,
     2804, 2799,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 2787, 1842, 1858,    0, 1846,    0, 1852, 2782,
        0, 1874, 1867, 2796, 1900, 2961, 2961, 2795, 1901, 2785,
     1868, 1882, 1889,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 1875,
        0, 1890, 1883, 1878, 1879, 1898, 1881, 1897,    0, 1898,
        0, 1896, 1881, 1885, 1886, 1887, 1949, 1953, 1957, 1961,
     2798, 1914, 1965, 1970, 1974, 1978,    0, 1950, 1975, 1973,
     1958, 1976,    0, 1975,    0, 1978, 1966, 1978, 1966, 1984,
     1967, 1986, 1987, 1971,    0,    0, 1985, 1965, 1974, 1977,
     1993, 1980, 1978, 1993, 1978, 1981, 2035, 2016, 2029, 2015,
        0, 2013, 2031, 2046, 2032,    0, 2037,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 2039, 2026, 2037,    0, 2041, 2777,

     2043, 2043,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 2782, 2777,    0, 2045, 2779, 2086, 2784,
     2090,    0, 2774, 2075, 2043, 2961,    0, 2049, 2055, 2049,
     2085,    0, 2090, 2084, 2088, 2090, 2080, 2080,    0, 2087,
     2101, 2113, 2117, 2141, 2145,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 2100,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 2085,
     2105, 2119, 2122, 2137, 2142, 2139, 2130, 2143,    0, 2127,
     2143, 2142, 2146, 2149, 2151, 2151,    0, 2139, 2140, 2141,

        0, 2156, 2140, 2157, 2159, 2160, 2161, 2179, 2147, 2149,
     2166, 2178, 2175, 2176,    0, 2194, 2195, 2197, 2181, 2202,
        0,    0, 2203, 2204,    0, 2786,    0,    0, 2770, 2217,
     2203, 2775, 2209, 2210, 2211, 2767, 2202, 2773, 2225, 2204,
        0, 2203, 2220, 2230, 2217, 2227, 2237, 2221, 2239, 2226,
     2232, 2251, 2253,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 2257,
     2251, 2255, 2243, 2254,    0, 2256,    0, 2258, 2251, 2269,
     2253, 2262, 2271, 2276,    0, 2261, 2275, 2274,    0, 2265,
     2266, 2007,    0,    0,    0, 2278, 2290, 2292, 2274, 2284,

     2277, 2298, 2821, 2305, 2312,    0, 2308, 2310, 2295, 2309,
     2313,    0,    0, 2781, 2780, 2779, 2761, 2760, 2298,    0,
      126, 2308,    0, 2774, 2326, 2774, 2774, 2773, 2772, 2754,
     2753, 2323, 2328, 2318,    0, 2314, 2320, 2332, 2338, 2336,
        0, 2326, 2339, 2345, 2332, 2351, 2354,    0,    0,    0,
     2361, 2356, 2358,    0, 2364, 2352, 2358, 2353, 2353, 2369,
     2372, 2376, 2378, 2379, 2380, 2369, 2382, 2368, 2388, 2773,
     2371, 2390,  306, 2377, 2378, 2384, 2399, 2396, 2389, 2395,
     2409, 2771, 2392,    0, 2765, 2768, 2409, 2751, 2760, 2749,
     2747, 2760, 2756, 2757, 2417,    0, 2761, 2398,    0, 2755,

     2758, 2401, 2406, 2408, 2427, 2412, 2432, 2433, 2436, 2440,
     2433, 2429, 2428, 2445,    0, 2431, 2430,    0, 2441,    0,
        0, 2439, 2759, 2440, 2442, 2458, 2462, 2463,    0, 2465,
        0, 2462, 2450, 2453,    0, 2453,    0, 2454, 2463, 2464,
     2483, 2484,    0, 2481, 2488, 2478, 2740, 2739, 2737, 2750,
     2748, 2748, 2475, 2734, 2750, 2732, 2746, 2740, 2739, 2734,
      203, 2708, 2706, 2703, 2714, 2712, 2711, 2961, 2478,    0,
     2480,    0, 2485, 2491, 2487, 2487, 2489,    0,    0, 2510,
     2507, 2512, 2498, 2518, 2517, 2500, 2504, 2524, 2510, 2512,
     2516,    0, 2532, 2518, 2534, 2515, 2541, 2548, 2534, 2535,

     2554, 2543,    0, 2697, 2696, 2712, 2709, 2706, 2706, 2554,
     2703, 2699, 2298, 2280, 2118, 2056, 2011, 2009, 2017, 2006,
     2005, 2006, 1905, 1902, 1900, 2542, 2555,    0, 2558,    0,
     2543, 2547, 2562, 2554, 2558,    0,    0, 2554, 2574, 2567,
     2576, 2558, 2564, 2566, 2577,    0, 2589, 2587,    0, 2569,
     2571, 2579, 2580, 2592, 2588, 1894, 1891, 1873, 1867, 1868,
     1457,    0, 1269, 1106, 1069,  798,  775,  754,    0,  747,
      725,  719,  715,  695,  692,  689,  657, 2604, 2605, 2599,
     2597, 2615, 2612,    0, 2605, 2615, 2604, 2622, 2607, 2623,
     2629, 2630, 2613, 2614, 2630,    0,    0, 2637, 2639,    0,

        0,  641,  635,  593,    0,    0,  589,  543,  533,  495,
      505,  472,  452,  466,  461,  439,  432,  433,    0,    0,
      423, 2638, 2641, 2629, 2645, 2632, 2630,    0,    0, 2634,
     2638, 2658, 2659, 2642, 2644, 2656, 2667, 2655, 2650, 2651,
        0,    0,  437,  421,  407,    0,  391,  368,  380,    0,
      353,  358,    0,    0,  362,  355, 2677, 2665,    0, 2680,
     2680,    0,    0,    0, 2680, 2682,    0,    0, 2674,    0,
        0,    0,    0,  323,  322,  321,  320,    0,  307,  289,
      267,  260,  256, 2669,    0, 2689,    0, 2689, 2678, 2679,
        0,    0,  271,  234,  220,  223,    0,    0,    0, 2696,

     2684, 2688,    0, 2688,  203,  196,  161,  176, 2703, 2704,
        0, 2716,  145,  111,    0,   75, 2715, 2715, 2703,    0,
        0,   60, 2707, 2722, 2723,   41,    0, 2711,    0,    0,
        0, 2961, 2778, 2782,  103, 2786, 2790, 2794
    } ;

static yyconst flex_int16_t yy_def[1639] =
    {   0,
     1632,    1, 1633, 1633, 1634, 1634, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1632, 1635, 1635,   26, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635,   40, 1635, 1635, 1635, 1635, 1635, 1632, 1636, 1632,
     1632, 1637, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,

     1632, 1632, 1632, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1632, 1632, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,

     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1632, 1632, 1636, 1632,
     1637, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,

     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1632, 1632, 1632, 1632, 1632,

     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,

     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,

     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,

     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,

     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1632, 1632, 1632, 1632, 1632, 1632,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,

     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,

     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1632, 1632, 1632, 1638, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,

     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1632,
     1638, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,

     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1632, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,

     1635, 1632, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1632, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,

     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,

     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,

     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635,    0, 1632, 1632, 1632, 1632, 1632, 1632
    } ;

static yyconst flex_int16_t yy_nxt[3038] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
        8,   18,   19,   20,   20,   20,   20,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   33,   34,   35,   36,   37,   38,   33,   39,   40,
       41,   42,   43,   44,   33,   33,   33,   45,    8,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   33,   33,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   67,   67,   68,   70,   70,   76,   86,
       89,   71,   71,   91,   93,   96,   99,  100,   94,  102,
      103,   90,   87,   92,  132,   96,   95,   98,   98,   98,

       98,   98,   98,  175,  133,  105,  104,  134,  106,  227,
      107,  108, 1630,   77,  109,  176,   97,  110,  398,  234,
      111,  235,  132, 1626,  112,  236,   97, 1622,  399,   78,
       79,  175,  133,  105,   80,  134,  106,   81,  107,  108,
      135,   82,  109,  177,   97,  110,   83,   84,  111,  124,
      137,  125,  112,  119,   97,  113,  114,  120,  138,  115,
      136,  126,  116,  121,  237,  228,  117,  232,  135,  118,
      139,  122,  238,  123,  232, 1288,  140,  124,  137,  125,
      141,  119, 1621,  113,  114,  120,  138,  115,  136,  126,
      116,  121,  127, 1289,  117,  232,  246,  118,  139,  122,

      142,  123,  240,  128,  140,  147,  129,  143,  141,  130,
      148,  144,  402,  169,  247,  131, 1620,  124,  170,  125,
      127,  145,  403,  171,  246, 1616,  154,  146,  142,  126,
      155,  128, 1615,  147,  129,  143,  149,  130,  148,  144,
      156,  169,  247,  131,  150,  191,  170,  125,  157,  145,
      151,  171, 1418,  152,  154,  146,  153,  126,  155, 1614,
      135,  183,  248,  172,  149,  184, 1613,  173,  156,  249,
     1419,  164,  150,  174,  165,  185,  157,  166,  151, 1608,
      136,  152,  250, 1607,  153,  158, 1606,  167,  135,  127,
      248,  172,  159,  160,  168,  173,  196,  249,  161,  164,

      128,  174,  165,  129,  162,  166,  130,  163,  136,  251,
      250,  105,  131,  158,  106,  167,  107,  192, 1337, 1338,
      159,  160,  168, 1605,  178,  178,  161,  252,  193, 1599,
      178,  194,  162, 1598,  130,  163,  132,  251, 1597,  105,
      131,  178,  106,  179,  107,  108,  133,  139,  109,  134,
      253,  110,  141,  140,  111,  252, 1596,  137,  112, 1595,
      178,  178,  178,  178,  132,  138,  178,  201,  178, 1594,
     1593,  256,  142,  108,  133,  139,  180,  195,  253,  181,
      203,  202,  111,  182,  204,  197,  112,  119,  143,  147,
      257,  120,  144,  198,  148, 1592, 1591,  121,  199,  256,

      142,  200,  145,  258, 1583,  122,  259,  123,  146,  208,
      208, 1582,  208,  208,  266,  186,  143,  147,  257,  187,
      144, 1581,  206,  188,  154,  189, 1580,  269,  155, 1579,
      205,  258,  190,  122,  259,  123,  146,  149,  156,  172,
      267, 1578,  266,  173,  270,  150,  157, 1577,  268,  174,
      271,  151,  210,  178,  152,  269,  211,  153,  178,  226,
      226,  226,  226, 1576,  175,  207,  156,  223,  267,  178,
     1575,  173,  270,  150,  157,  212,  268,  224,  271,  151,
      208,  208,  209,  208,  208,  153, 1574,  213,  272, 1556,
      208,  208,  225,  208,  214,  215,  275,  216,  164, 1555,

       76,  165,  254,  255,  166, 1554,  276,  226,  226,  226,
      226,  277, 1553, 1552,  167, 1551,  272,  169,  260,  261,
      262,  168,  170, 1550,  275,  278,  164,  171, 1549,  217,
      254,  255,  166,  273,  276,   77,  279,  274,  280,  277,
      208,  208,  218,  208,  208,  219,  260,  261,  262,  168,
      220,   78,   79,  278, 1548,  221,   80,  281,  222,   81,
      282,  273, 1547,   82,  279,  274,  280,  283,   83,   84,
      243,  243,  243,  243,  243,  243,   96,  284,   98,   98,
       98,   98,   98,   98,  263,  281,  289,  290,  282,  285,
      264,  291,  286,  287,  265,  283,  292,  288,  293,  294,

      297,  295,  298,  299, 1546,  284,  302,   97,  296,  303,
     1545,  307,  263,  308,  289,  290,  300,  285,  264,  291,
      286,  287,  265,  313,  292,  288,  293,  294,  297,  295,
      298,  299,  301,  317,  302,   97,  296,  303,  304,  307,
      314,  308,  305,  309,  300,  310,  320,  322,  306,  318,
      311,  313,  323,  325,  326, 1544,  312,  315,  316, 1543,
      301,  317,  327,  319,  335,  321,  304,  336,  314,  324,
      305,  309,  328,  310,  320,  322,  306,  318,  311,  330,
      323,  325,  326,  329,  312,  315,  316,  332,  331,  340,
      327,  319,  335,  321,  341,  336,  337,  324,  343,  333,

      328,  344,  338,  334,  345,  346,  339,  330, 1542,  342,
      250,  329,  254,  255, 1541,  332,  331,  340,  251,  347,
      347,  257,  341, 1521,  337,  347,  343,  333,  266,  344,
      338,  334,  345,  346,  339,  271,  347,  342,  349,  275,
      352,  255,  347,  347,  276,  277,  350,  263,  347,  353,
      260,  261,  262,  264,  267, 1520,  356,  265,  362,  347,
     1519, 1518,  268,  360, 1517,  290,  291,  361, 1516,  282,
      295,  299,  363,  364, 1515,  355,  317,  296,  260,  261,
      354,  264,  267,  347,  347,  265,  325,  300,  285,  347,
      358,  286,  287,  290,  373,  336,  288,  282,  295,  376,

      347,  346,  372,  301,  381,  375,  378,  378,  304,  378,
      378,  308,  305, 1514,  385,  300,  285, 1513,  306,  366,
      287,  347,  347,  388,  367,  340,  368,  347,  309,  394,
      310,  301,  377,  323,  327,  311,  379,  337,  347,  308,
      305,  312, 1512,  338,  328,  390,  306,  339,  546,  546,
      324,  546,  546,  340,  332,  329,  309,  344,  310,  341,
      345,  323,  327,  311, 1511,  389,  333,  396,  396,  380,
      334,  338,  328,  409,  342,  339,  378,  378,  383,  378,
      378,  411,  332,  386,  412,  393,  413,  392,  345,  395,
      395,  395,  395,  414,  387,  396,  406,  415,  334,  416,

      417,  409,  342,  243,  243,  243,  243,  243,  243,  411,
      418,  419,  412,  420,  413,  421,  422,  423,  424,  425,
      426,  414,  427,  428,  429,  415,  430,  416,  417,  431,
      432,  433,  434,  435,  436,  437,  438,  439,  418,  419,
      440,  420,  441,  421,  422,  423,  424,  425,  426,  442,
      427,  428,  429,  443,  430,  444,  445,  431,  432,  433,
      434,  435,  436,  437,  438,  439,  446,  447,  440,  448,
      441,  449,  450,  451,  452,  453,  454,  442,  456,  457,
      458,  443,  459,  444,  445,  455,  460,  461,  462,  463,
      464,  465,  466,  467,  446,  447,  468,  448,  469,  449,

      450,  470,  471,  472,  473,  474,  456,  457,  458,  475,
      459,  476,  477,  455,  460,  461,  462,  463,  464,  465,
      466,  467,  478,  480,  468,  482,  469,  481,  483,  470,
      471,  472,  473,  474,  484,  485,  486,  475,  487,  476,
      477,  488,  489,  490,  493,  491,  494,  495,  496,  497,
      478,  480,  498,  482,  499,  481,  483,  492,  500,  501,
      502,  503,  484,  485,  486,  506,  487,  507,  508,  488,
      489,  490,  493,  491,  494,  495,  496,  497,  509,  510,
      498,  504,  499,  511,  512,  492,  500,  501,  502,  503,
      505,  513,  514,  506,  413,  507,  508,  515,  515,  414,

      417,  420,  427,  515,  425,  426,  509,  510,  430,  504,
      432,  511,  512,  435,  515,  439,  440,  449,  505,  513,
      514,  462,  517,  451,  452,  453,  454,  518,  520,  521,
      524,  465,  522,  523,  470,  455,  525,  478,  527,  484,
      491,  529, 1510,  530,  532,  534,  540,  541,  542,  544,
      493,  497,  492,  501,  503,  504,  512,  514,  566,  465,
      566,  579,  547,  455,  505,  548,  580,  549,  491, 1509,
      458,  560,  561,  562,  565,  565,  565,  565,  553,  554,
      551,  555,  556,  557,  563,  564,  566,  581,  576,  579,
      586,  587,  505,  588,  580,  589,  590,  509,  458,  582,

      583,  584,  585,  591,  592,  593,  596,  597,  594,  598,
      599,  600,  601,  602,  603,  581,  604,  605,  586,  587,
      595,  588,  606,  589,  590,  509,  607,  608,  609,  610,
      611,  591,  592,  593,  596,  597,  594,  598,  599,  600,
      601,  602,  603,  612,  604,  605,  613,  614,  595,  615,
      606,  616,  617,  618,  607,  608,  609,  610,  611,  619,
      620,  621,  622,  623,  624,  626,  627,  628,  629,  630,
      631,  612,  632,  633,  613,  614,  634,  615,  635,  616,
      617,  618,  625,  636,  637,  638,  639,  619,  620,  621,
      622,  623,  624,  626,  627,  628,  629,  630,  631,  640,

      632,  633,  641,  642,  634,  643,  635,  644,  645,  646,
      625,  636,  637,  638,  639,  647,  648,  649,  650,  651,
      652,  653,  654,  655,  656,  658,  659,  640,  657,  660,
      641,  642,  661,  643,  662,  644,  645,  646,  663,  664,
      665,  666, 1508,  647,  648,  649,  650,  651,  652,  653,
      654,  655,  656,  658,  659,  667,  657,  660,  673,  674,
      661,  675,  662,  676,  677,  668,  663,  664,  665,  666,
      669,  670,  671,  672,  678,  679,  680,  681,  682,  582,
      583,  584,  585,  667,  586,  591,  673,  674,  598,  675,
      599,  676,  677,  668,  685,  686,  687,  596,  597,  602,

      604,  609,  678,  679,  680,  681,  682,  693,  694,  695,
      610,  617,  684,  688,  630,  636,  690,  644,  691,  697,
      698,  699,  706,  707,  708,  689,  597,  692,  696,  700,
      650,  659,  660,  664,  669,  670,  671,  672,  701,  703,
      673,  682,  714,  716,  730,  717,  726,  727,  728,  730,
      740,  741,  742,  743,  744,  745,  746,  747,  718,  720,
      722,  723,  748,  749,  750,  751,  752,  753,  724,  729,
      755,  756,  730,  757,  758,  759,  760,  737,  740,  741,
      742,  743,  744,  745,  746,  747,  761,  762,  767,  768,
      748,  749,  750,  751,  752,  753,  769,  774,  755,  756,

      775,  757,  758,  759,  760,  763,  764,  765,  766,  770,
      771,  772,  773,  776,  761,  762,  767,  768,  777,  778,
      779,  780,  797, 1507,  769,  774,  800,  801,  775,  781,
      782,  783,  784,  785,  786,  787,  788,  789,  790,  791,
      792,  776,  793,  794,  795,  796,  777,  778,  779,  780,
      797,  798,  802,  803,  800,  801,  804,  805,  806,  807,
      808,  809,  811,  812,  813,  799,  814,  815,  816,  817,
      818,  819,  820,  821,  810,  822,  823,  824,  825,  798,
      802,  803,  826,  827,  804,  805,  806,  807,  808,  809,
      811,  812,  813,  799,  814,  815,  816,  817,  818,  819,

      820,  821,  810,  822,  823,  824,  825,  828,  829,  830,
      826,  827,  831,  832,  833,  834,  835,  836,  837,  838,
      839,  840,  841,  842,  843,  844,  845,  846,  847,  848,
      849,  850,  851,  750,  756,  828,  829,  830,  757,  760,
      831,  832,  833,  834,  835,  836,  837,  838,  839,  840,
      841,  842,  843,  844,  845,  846,  847,  848,  849,  850,
      851,  853,  854,  762,  805,  812,  855,  856,  770,  771,
      772,  773,  864,  865,  866,  867,  868,  869,  870,  871,
      872,  820,  826,  833,  834,  838,  846,  885,  885,  891,
      892,  860,  874,  875,  893,  894,  895,  896,  897,  898,

      899,  900,  901,  902,  903,  904,  905,  910,  911,  876,
      877,  879,  881,  882,  883,  885,  889,  891,  892,  912,
      914,  915,  893,  906,  907,  908,  909,  916,  917,  918,
      919,  920,  921,  922,  927,  910,  911,  923,  924,  925,
      926,  928,  929,  930,  931,  932,  933,  912,  914,  915,
      934,  935,  936,  937,  938,  916,  917,  918,  919,  920,
      921,  922,  927,  939,  940,  941,  942,  943,  944,  928,
      929,  930,  931,  932,  933,  945,  946,  947,  934,  935,
      936,  937,  938,  948,  949,  950,  951,  952,  953,  954,
      955,  939,  940,  941,  942,  943,  944,  956,  957,  958,

      959,  960,  961,  945,  946,  947,  962,  963,  964,  965,
      966,  948,  949,  950,  951,  952,  953,  954,  955,  967,
      968,  970,  971,  972,  973,  956,  957,  958,  959,  960,
      961,  974,  975,  976,  962,  963,  964,  965,  966,  977,
      978,  979,  980,  981,  994,  995,  998,  967,  968,  970,
      971,  972,  973,  982,  983,  984,  985,  999,  912,  974,
      975,  976,  986,  987,  988,  989,  996,  977,  990,  991,
      992,  993,  994,  995,  998,  918,  919,  921,  948,  997,
     1005, 1006, 1007,  955,  967,  999, 1001, 1008, 1009, 1010,
     1011, 1012, 1013,  970,  996,  923,  924,  925,  926,  974,

      994, 1024, 1024, 1002, 1003, 1004, 1017,  997, 1028, 1029,
     1030,  955, 1019, 1031, 1032, 1018, 1033, 1034, 1036, 1037,
     1038,  970, 1039, 1040, 1041, 1042, 1035, 1021, 1022, 1043,
     1044, 1045, 1025, 1025, 1506, 1505, 1028, 1029, 1030, 1504,
     1503, 1031, 1032, 1502, 1033, 1034, 1036, 1037, 1038, 1477,
     1039, 1040, 1041, 1042, 1063, 1476, 1475, 1043, 1044, 1045,
     1025, 1025, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
     1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1064, 1065,
     1066, 1067, 1063, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
     1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,

     1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
     1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
     1263, 1264, 1265, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
     1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
     1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
     1107, 1111, 1112, 1113, 1114, 1474, 1115, 1120, 1108, 1116,
     1117, 1118, 1121, 1122, 1123, 1124, 1125, 1032, 1039, 1119,
     1088, 1473, 1472, 1471, 1109, 1470, 1024, 1469, 1140, 1111,
     1112, 1113, 1114, 1110, 1115, 1120, 1108, 1142, 1143, 1144,
     1121, 1122, 1123, 1124, 1125, 1127, 1128, 1119, 1131, 1133,

     1134, 1135, 1109, 1116, 1117, 1118, 1140, 1025, 1468, 1108,
     1145, 1146, 1147, 1119, 1148, 1142, 1143, 1144, 1149, 1150,
     1151, 1152, 1153, 1170, 1171, 1109, 1154, 1155, 1156, 1157,
     1158, 1159, 1160, 1161, 1110, 1025, 1136, 1137, 1145, 1146,
     1147, 1119, 1148, 1172, 1173, 1174, 1149, 1150, 1151, 1152,
     1153, 1170, 1171, 1109, 1162, 1163, 1164, 1165, 1166, 1167,
     1168, 1169, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
     1183, 1172, 1173, 1174, 1184, 1185, 1186, 1187, 1188, 1189,
     1190, 1191, 1192, 1193, 1194, 1195, 1467, 1198, 1199, 1200,
     1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1201,

     1202, 1203, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
     1192, 1193, 1194, 1195, 1196, 1198, 1199, 1200, 1204, 1205,
     1197, 1206, 1207, 1208, 1210, 1211, 1179, 1201, 1202, 1203,
     1214, 1215, 1216, 1193, 1194, 1195, 1232, 1196, 1227, 1228,
     1229, 1209, 1196, 1197, 1233, 1234, 1204, 1205, 1197, 1206,
     1207, 1208, 1210, 1211, 1219, 1235, 1236, 1237, 1238, 1239,
     1240, 1221, 1222, 1223, 1232, 1196, 1241, 1217, 1218, 1209,
     1242, 1225, 1233, 1234, 1243, 1230, 1231, 1244, 1245, 1246,
     1247, 1248, 1249, 1235, 1236, 1237, 1238, 1239, 1240, 1250,
     1251, 1252, 1253, 1254, 1241, 1255, 1256, 1257, 1242, 1258,

     1259, 1260, 1243, 1261, 1262, 1244, 1245, 1246, 1247, 1248,
     1249, 1266, 1267, 1268, 1269, 1270, 1271, 1250, 1251, 1252,
     1253, 1254, 1272, 1255, 1256, 1257, 1274, 1258, 1259, 1260,
     1277, 1261, 1262, 1275, 1278, 1279, 1280, 1281, 1252, 1266,
     1267, 1268, 1269, 1270, 1271, 1276, 1466, 1465, 1267, 1302,
     1272, 1303, 1304, 1305, 1274, 1306, 1307, 1290, 1277, 1308,
     1309, 1275, 1278, 1279, 1280, 1281, 1287, 1310, 1311, 1291,
     1312, 1313, 1314, 1276, 1292, 1293, 1295, 1302, 1315, 1303,
     1304, 1305, 1316, 1306, 1307, 1317, 1318, 1308, 1309, 1319,
     1320, 1321, 1322, 1323, 1324, 1310, 1311, 1325, 1312, 1313,

     1314, 1326, 1327, 1328, 1329, 1330, 1315, 1331, 1332, 1333,
     1316, 1335, 1336, 1317, 1318, 1339, 1340, 1319, 1320, 1321,
     1322, 1323, 1324, 1341, 1342, 1325, 1343, 1344, 1345, 1326,
     1327, 1328, 1329, 1330, 1346, 1331, 1332, 1333, 1317, 1335,
     1336, 1348, 1331, 1339, 1340, 1368, 1369, 1363, 1370, 1371,
     1372, 1341, 1342, 1349, 1343, 1344, 1345, 1373, 1350, 1364,
     1374, 1375, 1346, 1376, 1365, 1377, 1353, 1378, 1379, 1380,
     1361, 1381, 1382, 1368, 1369, 1383, 1370, 1371, 1372, 1384,
     1386, 1387, 1388, 1389, 1390, 1373, 1391, 1392, 1374, 1375,
     1393, 1376, 1394, 1377, 1395, 1378, 1379, 1380, 1396, 1381,

     1382, 1397, 1398, 1383, 1399, 1400, 1401, 1384, 1386, 1387,
     1388, 1389, 1390, 1402, 1391, 1392, 1403, 1382, 1393, 1426,
     1394, 1427, 1395, 1428, 1429, 1430, 1396, 1431, 1432, 1397,
     1398, 1433, 1399, 1400, 1401, 1434, 1435, 1436, 1437, 1438,
     1439, 1402, 1440, 1441, 1403, 1410, 1442, 1426, 1443, 1427,
     1444, 1428, 1429, 1430, 1445, 1431, 1432, 1446, 1447, 1433,
     1448, 1449, 1450, 1434, 1435, 1436, 1437, 1438, 1439, 1451,
     1440, 1441, 1452, 1453, 1442, 1454, 1443, 1455, 1444, 1436,
     1478, 1479, 1445, 1480, 1481, 1446, 1447, 1482, 1448, 1449,
     1450, 1483, 1484, 1485, 1486, 1487, 1488, 1451, 1489, 1490,

     1452, 1453, 1491, 1454, 1492, 1455, 1493, 1462, 1478, 1479,
     1494, 1480, 1481, 1495, 1496, 1482, 1497, 1498, 1499, 1483,
     1484, 1485, 1486, 1487, 1488, 1500, 1489, 1490, 1501, 1522,
     1491, 1523, 1492, 1524, 1493, 1525, 1526, 1527, 1494, 1528,
     1529, 1495, 1496, 1530, 1497, 1498, 1499, 1531, 1532, 1533,
     1534, 1535, 1536, 1500, 1537, 1538, 1501, 1522, 1539, 1523,
     1540, 1524, 1557, 1525, 1526, 1527, 1558, 1528, 1529, 1559,
     1560, 1530, 1561, 1562, 1563, 1531, 1532, 1533, 1534, 1535,
     1536, 1564, 1537, 1538, 1565, 1566, 1539, 1567, 1540, 1568,
     1557, 1569, 1570, 1571, 1558, 1572, 1573, 1559, 1560, 1584,

     1561, 1562, 1563, 1585, 1586, 1587, 1588, 1589, 1590, 1564,
     1600, 1601, 1565, 1566, 1602, 1567, 1603, 1568, 1604, 1569,
     1570, 1571, 1609, 1572, 1573, 1610, 1611, 1584, 1612, 1617,
     1618, 1585, 1586, 1587, 1588, 1589, 1590, 1619, 1600, 1601,
     1623, 1624, 1602, 1625, 1603, 1627, 1604, 1628, 1629, 1631,
     1609, 1464, 1463, 1610, 1611, 1461, 1612, 1617, 1618, 1460,
     1459, 1458, 1457, 1456, 1425, 1619, 1424, 1423, 1623, 1624,
     1422, 1625, 1421, 1627, 1420, 1628, 1629, 1631,   69,   69,
       69,   69,   72,   72,   72,   72,  229, 1417, 1416,  229,
      231, 1415,  231,  231, 1141, 1414, 1141, 1141, 1413, 1412,

     1411, 1409, 1408, 1407, 1406, 1405, 1404, 1385, 1367, 1366,
     1362, 1360, 1359, 1358, 1357, 1356, 1355, 1354, 1352, 1351,
     1347, 1334, 1301, 1300, 1299, 1298, 1297, 1296, 1294, 1286,
     1285, 1284, 1283, 1282, 1273, 1226, 1224, 1220, 1213, 1212,
     1139, 1138, 1132, 1130, 1129, 1126, 1062, 1027, 1026, 1023,
     1020, 1016, 1015, 1014, 1000,  969,  913,  890,  888,  887,
      886,  884,  880,  878,  873,  863,  862,  861,  859,  858,
      857,  754,  852,  754,  739,  738,  736,  735,  734,  733,
      732,  731,  725,  721,  719,  715,  713,  712,  711,  710,
      709,  705,  704,  702,  683,  578,  577,  575,  574,  573,

      572,  571,  570,  569,  568,  567,  559,  558,  552,  550,
      545,  543,  539,  538,  537,  536,  535,  533,  531,  528,
      526,  519,  516,  479,  410,  408,  407,  405,  404,  401,
      400,  397,  391,  384,  382,  374,  371,  370,  369,  365,
      359,  357,  351,  348,  245,  244,  242,  241,  239,  233,
       74,  230,  101,   88,   85,   75,   74, 1632,   73,   73,
        7, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,

     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632
    } ;

static yyconst flex_int16_t yy_chk[3038] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    4,   12,   14,
       16,    3,    4,   17,   18,   19,   21,   21,   18,   23,
       23,   16,   14,   17,   30,   20,   18,   20,   20,   20,

       20,   20,   20,   44,   30,   24, 1635,   30,   24,   68,
       24,   25, 1626,   12,   25,   45,   19,   25,  234,   79,
       25,   79,   30, 1622,   25,   79,   20, 1616,  234,   12,
       12,   44,   30,   24,   12,   30,   24,   12,   24,   25,
       31,   12,   25,   45,   19,   25,   12,   12,   25,   28,
       32,   28,   25,   27,   20,   26,   26,   27,   32,   26,
       31,   28,   26,   27,   80,   68,   26,   77,   31,   26,
       34,   27,   80,   27,   82, 1221,   34,   28,   32,   28,
       35,   27, 1614,   26,   26,   27,   32,   26,   31,   28,
       26,   27,   29, 1221,   26,   77,  105,   26,   34,   27,

       35,   27,   82,   29,   34,   37,   29,   36,   35,   29,
       37,   36,  237,   42,  106,   29, 1613,   50,   42,   50,
       29,   36,  237,   42,  105, 1608,   39,   36,   35,   50,
       39,   29, 1607,   37,   29,   36,   38,   29,   37,   36,
       39,   42,  106,   29,   38,   50,   42,   50,   39,   36,
       38,   42, 1361,   38,   39,   36,   38,   50,   39, 1606,
       53,   48,  107,   43,   38,   48, 1605,   43,   39,  108,
     1361,   41,   38,   43,   41,   48,   39,   41,   38, 1596,
       53,   38,  109, 1595,   38,   40, 1594,   41,   53,   51,
      107,   43,   40,   40,   41,   43,   53,  108,   40,   41,

       51,   43,   41,   51,   40,   41,   51,   40,   53,  110,
      109,   46,   51,   40,   46,   41,   46,   51, 1273, 1273,
       40,   40,   41, 1593,   46,   46,   40,  111,   51, 1583,
       46,   51,   40, 1582,   51,   40,   52,  110, 1581,   46,
       51,   46,   46,   46,   46,   47,   52,   55,   47,   52,
      112,   47,   56,   55,   47,  111, 1580,   54,   47, 1579,
       52,   52,   47,   47,   52,   54,   52,   55,   47, 1577,
     1576,  114,   56,   47,   52,   55,   47,   52,  112,   47,
       56,   55,   47,   47,   56,   54,   47,   49,   57,   58,
      115,   49,   57,   54,   58, 1575, 1574,   49,   54,  114,

       56,   54,   57,  116, 1556,   49,  117,   49,   57,   60,
       60, 1555,   60,   60,  120,   49,   57,   58,  115,   49,
       57, 1552,   58,   49,   61,   49, 1551,  122,   61, 1549,
       57,  116,   49,   49,  117,   49,   57,   59,   61,   65,
      121, 1548,  120,   65,  123,   59,   61, 1547,  121,   65,
      124,   59,   61,   61,   59,  122,   61,   59,   61,   67,
       67,   67,   67, 1545,   66,   59,   61,   65,  121,   61,
     1544,   65,  123,   59,   61,   62,  121,   65,  124,   59,
       59,   59,   59,   59,   59,   59, 1543,   62,  125, 1521,
       62,   62,   66,   62,   62,   62,  127,   62,   63, 1518,

       76,   63,  113,  113,   63, 1517,  128,   66,   66,   66,
       66,  129, 1516, 1515,   63, 1514,  125,   64,  118,  118,
      118,   63,   64, 1513,  127,  130,   63,   64, 1512,   63,
      113,  113,   63,  126,  128,   76,  131,  126,  132,  129,
       63,   63,   63,   63,   63,   64,  118,  118,  118,   63,
       64,   76,   76,  130, 1511,   64,   76,  133,   64,   76,
      134,  126, 1510,   76,  131,  126,  132,  135,   76,   76,
       96,   96,   96,   96,   96,   96,   98,  136,   98,   98,
       98,   98,   98,   98,  119,  133,  139,  140,  134,  138,
      119,  141,  138,  138,  119,  135,  142,  138,  143,  144,

      146,  145,  147,  148, 1509,  136,  150,   98,  145,  151,
     1508,  153,  119,  154,  139,  140,  149,  138,  119,  141,
      138,  138,  119,  156,  142,  138,  143,  144,  146,  145,
      147,  148,  149,  158,  150,   98,  145,  151,  152,  153,
      157,  154,  152,  155,  149,  155,  160,  161,  152,  159,
      155,  156,  162,  163,  164, 1507,  155,  157,  157, 1504,
      149,  158,  165,  159,  168,  160,  152,  169,  157,  162,
      152,  155,  165,  155,  160,  161,  152,  159,  155,  166,
      162,  163,  164,  165,  155,  157,  157,  167,  166,  171,
      165,  159,  168,  160,  172,  169,  170,  162,  173,  167,

      165,  174,  170,  167,  174,  175,  170,  166, 1503,  172,
      180,  165,  183,  183, 1502,  167,  166,  171,  181,  178,
      178,  184,  172, 1477,  170,  178,  173,  167,  187,  174,
      170,  167,  174,  175,  170,  191,  178,  172,  180,  192,
      183,  183,  181,  181,  193,  194,  181,  186,  181,  184,
      185,  185,  185,  186,  189, 1476,  187,  186,  193,  181,
     1475, 1474,  189,  191, 1473,  202,  203,  192, 1472,  195,
      205,  206,  193,  194, 1471,  186,  212,  205,  185,  185,
      185,  186,  189,  195,  195,  186,  216,  207,  198,  195,
      189,  198,  198,  202,  203,  219,  198,  195,  205,  206,

      195,  225,  202,  207,  212,  205,  208,  208,  209,  208,
      208,  210,  209, 1470,  216,  207,  198, 1468,  209,  198,
      198,  210,  210,  219,  198,  221,  198,  210,  211,  225,
      211,  207,  207,  214,  217,  211,  209,  220,  210,  210,
      209,  211, 1467,  220,  217,  221,  209,  220,  378,  378,
      214,  378,  378,  221,  218,  217,  211,  224,  211,  223,
      224,  214,  217,  211, 1466,  220,  218,  232,  240,  211,
      218,  220,  217,  246,  223,  220,  214,  214,  214,  214,
      214,  248,  218,  217,  249,  224,  250,  223,  224,  226,
      226,  226,  226,  251,  218,  232,  240,  252,  218,  253,

      254,  246,  223,  243,  243,  243,  243,  243,  243,  248,
      255,  256,  249,  257,  250,  258,  259,  260,  261,  262,
      262,  251,  263,  264,  265,  252,  266,  253,  254,  267,
      268,  269,  270,  271,  272,  273,  274,  275,  255,  256,
      276,  257,  278,  258,  259,  260,  261,  262,  262,  279,
      263,  264,  265,  280,  266,  281,  282,  267,  268,  269,
      270,  271,  272,  273,  274,  275,  283,  284,  276,  285,
      278,  286,  287,  288,  288,  288,  288,  279,  289,  290,
      291,  280,  292,  281,  282,  288,  293,  295,  296,  297,
      298,  299,  300,  301,  283,  284,  302,  285,  303,  286,

      287,  304,  305,  306,  307,  308,  289,  290,  291,  309,
      292,  310,  311,  288,  293,  295,  296,  297,  298,  299,
      300,  301,  312,  314,  302,  315,  303,  314,  316,  304,
      305,  306,  307,  308,  317,  318,  319,  309,  320,  310,
      311,  321,  322,  323,  325,  324,  326,  327,  328,  329,
      312,  314,  330,  315,  331,  314,  316,  324,  332,  333,
      335,  336,  317,  318,  319,  338,  320,  339,  340,  321,
      322,  323,  325,  324,  326,  327,  328,  329,  341,  342,
      330,  337,  331,  343,  344,  324,  332,  333,  335,  336,
      337,  345,  346,  338,  349,  339,  340,  347,  347,  350,

      352,  353,  355,  347,  354,  354,  341,  342,  356,  337,
      358,  343,  344,  360,  347,  361,  363,  366,  337,  345,
      346,  375,  349,  367,  367,  367,  367,  350,  352,  353,
      355,  376,  354,  354,  379,  367,  356,  380,  358,  381,
      383,  360, 1465,  361,  363,  366,  373,  373,  373,  375,
      385,  386,  383,  387,  388,  389,  393,  394,  396,  376,
      406,  409,  379,  367,  389,  380,  410,  381,  383, 1464,
      373,  392,  392,  392,  395,  395,  395,  395,  385,  386,
      383,  387,  388,  389,  393,  394,  396,  412,  406,  409,
      414,  415,  389,  416,  410,  418,  419,  392,  373,  413,

      413,  413,  413,  420,  422,  423,  425,  425,  424,  426,
      427,  428,  429,  430,  431,  412,  432,  433,  414,  415,
      424,  416,  434,  418,  419,  392,  437,  438,  439,  440,
      441,  420,  422,  423,  425,  425,  424,  426,  427,  428,
      429,  430,  431,  442,  432,  433,  443,  445,  424,  447,
      434,  448,  449,  450,  437,  438,  439,  440,  441,  451,
      452,  453,  454,  455,  456,  458,  459,  460,  461,  462,
      464,  442,  465,  466,  443,  445,  468,  447,  469,  448,
      449,  450,  456,  470,  471,  472,  473,  451,  452,  453,
      454,  455,  456,  458,  459,  460,  461,  462,  464,  474,

      465,  466,  475,  476,  468,  477,  469,  478,  479,  480,
      456,  470,  471,  472,  473,  481,  482,  483,  484,  485,
      486,  487,  488,  489,  490,  491,  492,  474,  490,  493,
      475,  476,  494,  477,  495,  478,  479,  480,  496,  497,
      499,  500, 1463,  481,  482,  483,  484,  485,  486,  487,
      488,  489,  490,  491,  492,  502,  490,  493,  504,  505,
      494,  506,  495,  507,  508,  502,  496,  497,  499,  500,
      503,  503,  503,  503,  509,  510,  511,  513,  514,  517,
      517,  517,  517,  502,  518,  521,  504,  505,  523,  506,
      524,  507,  508,  502,  519,  519,  519,  522,  522,  525,

      527,  530,  509,  510,  511,  513,  514,  526,  526,  526,
      532,  534,  518,  521,  544,  547,  523,  548,  524,  528,
      528,  528,  537,  537,  537,  522,  522,  525,  527,  530,
      549,  551,  553,  554,  556,  556,  556,  556,  532,  534,
      557,  564,  544,  547,  566,  548,  559,  559,  559,  576,
      579,  580,  581,  582,  583,  584,  585,  587,  549,  551,
      553,  554,  588,  590,  591,  593,  594,  595,  557,  564,
      597,  598,  566,  599,  600,  601,  602,  576,  579,  580,
      581,  582,  583,  584,  585,  587,  603,  604,  606,  607,
      588,  590,  591,  593,  594,  595,  608,  611,  597,  598,

      612,  599,  600,  601,  602,  605,  605,  605,  605,  610,
      610,  610,  610,  613,  603,  604,  606,  607,  614,  615,
      616,  618,  623, 1461,  608,  611,  625,  626,  612,  619,
      619,  619,  619,  620,  620,  620,  620,  621,  621,  621,
      621,  613,  622,  622,  622,  622,  614,  615,  616,  618,
      623,  624,  627,  628,  625,  626,  629,  630,  631,  632,
      633,  634,  635,  636,  637,  624,  638,  639,  640,  641,
      642,  643,  644,  645,  634,  646,  647,  648,  649,  624,
      627,  628,  650,  651,  629,  630,  631,  632,  633,  634,
      635,  636,  637,  624,  638,  639,  640,  641,  642,  643,

      644,  645,  634,  646,  647,  648,  649,  653,  654,  656,
      650,  651,  657,  658,  659,  660,  661,  662,  663,  664,
      666,  667,  668,  669,  670,  671,  672,  673,  676,  678,
      679,  680,  681,  688,  690,  653,  654,  656,  691,  692,
      657,  658,  659,  660,  661,  662,  663,  664,  666,  667,
      668,  669,  670,  671,  672,  673,  676,  678,  679,  680,
      681,  688,  690,  696,  714,  716,  691,  692,  701,  701,
      701,  701,  710,  710,  710,  711,  711,  711,  712,  712,
      712,  717,  718,  720,  722,  723,  724,  730,  737,  740,
      741,  696,  714,  716,  742,  743,  743,  743,  743,  744,

      744,  744,  744,  745,  745,  745,  745,  748,  749,  717,
      718,  720,  722,  723,  724,  730,  737,  740,  741,  750,
      752,  753,  742,  746,  746,  746,  746,  754,  755,  756,
      757,  759,  760,  761,  763,  748,  749,  762,  762,  762,
      762,  764,  765,  766,  767,  768,  770,  750,  752,  753,
      771,  772,  773,  775,  776,  754,  755,  756,  757,  759,
      760,  761,  763,  777,  778,  780,  797,  798,  800,  764,
      765,  766,  767,  768,  770,  802,  803,  804,  771,  772,
      773,  775,  776,  805,  806,  807,  808,  809,  810,  811,
      812,  777,  778,  780,  797,  798,  800,  813,  814,  816,

      817,  818,  819,  802,  803,  804,  821,  822,  823,  824,
      825,  805,  806,  807,  808,  809,  810,  811,  812,  826,
      830,  833,  835,  836,  837,  813,  814,  816,  817,  818,
      819,  838,  839,  840,  821,  822,  823,  824,  825,  841,
      842,  842,  842,  842,  846,  847,  850,  826,  830,  833,
      835,  836,  837,  843,  843,  843,  843,  851,  853,  838,
      839,  840,  844,  844,  844,  844,  849,  841,  845,  845,
      845,  845,  846,  847,  850,  854,  855,  856,  874,  849,
      857,  857,  857,  875,  877,  851,  853,  858,  858,  858,
      859,  859,  859,  879,  849,  860,  860,  860,  860,  882,

      883,  885,  889,  854,  855,  856,  874,  849,  891,  892,
      893,  875,  877,  910,  912,  875,  913,  914,  915,  916,
      917,  879,  918,  920,  922,  923,  914,  882,  883,  924,
      925,  926,  885,  889, 1460, 1459,  891,  892,  893, 1458,
     1457,  910,  912, 1456,  913,  914,  915,  916,  917, 1425,
      918,  920,  922,  923,  932, 1424, 1423,  924,  925,  926,
      885,  889,  927,  927,  927,  927,  928,  928,  928,  928,
      929,  929,  929,  929,  930,  930,  930,  930,  933,  933,
      933,  933,  932,  934,  934,  934,  934,  935,  935,  935,
      935,  936,  936,  936,  936,  938,  939,  940,  941,  942,

      944,  946,  947,  948,  949,  950,  951,  952,  953,  954,
      957,  958,  959,  960,  961,  962,  963,  964,  965,  966,
     1192, 1192, 1192,  938,  939,  940,  941,  942,  944,  946,
      947,  948,  949,  950,  951,  952,  953,  954,  957,  958,
      959,  960,  961,  962,  963,  964,  965,  966,  967,  967,
      967,  968,  969,  970,  972, 1422,  973,  975,  967,  974,
      974,  974,  977,  995,  996,  997,  999, 1001, 1002,  974,
     1017, 1421, 1420, 1419,  967, 1418, 1024, 1417, 1025,  968,
      969,  970,  972,  967,  973,  975,  967, 1028, 1029, 1030,
      977,  995,  996,  997,  999, 1001, 1002,  974, 1017, 1019,

     1019, 1019,  967, 1021, 1021, 1021, 1025, 1024, 1416, 1019,
     1031, 1033, 1034, 1021, 1035, 1028, 1029, 1030, 1036, 1037,
     1038, 1040, 1041, 1062, 1080, 1019, 1042, 1042, 1042, 1042,
     1043, 1043, 1043, 1043, 1019, 1024, 1019, 1019, 1031, 1033,
     1034, 1021, 1035, 1081, 1082, 1083, 1036, 1037, 1038, 1040,
     1041, 1062, 1080, 1019, 1044, 1044, 1044, 1044, 1045, 1045,
     1045, 1045, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1092,
     1093, 1081, 1082, 1083, 1094, 1095, 1096, 1098, 1099, 1100,
     1102, 1103, 1104, 1105, 1106, 1107, 1415, 1109, 1110, 1111,
     1084, 1085, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1112,

     1113, 1114, 1094, 1095, 1096, 1098, 1099, 1100, 1102, 1103,
     1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1116, 1117,
     1108, 1118, 1119, 1120, 1123, 1124, 1131, 1112, 1113, 1114,
     1130, 1130, 1130, 1133, 1134, 1135, 1140, 1137, 1139, 1139,
     1139, 1120, 1108, 1137, 1142, 1143, 1116, 1117, 1108, 1118,
     1119, 1120, 1123, 1124, 1131, 1144, 1145, 1146, 1147, 1148,
     1149, 1133, 1134, 1135, 1140, 1137, 1150, 1130, 1130, 1120,
     1151, 1137, 1142, 1143, 1152, 1139, 1139, 1153, 1170, 1171,
     1172, 1173, 1174, 1144, 1145, 1146, 1147, 1148, 1149, 1176,
     1178, 1179, 1180, 1181, 1150, 1182, 1183, 1184, 1151, 1186,

     1187, 1188, 1152, 1190, 1191, 1153, 1170, 1171, 1172, 1173,
     1174, 1196, 1197, 1198, 1199, 1200, 1201, 1176, 1178, 1179,
     1180, 1181, 1202, 1182, 1183, 1184, 1204, 1186, 1187, 1188,
     1207, 1190, 1191, 1205, 1208, 1209, 1210, 1211, 1219, 1196,
     1197, 1198, 1199, 1200, 1201, 1205, 1414, 1413, 1225, 1232,
     1202, 1233, 1234, 1236, 1204, 1237, 1238, 1222, 1207, 1239,
     1240, 1205, 1208, 1209, 1210, 1211, 1219, 1242, 1243, 1222,
     1244, 1245, 1246, 1205, 1222, 1222, 1225, 1232, 1247, 1233,
     1234, 1236, 1251, 1237, 1238, 1252, 1253, 1239, 1240, 1255,
     1256, 1257, 1258, 1259, 1260, 1242, 1243, 1261, 1244, 1245,

     1246, 1262, 1263, 1264, 1265, 1266, 1247, 1267, 1268, 1269,
     1251, 1271, 1272, 1252, 1253, 1274, 1275, 1255, 1256, 1257,
     1258, 1259, 1260, 1276, 1277, 1261, 1278, 1279, 1280, 1262,
     1263, 1264, 1265, 1266, 1281, 1267, 1268, 1269, 1287, 1271,
     1272, 1283, 1295, 1274, 1275, 1302, 1303, 1298, 1304, 1305,
     1306, 1276, 1277, 1283, 1278, 1279, 1280, 1307, 1283, 1298,
     1308, 1309, 1281, 1310, 1298, 1311, 1287, 1312, 1313, 1314,
     1295, 1316, 1317, 1302, 1303, 1319, 1304, 1305, 1306, 1322,
     1324, 1325, 1326, 1327, 1328, 1307, 1330, 1332, 1308, 1309,
     1333, 1310, 1334, 1311, 1336, 1312, 1313, 1314, 1338, 1316,

     1317, 1339, 1340, 1319, 1341, 1342, 1344, 1322, 1324, 1325,
     1326, 1327, 1328, 1345, 1330, 1332, 1346, 1353, 1333, 1369,
     1334, 1371, 1336, 1373, 1374, 1375, 1338, 1376, 1377, 1339,
     1340, 1377, 1341, 1342, 1344, 1380, 1381, 1382, 1383, 1384,
     1385, 1345, 1386, 1387, 1346, 1353, 1388, 1369, 1389, 1371,
     1390, 1373, 1374, 1375, 1391, 1376, 1377, 1393, 1394, 1377,
     1395, 1396, 1397, 1380, 1381, 1382, 1383, 1384, 1385, 1398,
     1386, 1387, 1399, 1400, 1388, 1401, 1389, 1402, 1390, 1410,
     1426, 1427, 1391, 1429, 1431, 1393, 1394, 1432, 1395, 1396,
     1397, 1433, 1434, 1435, 1438, 1439, 1440, 1398, 1441, 1442,

     1399, 1400, 1443, 1401, 1444, 1402, 1445, 1410, 1426, 1427,
     1447, 1429, 1431, 1448, 1450, 1432, 1451, 1452, 1453, 1433,
     1434, 1435, 1438, 1439, 1440, 1454, 1441, 1442, 1455, 1478,
     1443, 1479, 1444, 1480, 1445, 1481, 1482, 1483, 1447, 1485,
     1486, 1448, 1450, 1487, 1451, 1452, 1453, 1488, 1489, 1490,
     1491, 1492, 1493, 1454, 1494, 1495, 1455, 1478, 1498, 1479,
     1499, 1480, 1522, 1481, 1482, 1483, 1523, 1485, 1486, 1524,
     1525, 1487, 1526, 1527, 1530, 1488, 1489, 1490, 1491, 1492,
     1493, 1531, 1494, 1495, 1532, 1533, 1498, 1534, 1499, 1535,
     1522, 1536, 1537, 1538, 1523, 1539, 1540, 1524, 1525, 1557,

     1526, 1527, 1530, 1558, 1560, 1561, 1565, 1566, 1569, 1531,
     1584, 1586, 1532, 1533, 1588, 1534, 1589, 1535, 1590, 1536,
     1537, 1538, 1600, 1539, 1540, 1601, 1602, 1557, 1604, 1609,
     1610, 1558, 1560, 1561, 1565, 1566, 1569, 1612, 1584, 1586,
     1617, 1618, 1588, 1619, 1589, 1623, 1590, 1624, 1625, 1628,
     1600, 1412, 1411, 1601, 1602, 1409, 1604, 1609, 1610, 1408,
     1407, 1406, 1405, 1404, 1367, 1612, 1366, 1365, 1617, 1618,
     1364, 1619, 1363, 1623, 1362, 1624, 1625, 1628, 1633, 1633,
     1633, 1633, 1634, 1634, 1634, 1634, 1636, 1360, 1359, 1636,
     1637, 1358, 1637, 1637, 1638, 1357, 1638, 1638, 1356, 1355,

     1354, 1352, 1351, 1350, 1349, 1348, 1347, 1323, 1301, 1300,
     1297, 1294, 1293, 1292, 1291, 1290, 1289, 1288, 1286, 1285,
     1282, 1270, 1231, 1230, 1229, 1228, 1227, 1226, 1224, 1218,
     1217, 1216, 1215, 1214, 1203, 1138, 1136, 1132, 1129, 1126,
     1023, 1020, 1018, 1015, 1014, 1000,  931,  890,  888,  884,
      880,  873,  862,  861,  852,  831,  751,  739,  736,  735,
      731,  725,  721,  719,  713,  709,  705,  704,  695,  694,
      693,  689,  683,  596,  578,  577,  574,  573,  572,  571,
      570,  567,  558,  552,  550,  545,  543,  542,  541,  540,
      538,  536,  535,  533,  516,  408,  407,  405,  404,  403,

      402,  401,  400,  399,  398,  397,  391,  390,  384,  382,
      377,  374,  372,  371,  370,  369,  368,  365,  362,  359,
      357,  351,  348,  313,  247,  242,  241,  239,  238,  236,
      235,  233,  222,  215,  213,  204,  201,  200,  199,  196,
      190,  188,  182,  179,  103,   99,   84,   83,   81,   78,
       74,   71,   22,   15,   13,   11,    9,    7,    6,    5,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,

     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1632, 1632
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "gpu/lolfx-scanner.l"
#line 2 "gpu/lolfx-scanner.l"
//
// Lol Engine
//
// Copyright: (c) 2010-2012 Sam Hocevar <sam@hocevar.net>
//   This program is free software; you can redistribute it and/or
//   modify it under the terms of the Do What The Fuck You Want To
//   Public License, Version 2, as published by Sam Hocevar. See
//   http://sam.zoy.org/projects/COPYING.WTFPL for more details.
//

#if defined HAVE_CONFIG_H
#   include "config.h"
#endif

#include <cstdlib>
using std::exit;
using std::malloc;
using std::realloc;
using std::free;
#include <iostream>

#include "core.h"
#include "gpu/lolfx-compiler.h"

typedef lol::LolFxParser::token token;
typedef lol::LolFxParser::token_type token_type;

#ifndef YY_DECL
#   define YY_DECL lol::LolFxParser::token_type \
        lol::LolFxScanner::lex(lol::LolFxParser::semantic_type* yylval, \
                               lol::LolFxParser::location_type* yylloc)
#endif

#define yyterminate() return token::T_END
#define YY_NO_UNISTD_H
#define YY_USER_ACTION yylloc->columns(yyleng);


#line 1662 "generated/lolfx-scanner.cpp"

#define INITIAL 0
#define C_COMMENT 1
#define CPP_COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 46 "gpu/lolfx-scanner.l"



    /* reset location at the beginning of yylex() */
    yylloc->step();

    int language_guess = INITIAL;


 /*
  * GLSL keywords
  */

#line 1783 "generated/lolfx-scanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1633 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1632 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "gpu/lolfx-scanner.l"
{ return token::GT_SUBROUTINE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "gpu/lolfx-scanner.l"
{ return token::GT_PATCH; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 61 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLE; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 62 "gpu/lolfx-scanner.l"
{ return token::GT_FLAT; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 63 "gpu/lolfx-scanner.l"
{ return token::GT_SMOOTH; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 64 "gpu/lolfx-scanner.l"
{ return token::GT_LAYOUT; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 65 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER1DSHADOW; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 66 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DSHADOW; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 67 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLERCUBESHADOW; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 68 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER1DARRAY; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 69 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DARRAY; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 70 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER1DARRAYSHADOW; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 71 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DARRAYSHADOW; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 72 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER1D; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 73 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER2D; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 74 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER3D; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 75 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLERCUBE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 76 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER1DARRAY; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 77 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER2DARRAY; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 78 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER1D; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 79 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER2D; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 80 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER3D; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 81 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLERCUBE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 82 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER1DARRAY; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 83 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER2DARRAY; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 84 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DRECT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 85 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DRECTSHADOW; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 86 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER2DRECT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 87 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER2DRECT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 88 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLERBUFFER; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 89 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLERBUFFER; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 90 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLERBUFFER; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 91 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLERCUBEARRAY; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 92 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLERCUBEARRAYSHADOW; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 93 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLERCUBEARRAY; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 94 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLERCUBEARRAY; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DMS; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 96 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER2DMS; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 97 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER2DMS; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 98 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DMSARRAY; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 99 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER2DMSARRAY; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 100 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER2DMSARRAY; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "gpu/lolfx-scanner.l"
{ return token::GT_HIGHP; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "gpu/lolfx-scanner.l"
{ return token::GT_MEDIUMP; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "gpu/lolfx-scanner.l"
{ return token::GT_LOWP; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "gpu/lolfx-scanner.l"
{ return token::GT_PRECISION; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "gpu/lolfx-scanner.l"
{ return token::GT_INVARIANT; }
	YY_BREAK
/*
  * Deprecated GLSL keywords
  */
case 48:
YY_RULE_SETUP
#line 112 "gpu/lolfx-scanner.l"
{ return token::GT_ATTRIBUTE; }
	YY_BREAK
/*
  * GLSL vector types
  */
case 49:
YY_RULE_SETUP
#line 118 "gpu/lolfx-scanner.l"
{ return token::GT_BVEC2; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 119 "gpu/lolfx-scanner.l"
{ return token::GT_BVEC3; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 120 "gpu/lolfx-scanner.l"
{ return token::GT_BVEC4; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 122 "gpu/lolfx-scanner.l"
{ return token::GT_IVEC2; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 123 "gpu/lolfx-scanner.l"
{ return token::GT_IVEC3; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 124 "gpu/lolfx-scanner.l"
{ return token::GT_IVEC4; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 126 "gpu/lolfx-scanner.l"
{ return token::GT_UVEC2; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 127 "gpu/lolfx-scanner.l"
{ return token::GT_UVEC3; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 128 "gpu/lolfx-scanner.l"
{ return token::GT_UVEC4; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 130 "gpu/lolfx-scanner.l"
{ return token::GT_VEC2; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 131 "gpu/lolfx-scanner.l"
{ return token::GT_VEC3; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 132 "gpu/lolfx-scanner.l"
{ return token::GT_VEC4; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 133 "gpu/lolfx-scanner.l"
{ return token::GT_MAT2; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 134 "gpu/lolfx-scanner.l"
{ return token::GT_MAT2X2; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 135 "gpu/lolfx-scanner.l"
{ return token::GT_MAT2X3; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 136 "gpu/lolfx-scanner.l"
{ return token::GT_MAT2X4; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 137 "gpu/lolfx-scanner.l"
{ return token::GT_MAT3; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 138 "gpu/lolfx-scanner.l"
{ return token::GT_MAT3X2; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 139 "gpu/lolfx-scanner.l"
{ return token::GT_MAT3X3; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 140 "gpu/lolfx-scanner.l"
{ return token::GT_MAT3X4; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 141 "gpu/lolfx-scanner.l"
{ return token::GT_MAT4; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 142 "gpu/lolfx-scanner.l"
{ return token::GT_MAT4X2; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 143 "gpu/lolfx-scanner.l"
{ return token::GT_MAT4X3; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 144 "gpu/lolfx-scanner.l"
{ return token::GT_MAT4X4; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 146 "gpu/lolfx-scanner.l"
{ return token::GT_DVEC2; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 147 "gpu/lolfx-scanner.l"
{ return token::GT_DVEC3; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 148 "gpu/lolfx-scanner.l"
{ return token::GT_DVEC4; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 149 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT2; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 150 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT2X2; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 151 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT2X3; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 152 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT2X4; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 153 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT3; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 154 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT3X2; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 155 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT3X3; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 156 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT3X4; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 157 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT4; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 158 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT4X2; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 159 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT4X3; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 160 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT4X4; }
	YY_BREAK
/*
  * GLSL constant values
  */
case 88:
YY_RULE_SETUP
#line 166 "gpu/lolfx-scanner.l"
{ yylval->ival = 1; return token::BOOLCONSTANT; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 167 "gpu/lolfx-scanner.l"
{ yylval->ival = 0; return token::BOOLCONSTANT; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 169 "gpu/lolfx-scanner.l"
{ return token::FIELDSELECTION; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 170 "gpu/lolfx-scanner.l"
{ return token::FIELDSELECTION; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 171 "gpu/lolfx-scanner.l"
{ return token::FIELDSELECTION; }
	YY_BREAK
/*
  * GLSL keywords that are also valid or reserved in HLSL
  * and HLSL keywords that are also valid or reserved in GLSL.
  */
case 93:
YY_RULE_SETUP
#line 178 "gpu/lolfx-scanner.l"
{ return token::GHT_BOOL; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 179 "gpu/lolfx-scanner.l"
{ return token::GHT_BREAK; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 180 "gpu/lolfx-scanner.l"
{ return token::GHT_CASE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 181 "gpu/lolfx-scanner.l"
{ return token::GHT_CENTROID; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 182 "gpu/lolfx-scanner.l"
{ return token::GHT_CONST; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 183 "gpu/lolfx-scanner.l"
{ return token::GHT_CONTINUE; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 184 "gpu/lolfx-scanner.l"
{ return token::GHT_DEFAULT; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 185 "gpu/lolfx-scanner.l"
{ return token::GHT_DISCARD; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 186 "gpu/lolfx-scanner.l"
{ return token::GHT_DO; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 187 "gpu/lolfx-scanner.l"
{ return token::GHT_DOUBLE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 188 "gpu/lolfx-scanner.l"
{ return token::GHT_ELSE; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 189 "gpu/lolfx-scanner.l"
{ return token::GHT_FLOAT; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 190 "gpu/lolfx-scanner.l"
{ return token::GHT_FOR; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 191 "gpu/lolfx-scanner.l"
{ return token::GHT_IF; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 192 "gpu/lolfx-scanner.l"
{ return token::GHT_IN; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 193 "gpu/lolfx-scanner.l"
{ return token::GHT_INOUT; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 194 "gpu/lolfx-scanner.l"
{ return token::GHT_INT; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 195 "gpu/lolfx-scanner.l"
{ return token::GHT_NOPERSPECTIVE; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 196 "gpu/lolfx-scanner.l"
{ return token::GHT_OUT; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 197 "gpu/lolfx-scanner.l"
{ return token::GHT_RETURN; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 198 "gpu/lolfx-scanner.l"
{ return token::GHT_SAMPLER1D; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 199 "gpu/lolfx-scanner.l"
{ return token::GHT_SAMPLER2D; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 200 "gpu/lolfx-scanner.l"
{ return token::GHT_SAMPLER3D; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 201 "gpu/lolfx-scanner.l"
{ return token::GHT_SAMPLERCUBE; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 202 "gpu/lolfx-scanner.l"
{ return token::GHT_STRUCT; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 203 "gpu/lolfx-scanner.l"
{ return token::GHT_SWITCH; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 204 "gpu/lolfx-scanner.l"
{ return token::GHT_UINT; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 205 "gpu/lolfx-scanner.l"
{ return token::GHT_UNIFORM; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 206 "gpu/lolfx-scanner.l"
{ return token::GHT_VOID; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 207 "gpu/lolfx-scanner.l"
{ return token::GHT_WHILE; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 209 "gpu/lolfx-scanner.l"
{ return token::HGT_BOOL; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 210 "gpu/lolfx-scanner.l"
{ return token::HGT_BREAK; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 211 "gpu/lolfx-scanner.l"
{ return token::HGT_CASE; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 212 "gpu/lolfx-scanner.l"
{ return token::HGT_CENTROID; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 213 "gpu/lolfx-scanner.l"
{ return token::HGT_CONST; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 214 "gpu/lolfx-scanner.l"
{ return token::HGT_CONTINUE; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 215 "gpu/lolfx-scanner.l"
{ return token::HGT_DEFAULT; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 216 "gpu/lolfx-scanner.l"
{ return token::HGT_DISCARD; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 217 "gpu/lolfx-scanner.l"
{ return token::HGT_DO; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 218 "gpu/lolfx-scanner.l"
{ return token::HGT_DOUBLE; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 219 "gpu/lolfx-scanner.l"
{ return token::HGT_ELSE; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 220 "gpu/lolfx-scanner.l"
{ return token::HGT_FLOAT; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 221 "gpu/lolfx-scanner.l"
{ return token::HGT_FOR; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 222 "gpu/lolfx-scanner.l"
{ return token::HGT_IF; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 223 "gpu/lolfx-scanner.l"
{ return token::HGT_IN; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 224 "gpu/lolfx-scanner.l"
{ return token::HGT_INOUT; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 225 "gpu/lolfx-scanner.l"
{ return token::HGT_INT; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 226 "gpu/lolfx-scanner.l"
{ return token::HGT_NOPERSPECTIVE; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 227 "gpu/lolfx-scanner.l"
{ return token::HGT_OUT; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 228 "gpu/lolfx-scanner.l"
{ return token::HGT_RETURN; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 229 "gpu/lolfx-scanner.l"
{ return token::HGT_SAMPLER1D; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 230 "gpu/lolfx-scanner.l"
{ return token::HGT_SAMPLER2D; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 231 "gpu/lolfx-scanner.l"
{ return token::HGT_SAMPLER3D; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 232 "gpu/lolfx-scanner.l"
{ return token::HGT_SAMPLERCUBE; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 233 "gpu/lolfx-scanner.l"
{ return token::HGT_STRUCT; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 234 "gpu/lolfx-scanner.l"
{ return token::HGT_SWITCH; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 235 "gpu/lolfx-scanner.l"
{ return token::HGT_UINT; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 236 "gpu/lolfx-scanner.l"
{ return token::HGT_UNIFORM; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 237 "gpu/lolfx-scanner.l"
{ return token::HGT_VOID; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 238 "gpu/lolfx-scanner.l"
{ return token::HGT_WHILE; }
	YY_BREAK
/*
  * HLSL keywords
  * Gathered from http://msdn.microsoft.com/en-us/library/windows/desktop/bb509568%28v=vs.85%29.aspx
  */
case 153:
YY_RULE_SETUP
#line 245 "gpu/lolfx-scanner.l"
{ return token::HT_APPENDSTRUCTUREDBUFFER; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 246 "gpu/lolfx-scanner.l"
{ return token::HT_ASM; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 247 "gpu/lolfx-scanner.l"
{ return token::HT_ASM_FRAGMENT; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 248 "gpu/lolfx-scanner.l"
{ return token::HT_BLENDSTATE; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 249 "gpu/lolfx-scanner.l"
{ return token::HT_BUFFER; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 250 "gpu/lolfx-scanner.l"
{ return token::HT_BYTEADDRESSBUFFER; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 251 "gpu/lolfx-scanner.l"
{ return token::HT_CBUFFER; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 252 "gpu/lolfx-scanner.l"
{ return token::HT_COLUMN_MAJOR; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 253 "gpu/lolfx-scanner.l"
{ return token::HT_COMPILE; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 254 "gpu/lolfx-scanner.l"
{ return token::HT_COMPILE_FRAGMENT; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 255 "gpu/lolfx-scanner.l"
{ return token::HT_COMPILESHADER; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 256 "gpu/lolfx-scanner.l"
{ return token::HT_COMPUTESHADER; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 257 "gpu/lolfx-scanner.l"
{ return token::HT_CONSUMESTRUCTUREDBUFFER; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 258 "gpu/lolfx-scanner.l"
{ return token::HT_DEPTHSTENCILSTATE; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 259 "gpu/lolfx-scanner.l"
{ return token::HT_DEPTHSTENCILVIEW; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 260 "gpu/lolfx-scanner.l"
{ return token::HT_DOMAINSHADER; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 261 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 262 "gpu/lolfx-scanner.l"
{ return token::HT_EXTERN; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 263 "gpu/lolfx-scanner.l"
{ return token::HT_FALSE; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 264 "gpu/lolfx-scanner.l"
{ return token::HT_FXGROUP; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 265 "gpu/lolfx-scanner.l"
{ return token::HT_GEOMETRYSHADER; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 266 "gpu/lolfx-scanner.l"
{ return token::HT_GROUPSHARED; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 267 "gpu/lolfx-scanner.l"
{ return token::HT_HALF; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 268 "gpu/lolfx-scanner.l"
{ return token::HT_HULLSHADER; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 269 "gpu/lolfx-scanner.l"
{ return token::HT_INLINE; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 270 "gpu/lolfx-scanner.l"
{ return token::HT_INPUTPATCH; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 271 "gpu/lolfx-scanner.l"
{ return token::HT_INTERFACE; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 272 "gpu/lolfx-scanner.l"
{ return token::HT_LINE; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 273 "gpu/lolfx-scanner.l"
{ return token::HT_LINEADJ; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 274 "gpu/lolfx-scanner.l"
{ return token::HT_LINEAR; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 275 "gpu/lolfx-scanner.l"
{ return token::HT_LINESTREAM; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 276 "gpu/lolfx-scanner.l"
{ return token::HT_MATRIX; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 277 "gpu/lolfx-scanner.l"
{ return token::HT_NAMESPACE; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 278 "gpu/lolfx-scanner.l"
{ return token::HT_NOINTERPOLATION; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 279 "gpu/lolfx-scanner.l"
{ return token::HT_NULL; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 280 "gpu/lolfx-scanner.l"
{ return token::HT_OUTPUTPATCH; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 281 "gpu/lolfx-scanner.l"
{ return token::HT_PACKOFFSET; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 282 "gpu/lolfx-scanner.l"
{ return token::HT_PASS; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 283 "gpu/lolfx-scanner.l"
{ return token::HT_PIXELFRAGMENT; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 284 "gpu/lolfx-scanner.l"
{ return token::HT_PIXELSHADER; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 285 "gpu/lolfx-scanner.l"
{ return token::HT_POINT; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 286 "gpu/lolfx-scanner.l"
{ return token::HT_POINTSTREAM; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 287 "gpu/lolfx-scanner.l"
{ return token::HT_PRECISE; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 288 "gpu/lolfx-scanner.l"
{ return token::HT_RASTERIZERSTATE; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 289 "gpu/lolfx-scanner.l"
{ return token::HT_RENDERTARGETVIEW; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 290 "gpu/lolfx-scanner.l"
{ return token::HT_REGISTER; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 291 "gpu/lolfx-scanner.l"
{ return token::HT_ROW_MAJOR; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 292 "gpu/lolfx-scanner.l"
{ return token::HT_RWBUFFER; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 293 "gpu/lolfx-scanner.l"
{ return token::HT_RWBYTEADDRESSBUFFER; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 294 "gpu/lolfx-scanner.l"
{ return token::HT_RWSTRUCTUREDBUFFER; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 295 "gpu/lolfx-scanner.l"
{ return token::HT_RWTEXTURE1D; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 296 "gpu/lolfx-scanner.l"
{ return token::HT_RWTEXTURE1DARRAY; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 297 "gpu/lolfx-scanner.l"
{ return token::HT_RWTEXTURE2D; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 298 "gpu/lolfx-scanner.l"
{ return token::HT_RWTEXTURE2DARRAY; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 299 "gpu/lolfx-scanner.l"
{ return token::HT_RWTEXTURE3D; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 300 "gpu/lolfx-scanner.l"
{ return token::HT_SAMPLER; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 301 "gpu/lolfx-scanner.l"
{ return token::HT_SAMPLER_STATE; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 302 "gpu/lolfx-scanner.l"
{ return token::HT_SAMPLERSTATE; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 303 "gpu/lolfx-scanner.l"
{ return token::HT_SAMPLERCOMPARISONSTATE; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 304 "gpu/lolfx-scanner.l"
{ return token::HT_SHARED; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 305 "gpu/lolfx-scanner.l"
{ return token::HT_SNORM; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 306 "gpu/lolfx-scanner.l"
{ return token::HT_STATEBLOCK; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 307 "gpu/lolfx-scanner.l"
{ return token::HT_STATEBLOCK_STATE; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 308 "gpu/lolfx-scanner.l"
{ return token::HT_STATIC; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 309 "gpu/lolfx-scanner.l"
{ return token::HT_STRING; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 310 "gpu/lolfx-scanner.l"
{ return token::HT_STRUCTUREDBUFFER; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 311 "gpu/lolfx-scanner.l"
{ return token::HT_TBUFFER; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 312 "gpu/lolfx-scanner.l"
{ return token::HT_TECHNIQUE; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 313 "gpu/lolfx-scanner.l"
{ return token::HT_TECHNIQUE10; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 314 "gpu/lolfx-scanner.l"
{ return token::HT_TECHNIQUE11XZ; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 315 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 316 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE1D; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 317 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE1DARRAY; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 318 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE2D; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 319 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE2DARRAY; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 320 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE2DMS; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 321 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE2DMSARRAY; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 322 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE3D; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 323 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURECUBE; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 324 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURECUBEARRAY; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 325 "gpu/lolfx-scanner.l"
{ return token::HT_TRUE; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 326 "gpu/lolfx-scanner.l"
{ return token::HT_TYPEDEF; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 327 "gpu/lolfx-scanner.l"
{ return token::HT_TRIANGLE; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 328 "gpu/lolfx-scanner.l"
{ return token::HT_TRIANGLEADJ; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 329 "gpu/lolfx-scanner.l"
{ return token::HT_TRIANGLESTREAM; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 330 "gpu/lolfx-scanner.l"
{ return token::HT_UNORM; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 331 "gpu/lolfx-scanner.l"
{ return token::HT_VECTOR; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 332 "gpu/lolfx-scanner.l"
{ return token::HT_VERTEXFRAGMENT; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 333 "gpu/lolfx-scanner.l"
{ return token::HT_VERTEXSHADER; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 334 "gpu/lolfx-scanner.l"
{ return token::HT_VOLATILE; }
	YY_BREAK
/*
  * HLSL vector types
  * TODO: this can probably be factored somehow
  */
case 243:
YY_RULE_SETUP
#line 341 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL1; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 342 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL1x1; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 343 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL2x1; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 344 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL3x1; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 345 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL4x1; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 346 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL2; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 347 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL1x2; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 348 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL2x2; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 349 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL3x2; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 350 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL4x2; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 351 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL3; }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 352 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL1x3; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 353 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL2x3; }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 354 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL3x3; }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 355 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL4x3; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 356 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL4; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 357 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL1x4; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 358 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL2x4; }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 359 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL3x4; }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 360 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL4x4; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 362 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT1; }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 363 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT1x1; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 364 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT2x1; }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 365 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT3x1; }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 366 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT4x1; }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 367 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT2; }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 368 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT1x2; }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 369 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT2x2; }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 370 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT3x2; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 371 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT4x2; }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 372 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT3; }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 373 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT1x3; }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 374 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT2x3; }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 375 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT3x3; }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 376 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT4x3; }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 377 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT4; }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 378 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT1x4; }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 379 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT2x4; }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 380 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT3x4; }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 381 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT4x4; }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 383 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE1; }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 384 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE1x1; }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 385 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE2x1; }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 386 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE3x1; }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 387 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE4x1; }
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 388 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE2; }
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 389 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE1x2; }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 390 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE2x2; }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 391 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE3x2; }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 392 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE4x2; }
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 393 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE3; }
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 394 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE1x3; }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 395 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE2x3; }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 396 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE3x3; }
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 397 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE4x3; }
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 398 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE4; }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 399 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE1x4; }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 400 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE2x4; }
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 401 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE3x4; }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 402 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE4x4; }
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 404 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD1; }
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 405 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD1x1; }
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 406 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD2x1; }
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 407 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD3x1; }
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 408 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD4x1; }
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 409 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD2; }
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 410 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD1x2; }
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 411 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD2x2; }
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 412 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD3x2; }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 413 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD4x2; }
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 414 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD3; }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 415 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD1x3; }
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 416 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD2x3; }
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 417 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD3x3; }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 418 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD4x3; }
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 419 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD4; }
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 420 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD1x4; }
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 421 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD2x4; }
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 422 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD3x4; }
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 423 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD4x4; }
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 425 "gpu/lolfx-scanner.l"
{ return token::HT_INT1; }
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 426 "gpu/lolfx-scanner.l"
{ return token::HT_INT1x1; }
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 427 "gpu/lolfx-scanner.l"
{ return token::HT_INT2x1; }
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 428 "gpu/lolfx-scanner.l"
{ return token::HT_INT3x1; }
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 429 "gpu/lolfx-scanner.l"
{ return token::HT_INT4x1; }
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 430 "gpu/lolfx-scanner.l"
{ return token::HT_INT2; }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 431 "gpu/lolfx-scanner.l"
{ return token::HT_INT1x2; }
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 432 "gpu/lolfx-scanner.l"
{ return token::HT_INT2x2; }
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 433 "gpu/lolfx-scanner.l"
{ return token::HT_INT3x2; }
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 434 "gpu/lolfx-scanner.l"
{ return token::HT_INT4x2; }
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 435 "gpu/lolfx-scanner.l"
{ return token::HT_INT3; }
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 436 "gpu/lolfx-scanner.l"
{ return token::HT_INT1x3; }
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 437 "gpu/lolfx-scanner.l"
{ return token::HT_INT2x3; }
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 438 "gpu/lolfx-scanner.l"
{ return token::HT_INT3x3; }
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 439 "gpu/lolfx-scanner.l"
{ return token::HT_INT4x3; }
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 440 "gpu/lolfx-scanner.l"
{ return token::HT_INT4; }
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 441 "gpu/lolfx-scanner.l"
{ return token::HT_INT1x4; }
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 442 "gpu/lolfx-scanner.l"
{ return token::HT_INT2x4; }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 443 "gpu/lolfx-scanner.l"
{ return token::HT_INT3x4; }
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 444 "gpu/lolfx-scanner.l"
{ return token::HT_INT4x4; }
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 446 "gpu/lolfx-scanner.l"
{ return token::HT_UINT1; }
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 447 "gpu/lolfx-scanner.l"
{ return token::HT_UINT1x1; }
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 448 "gpu/lolfx-scanner.l"
{ return token::HT_UINT2x1; }
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 449 "gpu/lolfx-scanner.l"
{ return token::HT_UINT3x1; }
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 450 "gpu/lolfx-scanner.l"
{ return token::HT_UINT4x1; }
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 451 "gpu/lolfx-scanner.l"
{ return token::HT_UINT2; }
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 452 "gpu/lolfx-scanner.l"
{ return token::HT_UINT1x2; }
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 453 "gpu/lolfx-scanner.l"
{ return token::HT_UINT2x2; }
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 454 "gpu/lolfx-scanner.l"
{ return token::HT_UINT3x2; }
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 455 "gpu/lolfx-scanner.l"
{ return token::HT_UINT4x2; }
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 456 "gpu/lolfx-scanner.l"
{ return token::HT_UINT3; }
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 457 "gpu/lolfx-scanner.l"
{ return token::HT_UINT1x3; }
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 458 "gpu/lolfx-scanner.l"
{ return token::HT_UINT2x3; }
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 459 "gpu/lolfx-scanner.l"
{ return token::HT_UINT3x3; }
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 460 "gpu/lolfx-scanner.l"
{ return token::HT_UINT4x3; }
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 461 "gpu/lolfx-scanner.l"
{ return token::HT_UINT4; }
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 462 "gpu/lolfx-scanner.l"
{ return token::HT_UINT1x4; }
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 463 "gpu/lolfx-scanner.l"
{ return token::HT_UINT2x4; }
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 464 "gpu/lolfx-scanner.l"
{ return token::HT_UINT3x4; }
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 465 "gpu/lolfx-scanner.l"
{ return token::HT_UINT4x4; }
	YY_BREAK
/*
  * HLSL preprocessor directives
  * Gathered from http://msdn.microsoft.com/en-us/library/windows/desktop/bb943993%28v=vs.85%29.aspx
  */
case 363:
YY_RULE_SETUP
#line 472 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_DEFINE; }
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 473 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_ELIF; }
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 474 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_ELSE; }
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 475 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_ENDIF; }
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 476 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_ERROR; }
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 477 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_IF; }
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 478 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_IFDEF; }
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 479 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_IFNDEF; }
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 480 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_INCLUDE; }
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 481 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_LINE; }
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 482 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_PRAGMA; }
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 483 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_UNDEF; }
	YY_BREAK
/*
  * GLSL preprocessor directives
  */
case 375:
YY_RULE_SETUP
#line 489 "gpu/lolfx-scanner.l"
{ /* ignore for now */ }
	YY_BREAK
/*
  * LolFx preprocessor directives
  */
case 376:
YY_RULE_SETUP
#line 495 "gpu/lolfx-scanner.l"
{ return token::PRAGMA_LOLFX; }
	YY_BREAK
/*
  * HLSL reserved keywords
  * Gathered from http://msdn.microsoft.com/en-us/library/windows/desktop/bb509569%28v=vs.85%29.aspx
  */
case 377:
YY_RULE_SETUP
#line 502 "gpu/lolfx-scanner.l"
{ return token::HT_AUTO; }
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 503 "gpu/lolfx-scanner.l"
{ return token::HT_CATCH; }
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 504 "gpu/lolfx-scanner.l"
{ return token::HT_CHAR; }
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 505 "gpu/lolfx-scanner.l"
{ return token::HT_CLASS; }
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 506 "gpu/lolfx-scanner.l"
{ return token::HT_CONST_CAST; }
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 507 "gpu/lolfx-scanner.l"
{ return token::HT_DELETE; }
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 508 "gpu/lolfx-scanner.l"
{ return token::HT_DYNAMIC_CAST; }
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 509 "gpu/lolfx-scanner.l"
{ return token::HT_ENUM; }
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 510 "gpu/lolfx-scanner.l"
{ return token::HT_EXPLICIT; }
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 511 "gpu/lolfx-scanner.l"
{ return token::HT_FRIEND; }
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 512 "gpu/lolfx-scanner.l"
{ return token::HT_GOTO; }
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 513 "gpu/lolfx-scanner.l"
{ return token::HT_LONG; }
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 514 "gpu/lolfx-scanner.l"
{ return token::HT_MUTABLE; }
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 515 "gpu/lolfx-scanner.l"
{ return token::HT_NEW; }
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 516 "gpu/lolfx-scanner.l"
{ return token::HT_OPERATOR; }
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 517 "gpu/lolfx-scanner.l"
{ return token::HT_PRIVATE; }
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 518 "gpu/lolfx-scanner.l"
{ return token::HT_PROTECTED; }
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 519 "gpu/lolfx-scanner.l"
{ return token::HT_PUBLIC; }
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 520 "gpu/lolfx-scanner.l"
{ return token::HT_REINTERPRET_CAST; }
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 521 "gpu/lolfx-scanner.l"
{ return token::HT_SHORT; }
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 522 "gpu/lolfx-scanner.l"
{ return token::HT_SIGNED; }
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 523 "gpu/lolfx-scanner.l"
{ return token::HT_SIZEOF; }
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 524 "gpu/lolfx-scanner.l"
{ return token::HT_STATIC_CAST; }
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 525 "gpu/lolfx-scanner.l"
{ return token::HT_TEMPLATE; }
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 526 "gpu/lolfx-scanner.l"
{ return token::HT_THIS; }
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 527 "gpu/lolfx-scanner.l"
{ return token::HT_THROW; }
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 528 "gpu/lolfx-scanner.l"
{ return token::HT_TRY; }
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 529 "gpu/lolfx-scanner.l"
{ return token::HT_TYPENAME; }
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 530 "gpu/lolfx-scanner.l"
{ return token::HT_UNION; }
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 531 "gpu/lolfx-scanner.l"
{ return token::HT_UNSIGNED; }
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 532 "gpu/lolfx-scanner.l"
{ return token::HT_USING; }
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 533 "gpu/lolfx-scanner.l"
{ return token::HT_VIRTUAL; }
	YY_BREAK
/*
  * Various tokens
  */
case 409:
YY_RULE_SETUP
#line 539 "gpu/lolfx-scanner.l"
{ return token::T_INC; }
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 540 "gpu/lolfx-scanner.l"
{ return token::T_DEC; }
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 541 "gpu/lolfx-scanner.l"
{ return token::T_LE; }
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 542 "gpu/lolfx-scanner.l"
{ return token::T_GE; }
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 543 "gpu/lolfx-scanner.l"
{ return token::T_EQ; }
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 544 "gpu/lolfx-scanner.l"
{ return token::T_NE; }
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 545 "gpu/lolfx-scanner.l"
{ return token::T_LEFT; }
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 546 "gpu/lolfx-scanner.l"
{ return token::T_RIGHT; }
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 547 "gpu/lolfx-scanner.l"
{ return token::T_AND; }
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 548 "gpu/lolfx-scanner.l"
{ return token::T_OR; }
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 549 "gpu/lolfx-scanner.l"
{ return token::T_XOR; }
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 551 "gpu/lolfx-scanner.l"
{ return token::T_MULEQ; }
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 552 "gpu/lolfx-scanner.l"
{ return token::T_DIVEQ; }
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 553 "gpu/lolfx-scanner.l"
{ return token::T_MODEQ; }
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 554 "gpu/lolfx-scanner.l"
{ return token::T_ADDEQ; }
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 555 "gpu/lolfx-scanner.l"
{ return token::T_SUBEQ; }
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 556 "gpu/lolfx-scanner.l"
{ return token::T_LEFTEQ; }
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 557 "gpu/lolfx-scanner.l"
{ return token::T_RIGHTEQ; }
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 558 "gpu/lolfx-scanner.l"
{ return token::T_ANDEQ; }
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 559 "gpu/lolfx-scanner.l"
{ return token::T_XOREQ; }
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 560 "gpu/lolfx-scanner.l"
{ return token::T_OREQ; }
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 562 "gpu/lolfx-scanner.l"
{
    yylval->fval = std::atof(yytext);
    return token::FLOATCONSTANT;
}
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 566 "gpu/lolfx-scanner.l"
{
    yylval->uval = std::atoi(yytext);
    return token::UINTCONSTANT;
}
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 570 "gpu/lolfx-scanner.l"
{
    yylval->ival = std::atoi(yytext);
    return token::INTCONSTANT;
}
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 575 "gpu/lolfx-scanner.l"
{
    /* Copy token for now */
    yylval->sval = strdup(yytext);
    return token::IDENTIFIER;
}
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 581 "gpu/lolfx-scanner.l"
{ /* ignore whitespace */ }
	YY_BREAK
case 435:
/* rule 435 can match eol */
YY_RULE_SETUP
#line 582 "gpu/lolfx-scanner.l"
{ ++yylineno; }
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 583 "gpu/lolfx-scanner.l"
{ return token::T_ERROR; }
	YY_BREAK
/*
  * Ignore C comments
  */
case 437:
YY_RULE_SETUP
#line 589 "gpu/lolfx-scanner.l"
{ BEGIN(C_COMMENT); }
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 590 "gpu/lolfx-scanner.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 591 "gpu/lolfx-scanner.l"
{ }
	YY_BREAK
case 440:
/* rule 440 can match eol */
YY_RULE_SETUP
#line 592 "gpu/lolfx-scanner.l"
{ ++yylineno; }
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 593 "gpu/lolfx-scanner.l"
{ }
	YY_BREAK
/*
  * Ignore C++ comments
  */
case 442:
YY_RULE_SETUP
#line 599 "gpu/lolfx-scanner.l"
{ BEGIN(CPP_COMMENT); }
	YY_BREAK
case 443:
/* rule 443 can match eol */
YY_RULE_SETUP
#line 600 "gpu/lolfx-scanner.l"
{ ++yylineno; BEGIN(INITIAL); }
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 601 "gpu/lolfx-scanner.l"
{ }
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 603 "gpu/lolfx-scanner.l"
ECHO;
	YY_BREAK
#line 4147 "generated/lolfx-scanner.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(C_COMMENT):
case YY_STATE_EOF(CPP_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	LolFxfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	LolFxfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					LolFxrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) LolFxrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1633 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1633 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1632);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) LolFxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) LolFxalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		LolFxfree((void *) b->yy_ch_buf  );

	LolFxfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)LolFxalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)LolFxrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) LolFxalloc(new_size  );

		else
			(yy_start_stack) = (int *) LolFxrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *LolFxalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *LolFxrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void LolFxfree (void * ptr )
{
	free( (char *) ptr );	/* see LolFxrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 603 "gpu/lolfx-scanner.l"



lol::LolFxScanner::LolFxScanner(char const *command)
    : LolFxFlexLexer(0, 0),
      m_input(command)
{
}

lol::LolFxScanner::~LolFxScanner()
{
}

int lol::LolFxScanner::LexerInput(char* buf, int max_size)
{
    buf[0] = m_input[0];
    if (buf[0])
        ++m_input;
    return buf[0] ? 1 : 0;
}

#ifdef yylex
#undef yylex
#endif
int LolFxFlexLexer::yylex()
{
    std::cerr << "in LolFxFlexLexer::yylex() !" << std::endl;
    return 0;
}

int LolFxFlexLexer::yywrap()
{
    return 1;
}


