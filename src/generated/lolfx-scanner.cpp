#line 2 "generated/lolfx-scanner.cpp"

#line 4 "generated/lolfx-scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer LolFxFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *LolFxalloc (yy_size_t  );
void *LolFxrealloc (void *,yy_size_t  );
void LolFxfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 451
#define YY_END_OF_BUFFER 452
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1670] =
    {   0,
        0,    0,  444,  444,  450,  450,  378,  378,  452,  442,
      440,  441,  442,  442,  442,  442,  442,  442,  442,  437,
      437,  442,  442,  442,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  442,  438,  438,  439,  439,
      439,  439,  438,  439,  439,  439,  439,  439,  439,  438,
      438,  438,  438,  438,  439,  439,  438,  438,  442,  440,
      442,  444,  445,  446,  450,  449,  378,  377,  380,  380,
      378,  380,  440,  419,  427,  422,  432,  425,  414,  428,
      415,  429,  443,  448,  426,    0,  436,  437,  420,  416,

      418,  417,  421,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      129,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  134,  135,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  433,  424,  438,  439,  439,
      438,  439,  439,  439,  439,  439,  439,  439,   99,  439,
      439,  439,  439,  439,  438,  439,  104,  105,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  438,  439,  438,
      439,  439,  439,  438,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  438,  434,  423,  440,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  444,
      447,  450,  378,  379,  378,    0,    0,    0,    0,  435,
      430,  431,  439,  152,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  133,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  137,  439,  439,  439,  439,  439,

      395,  439,  439,  439,  439,  139,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      408,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  438,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      103,  439,  439,  107,  439,  439,  439,  439,  439,  439,
      439,  439,  109,  439,  438,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  438,    0,    0,    0,    0,  366,    0,    0,
        0,    0,    0,    0,    0,    0,  439,  439,  382,  439,
      121,  439,  439,  439,  123,  439,  439,  439,  384,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  131,  389,  439,  439,  439,  439,  439,  439,
      439,  392,  439,  173,  439,  439,  439,  439,  321,  326,
      331,  336,  439,  178,  393,  439,  439,  439,  439,  439,
      185,  439,  439,  439,  188,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  406,  439,  439,  231,  439,
      147,  439,  439,  439,  439,  439,  439,  439,  439,  149,
      439,  439,  438,  439,   91,  439,  439,   93,  439,  439,
      439,  439,  439,  439,  439,  439,  101,  439,    4,  439,
      439,  439,  439,  439,  439,  439,   45,   62,   66,   70,
      439,  439,  439,  438,  439,  439,  439,  439,  439,  439,
      439,  439,   89,  117,  439,  439,  439,  439,   59,   60,
       61,  119,  439,  438,    0,    0,    0,    0,    0,  366,
      366,  366,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  439,  439,  439,  241,  246,  251,  256,

      122,  439,  439,  383,  439,  439,  385,  439,  439,  439,
      125,  439,  439,  439,  439,  439,  439,  439,  439,  167,
      439,  439,  439,  169,  132,  439,  439,  439,  439,  439,
      439,  136,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  191,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  401,  439,  439,  211,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  407,
      439,  439,  439,  341,  346,  351,  356,  439,  410,  236,
      439,  412,  439,  439,  439,  439,  150,  439,   92,   50,

       51,   52,  439,   95,  439,  439,  439,   77,   81,   85,
      439,   74,   75,   76,   90,  102,   43,  106,  439,  439,
       53,   54,   55,  439,  439,  439,  439,  439,  439,    2,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
       56,   57,   58,  439,  120,    0,  362,  363,    0,    0,
      366,  366,    0,  370,    0,    0,    0,  375,  374,    0,
        0,    0,  373,    0,    0,  439,  439,  439,  439,  439,
      439,  439,  155,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  387,  439,  439,  439,  130,  301,  306,
      311,  316,  439,  439,  168,  261,  266,  271,  276,  391,

      439,  439,  439,  439,  175,  439,  322,  327,  332,  337,
      323,  328,  333,  338,  324,  329,  334,  339,  325,  330,
      335,  340,  439,  439,  180,  439,  182,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      399,  439,  439,  439,  439,  140,  439,  439,  439,  439,
      439,  439,  210,  402,  403,  439,  214,  215,  145,  146,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  237,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  100,  439,  439,    6,   63,
       64,   65,   67,   68,   69,   71,   72,   73,  439,  439,

      439,  110,    3,    5,  115,  439,  116,  439,  439,  439,
      439,    0,  364,  365,  366,  366,    0,  370,    0,  372,
        0,  376,    0,    0,  439,  439,  439,  242,  247,  252,
      257,  243,  248,  253,  258,  244,  249,  254,  259,  245,
      250,  255,  260,  439,  157,  439,  439,  159,  439,  439,
      439,  439,  127,  439,  128,  439,  281,  286,  291,  296,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      170,  439,  439,  439,  439,  439,  179,  439,  394,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  193,  397,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      206,  439,  439,  439,  217,  439,  439,  439,  439,  232,
      439,  342,  347,  352,  357,  343,  348,  353,  358,  344,
      349,  354,  359,  345,  350,  355,  360,  148,  439,  439,
      439,  413,  439,  439,  439,  439,   97,   98,   78,   79,
       80,   82,   83,   84,   86,   87,   88,  439,  439,   44,
      439,  439,  206,  439,  221,  118,  439,   49,  361,  365,
      366,    0,  371,    0,  439,  439,  439,  439,  124,  439,
      439,  439,  439,  439,  439,  126,  439,  439,  439,  439,
      439,  439,  302,  307,  312,  317,  303,  308,  313,  318,
      304,  309,  314,  319,  305,  310,  315,  320,  439,  390,

      262,  267,  272,  277,  263,  268,  273,  278,  264,  269,
      274,  279,  265,  270,  275,  280,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  396,  439,  439,  439,  439,
      439,  439,  439,  196,  439,  439,  439,  198,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  405,  439,  439,  439,  439,  233,  409,  411,  439,
      439,  240,  439,   94,   96,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  361,  369,  371,  381,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  282,  287,  292,  297,  283,  288,  293,  298,

      284,  289,  294,  299,  285,  290,  295,  300,  439,  439,
      439,  439,  439,  177,  439,  183,  439,  439,  439,  439,
      439,  439,  439,  398,  439,  439,  439,  197,  439,  439,
      439,  141,  142,  143,  439,  439,  439,  439,  439,  439,
      439,  218,  222,  224,  228,  439,  439,  439,  439,  439,
       48,   47,  439,  439,  439,  439,  439,  439,   46,  111,
      112,  113,  439,  439,  439,  439,  439,  439,  439,  439,
      381,  439,  439,  154,  439,  439,  439,  439,  439,  386,
      439,  439,  439,  439,  439,  439,  174,  176,  181,  439,
      439,  439,  187,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  212,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
       14,   15,   16,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,    1,   20,   21,   22,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  172,  439,  439,  186,  439,  190,  192,  439,
      439,  439,  439,  439,  201,  203,  205,  439,  144,  439,
      439,  439,  404,  439,  219,  439,  439,  439,  226,  229,
      234,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,   37,  439,  439,  439,  114,  439,

      439,  439,  439,  439,  439,  439,  153,  439,  158,  439,
      439,  439,  439,  439,  166,  388,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  208,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  239,
      439,  439,   38,  439,  439,   17,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,   39,  439,
      439,   23,  439,  439,  161,  439,  162,  439,  439,  439,
      439,  439,  138,  189,  439,  439,  439,  439,  439,  439,
      439,  439,  207,  439,  439,  220,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  108,  439,

      439,  439,  439,   26,  439,   30,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      171,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  223,  225,  439,  439,  235,  238,  439,  439,
      439,   28,   31,  439,   10,  439,   11,  439,  439,  439,
      439,  439,  439,  439,  439,   29,   32,  439,  439,  439,
      439,  439,  439,  439,  184,  194,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,   18,   19,  439,
      439,  439,    7,  439,  439,  439,    8,  439,  439,   24,
       25,  439,  439,  439,  439,  160,  439,  439,  165,  400,

      195,  439,  439,  202,  204,  439,  213,  216,  227,  230,
      439,  439,  439,  439,   40,  439,   33,  439,  439,  439,
      439,  156,  439,  164,  439,  439,  439,   41,   35,  439,
      439,  439,  439,    9,   42,   36,  439,  439,  439,  200,
      439,  439,  439,  439,  439,  439,  439,  199,  439,  439,
      439,   27,  439,  439,  439,  439,   12,   13,  439,  439,
      439,  439,  439,  151,  439,  209,   34,  163,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    7,    8,    1,    1,
        1,    9,   10,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   19,   19,   19,   19,    1,    1,   20,
       21,   22,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,   49,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,    1,   77,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[78] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    4,    1,
        1,    1,    3,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static yyconst flex_int16_t yy_base[1684] =
    {   0,
        0,   76,   76,   77, 3032, 3031,   78,   86, 3033, 3036,
       91, 3036, 3011, 3010,   75, 3009,   77,   79,   88,   82,
       96,   82, 3008,   83,   78,   83,  145,   91,   97,  140,
       97,   84,  142,    0,  150,  150,  189,  147,  188,  197,
      248,  234,  158,  218,   99,  111,  262,  300,  178,  349,
      262,  327,  376,  326,  310,  264,  214,  383,  273,  432,
      289,  413,  441,  491,  415,  388,  459,  386,  174,  396,
      514,    0, 3036, 3015,    0, 3036,    0,    0, 3036, 3018,
      182,  221,  138, 3036, 3036, 3036, 3036, 3036, 3036, 3036,
     3036, 3036, 3036, 3036, 3036,  508, 3036,  536, 3005, 3036,

     3036, 3036, 3004,    0,  138,  200,  196,  255,  257,  270,
      289,  278,  425,  292,  306,  330,  337,  528,  537,  342,
      374,  353,  371,  388,  406,  471,  418,  482,  488,  508,
      513,  507,  532,  540,  544,  547,    0,  574,  546,  551,
      547,  552,  560,  551,  566,  564,  573,  559,  589,  567,
      587,  600,  595,  579,  614,  576,  610,  598,  630,  606,
      601,  634,  629,  621,  651,  637,  644,  632,  636,  652,
      659,  669,  659,  676,  670, 3036, 3036,  679, 2954,  669,
      689, 2968,  682,  684,  719,  705,  687, 2971,  707, 2966,
      691,  711,  712,  718,  728, 2963,    0,  750, 2968, 2963,

     2942,  726,  724, 2962,  738,  730,  764,  740,  764,  773,
      807,  739, 2950,  788, 2962,  744,  815,  801,  762,  822,
      814, 2958, 2944,  822,  836,  787,  809, 3036, 3036,  890,
      849,  872, 2956,  837,  211, 2951, 2941, 2944, 2952,    0,
     3036,    0,    0, 3036,  244,  877,  878,  329, 2950,  931,
     3036, 3036,  842, 2955,  849,  852,  866,  879,  879,  885,
      886,  898,  896,  883,  889,  898,  899,  916,  914,  935,
      932,  918,  936,  939,  939,  924,  942,  939,  933,  935,
      944,  931,  950,    0,  947,  935,  941,  940,  935,  951,
      946,  950,  942,  952,  999,  983,  982,  972,  995,  992,

        0,  984,  994,  988,  984,  987,  994,  987, 1002,  994,
     1006,  988,  991, 1000,  993, 1005, 1001, 1015,  999, 2954,
     1024, 1002, 1018, 1013, 1026, 1028, 1038, 1048, 1036, 1035,
     1047, 1038, 1053, 1052, 1045, 1042, 1044, 1049, 1064, 1061,
        0, 1062, 1049, 1064, 1053, 1066, 1062, 1058, 1065, 1080,
     1097, 1101, 1093, 1079, 2935, 1098, 1110, 2949, 1107, 1095,
     1097, 1117, 1116, 2931, 1118, 2947, 1116, 1103, 2929, 1122,
        0, 2940, 1103, 1160, 2946, 2933, 2942, 2929, 2927, 1140,
     2933, 1126, 1116, 2938, 1119, 1138, 1121, 1141, 2925, 1152,
     2921, 1142, 1148, 1166, 1152, 1168, 2925, 2934, 2911, 1183,

     1172, 1168, 1161, 2929,  373, 2930, 2915,  442, 2929, 2917,
     2929, 2925, 2910,  461, 2923, 1195, 1167, 1176,    0, 1184,
     1224, 1183, 1190, 1196,    0, 1190, 1199, 1188,    0, 1188,
     1208, 1215, 1208, 1221, 1211, 1218, 1231, 1239, 1232, 1230,
     1239, 1231,    0,    0, 1236, 1228, 1242, 1228, 1236, 1236,
     1248,    0, 1238,    0, 1236, 1245, 1241, 1242, 1239, 1241,
     1253, 1256, 1266, 1284,    0, 1277, 1286, 1273, 1274, 1277,
        0, 1295, 1276, 1283,    0, 1287, 1280, 1292, 1301, 1299,
     1297, 1302, 1290, 1290, 1306, 1297, 1304, 1312, 1299, 1303,
     1309, 1324, 1335, 1321, 1337, 1329, 1335, 1345, 1337, 1349,

     1350, 1349, 1342, 1345, 1337,    0, 1336, 1346,    0, 1359,
     1399, 1347, 1357, 1361, 1368, 1370, 1374, 1391, 1376,    0,
     1378, 1395,    0, 2917, 1413, 1393,  901,    0, 1392, 1391,
     1404, 1393, 1414, 1371, 1404, 1424,    0, 1416,    0, 1402,
     2909, 1403, 2906, 2907, 1435, 2901,    0, 2897, 2896, 2895,
     2897, 1409, 2909,    0, 1424, 1416, 1423, 2896, 1433, 2900,
     1434, 1424,    0, 1463, 1431, 2898, 1458, 2904,    0,    0,
        0,    0, 1442,    0, 2903, 2905, 2905, 2900, 2893,    0,
     2902, 2902, 2893, 2899, 2896, 2897, 2882, 2894, 2894, 2889,
      285, 2892, 2892, 1444, 1442, 1447, 1443, 1444, 1445, 1446,

        0, 1453, 1468,    0, 1472, 1463,    0, 1465, 1468, 1461,
     2895, 1469, 1469, 1472, 1480, 1467, 1469, 1475, 1485, 1508,
     1482, 1489, 1479,    0, 1529, 1512, 1505, 1507, 1509, 1521,
     1525,    0, 1515, 1539, 1543, 1547, 1552, 1543, 1546, 1531,
     1528, 1541, 1544, 1556, 1543, 1543, 1545, 1560, 1563, 1548,
     1549, 1550, 1568, 1569, 1555, 1554, 1570, 1558, 1569, 1583,
     1579, 1581, 1566, 1585, 1601, 1603,    0, 1604, 1603,    0,
     1614, 1614, 1611, 1599, 1612, 1616, 1613, 1622, 1606,    0,
     1618, 1621, 1626, 1604, 1605, 1606, 1607, 1614,    0,    0,
     1624,    0, 1621, 1616, 1640, 1633,    0, 2892,    0,    0,

        0,    0, 1628, 2893, 1647, 1650, 1645, 2868, 2867, 2866,
     1659,    0,    0,    0,    0, 1679,    0,    0, 2880, 2876,
        0,    0,    0, 2867, 1682, 1685, 1688, 2873, 1646,    0,
     1666, 1672, 1682, 2877, 1668, 2863, 1686, 1677, 1678, 2871,
        0,    0,    0, 2868,    0, 2867, 3036, 3036, 2874, 2861,
     2872, 2872, 2855,    0, 2862, 2868, 2864, 3036, 3036, 2866,
     2918,  581, 3036, 2864, 2864, 1678, 1697, 1679, 1707, 1711,
     1715, 1724,    0, 1708, 1703, 1719, 2868, 1724, 1725, 1728,
     1727, 1712, 1714,    0, 1715, 1732, 1718, 1748, 1714, 1715,
     1721, 1722, 1744, 1739,    0, 1726, 1727, 1728, 1729,    0,

     1738, 1737, 1760, 1768,    0, 1769,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1770, 1762,    0, 1759,    0, 1779, 1784, 1768,
     1771, 1773, 1773, 1784, 1773, 1784, 1773, 1789, 1790, 1781,
        0, 1793, 1798, 1786, 1786,    0, 1797, 1803, 1808, 1807,
     1790, 1806,    0,    0,    0, 1813, 2867,    0, 1805,    0,
     1809, 1811, 1813, 1835, 1829, 1836, 1830, 1851, 1855, 1864,
     1869, 1853, 1862,    0, 1866, 1861, 1862, 2845, 1866, 1855,
     1857, 1874, 1885, 1888, 1892, 1896, 2864, 2859,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 2847, 1877,

     1891,    0, 1879,    0, 1877, 2842,    0, 1894, 1894, 2856,
     2853, 2854, 3036,    0,    0, 2852, 2853,    0, 2855, 3036,
     2840, 3036, 2902, 2847, 1888, 1902, 1909,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1893,    0, 1908, 1901, 1901, 1896, 1915,
     1898, 1913,    0, 1914,    0, 1914, 1899, 1906, 1907, 1908,
     1959, 1968, 1972, 1976, 2852, 1929, 1980, 1985, 1989, 1993,
        0, 1965, 1990, 1988, 1973, 1991,    0, 1990,    0, 1993,
     1981, 1993, 1981, 1999, 1982, 2001, 2002, 1986,    0,    0,
     2000, 1980, 1989, 1992, 2008, 1995, 1993, 2008, 1993, 1996,

     2050, 2031, 2044, 2030,    0, 2028, 2046, 2061, 2047,    0,
     2052,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 2054, 2041,
     2052,    0, 2056, 2831, 2058, 2058,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 2836, 2831,    0,
     2060, 2833, 2101, 2838, 2105,    0, 2828,    0,    0,    0,
        0, 2840,    0, 2830, 2055, 2069, 2063, 2079,    0, 2101,
     2097, 2100, 2099, 2090, 2093,    0, 2100, 2114, 2123, 2128,
     2132, 2151,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 2135,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 2120, 2122, 2144, 2147,
     2146, 2151, 2148, 2139, 2152,    0, 2136, 2152, 2151, 2155,
     2155, 2157, 2157,    0, 2145, 2146, 2147,    0, 2165, 2149,
     2166, 2168, 2169, 2170, 2188, 2156, 2175, 2192, 2195, 2200,
     2201,    0, 2203, 2204, 2206, 2190, 2211,    0,    0, 2212,
     2213,    0, 2838,    0,    0, 2822, 2222, 2215, 2827, 2215,
     2216, 2217, 2819, 2211, 2825, 2234,    0, 3036,    0,    0,
     2222, 2239, 2240, 2231, 2241, 2254, 2238, 2256, 2239, 2243,
     2259, 2259,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 2265, 2259,
     2263, 2251, 2262,    0, 2261,    0, 2263, 2256, 2274, 2260,
     2268, 2277, 2285,    0, 2270, 2287, 2286,    0, 2281, 2282,
     2022,    0,    0,    0, 2288, 2304, 2306, 2291, 2301, 2294,
     2311, 2873, 2316, 2317,    0, 2317, 2318, 2303, 2317, 2321,
        0,    0, 2833, 2832, 2831, 2813, 2812, 2306,    0,  336,
     2315,    0, 2826, 2329, 2826, 2826, 2825, 2824, 2806, 2805,
        0, 2329, 2322,    0, 2318, 2323, 2338, 2347, 2345,    0,
     2334, 2348, 2358, 2348, 2367, 2365,    0,    0,    0, 2370,
     2363, 2365,    0, 2369, 2357, 2365, 2360, 2360, 2376, 2377,

     2379, 2382, 2383, 2384, 2373, 2385, 2372, 2392, 2825, 2374,
     2396,  698, 2386, 2387, 2392, 2408, 2409, 2405, 2411, 2420,
     2823,  422,    0, 2817, 2820, 2418, 2803, 2812, 2801, 2799,
     2812, 2808, 2809, 2423,    0, 2813,  425,    0, 2807, 2810,
     2409, 2410, 2429, 2416, 2430, 2429, 2432, 2435, 2428, 2424,
     2423, 2440,    0, 2425, 2424,    0, 2434,    0,    0, 2429,
     2811, 2430, 2435, 2456, 2460, 2466,    0, 2468,    0, 2470,
     2459, 2461,    0, 2460,    0, 2459, 2466, 2467, 2485, 2486,
        0, 2485, 2486, 2474, 2792, 2791, 2789, 2802, 2800, 2800,
     2471, 2786, 2802, 2784, 2800, 2797, 2798, 2793,  657, 2779,

     2778, 2776, 2789, 2787, 2787, 2473,    0, 2475,    0, 2480,
     2486, 2482, 2481, 2483,    0,    0, 2499, 2497, 2505, 2496,
     2516, 2520, 2503, 2512, 2533, 2518, 2519, 2521,    0, 2535,
     2521, 2536, 2517, 2545, 2546, 2530, 2531, 2549, 2538,    0,
     2773, 2772, 2785, 2778, 2771, 2770, 2549, 2765, 2752, 2751,
     2728, 2723, 2737, 2703, 2701, 2705, 2694, 2688, 2701, 2698,
     2695, 2697, 2537, 2550,    0, 2552,    0, 2537, 2540, 2552,
     2544, 2551,    0,    0, 2552, 2572, 2570, 2579, 2566, 2573,
     2574, 2584,    0, 2594, 2590,    0, 2572, 2573, 2581, 2584,
     2590, 2584, 2696, 2304, 2179, 2127, 2057, 2026,    0, 2018,

     2027, 2015, 2021, 2019, 2007,    0, 1911, 1927, 1912, 1905,
     1887, 1144, 1145, 1141, 2600, 2600, 2594, 2592, 2610, 2607,
        0, 2599, 2609, 2597, 2612, 2597, 2616, 2627, 2628, 2616,
     2617, 2638,    0,    0, 2646, 2647,    0,    0, 1131, 1084,
     1081,    0,    0, 1080,  974,  925,  853,  859,  851,  833,
      842,  798,  762,  760,  763,    0,    0,  759, 2645, 2646,
     2632, 2648, 2634, 2632,    0,    0, 2638, 2636, 2654, 2655,
     2637, 2639, 2651, 2662, 2650, 2644, 2645,    0,    0,  770,
      762,  750,    0,  710,  689,  708,    0,  594,  523,    0,
        0,  494,  489, 2670, 2655,    0, 2670, 2673,    0,    0,

        0, 2678, 2680,    0,    0, 2677,    0,    0,    0,    0,
      461,  454,  454,  431,    0,  417,  361,  350,  324,  309,
     2672,    0, 2697,    0, 2698, 2686, 2686,    0,    0,  300,
      287,  262,  246,    0,    0,    0, 2701, 2687, 2691,    0,
     2690,  226,  207,  195,  190, 2705, 2708,    0, 2714,  163,
      157,    0,  138, 2711, 2711, 2698,    0,    0,  118, 2702,
     2717, 2718,   68,    0, 2706,    0,    0,    0, 3036, 2774,
     2779, 2784,  101, 2789, 2794, 2799, 2804, 2809, 2814, 2819,
     2824, 2829, 2834
    } ;

static yyconst flex_int16_t yy_def[1684] =
    {   0,
     1669,    1, 1670, 1670, 1671, 1671, 1672, 1672, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1669, 1673, 1673,   27, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673,   41, 1673, 1673, 1673, 1673, 1673, 1669, 1669,
     1669, 1674, 1669, 1669, 1675, 1669, 1676, 1676, 1669, 1669,
     1676, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,

     1669, 1669, 1669, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1669, 1669, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,

     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1674,
     1669, 1675, 1676, 1669, 1676, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,

     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,

     1673, 1673, 1673, 1669, 1669, 1669, 1669, 1677, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,

     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1669, 1669, 1669, 1669, 1669, 1677,
     1677, 1677, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1678, 1669, 1669, 1673, 1673, 1673, 1673, 1673, 1673, 1673,

     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,

     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1669, 1669, 1669, 1669, 1669,
     1677, 1677, 1669, 1679, 1669, 1669, 1669, 1669, 1669, 1669,
     1678, 1678, 1669, 1669, 1669, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,

     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,

     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1669, 1669, 1680, 1677, 1677, 1669, 1679, 1669, 1669,
     1669, 1669, 1669, 1669, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,

     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1681, 1680,
     1677, 1669, 1682, 1669, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,

     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1681, 1669, 1682, 1683,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,

     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1683, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,

     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,

     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,

     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,

     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,    0, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669
    } ;

static yyconst flex_int16_t yy_nxt[3114] =
    {   0,
       10,   11,   12,   11,   13,   10,   14,   15,   16,   17,
       18,   10,   19,   20,   21,   21,   21,   21,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   34,   35,   36,   37,   38,   39,   34,   40,
       41,   42,   43,   44,   45,   34,   34,   34,   46,   34,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   34,
       34,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   68,   68,   69,   70,   73,   73,
       78,   71,   86,   79,   74,   74,   89,   81,   78,   91,
       80,   82,   83,   96,   83,   87,   93,   90,   80,   92,

       94,   99,  100,  102,  103,  104,  135,   96,   95,   98,
       98,   98,   98,   98,   98,  105,  108,  119,  106,  109,
      107,  120,  110,  132,   97,  111,  136,  121,  175,  112,
      124,  176,  125,  133,  135,  122,  134,  123,   97,   83,
     1667,   83,  126,  105,  108,  119,  106,  109,  107,  120,
      110,  132,   97,  111,  136,  121,  175,  112,  124,  177,
      125,  133,  127,  122,  134,  123,   97,  113,  114,  137,
      126,  115,  141,  128,  116,  253,  129,  138,  117,  130,
      139,  118, 1663,  245,  147,  131,  140,  246,  169,  148,
      127, 1659,  142,  170,  228,  113,  114,  137,  171,  115,

      141,  128,  116,  253,  129,  138,  117,  130,  139,  118,
      149,  143,  147,  131,  140,  144,  169,  148,  150,  154,
      142,  170,  247,  155,  151,  145,  171,  152,  183, 1658,
      153,  146,  184,  156,  254, 1657,  141,  255,  149,  143,
     1653,  157,  185,  144,  172,  245,  150,  154,  173,  246,
      229,  155,  151,  145,  174,  152,  142,  164,  153,  146,
      165,  156,  254,  166,  203,  255,  408, 1652,  204,  157,
      158, 1651,  172,  167,  409,  248,  173,  159,  160,  249,
      168,  256,  174,  161,  142,  164,  762,  763,  165,  162,
     1650,  166,  163,  257,  139,  124,  258,  125,  158,  105,

      140,  167,  106, 1645,  107,  159,  160,  126,  168,  256,
      147,  161,  178,  178,  201,  148,  259,  162,  178,  260,
      163,  257,  139,  191,  258,  125, 1644,  105,  202,  178,
      106,  179,  107,  108,  263,  126,  109,  137,  147,  110,
     1643,  264,  111,  206,  259,  138,  112,  260,  135,  127,
      178,  178,  265, 1642,  208,  208,  178,  208,  208,  266,
      128,  108,  263,  129,  180,  197,  130,  181,  136,  264,
      111,  182,  131,  198,  112,  119,  135,  192,  199,  120,
      265,  200,  273, 1636,  196,  121, 1327,  266,  193,  276,
      414,  194,  415,  122,  130,  123,  136,  230, 1635,   83,

      131,  231,  132,  186, 1328,  143,  277,  187,  274,  144,
      273,  188,  133,  189,  172,  134,  275,  276,  173,  145,
      190,  122, 1634,  123,  174,  146,  178,  178,  278, 1633,
      132,  576,  178,  143,  277,  154,  274,  144,  223,  155,
      133,  577,  224,  195,  275,  169,  173,  205,  279,  156,
      170,  282,  225,  146,  149,  171,  278,  157,  227,  227,
      227,  227,  150,  210,  178,  261,  262,  211,  151,  178,
     1632,  152, 1386,  219,  153, 1401,  279,  156,  220,  282,
      178, 1631,  207,  221, 1387,  157,  222, 1402,  175, 1388,
      150,  212, 1403,  261,  262,  581,  151,  208,  208,  209,

      208,  208,  153,  213, 1630,  582,  208,  208,  280,  208,
      214,  215,  281,  216,  164,  232,  226,  165,  283,  588,
      166,  250,  250,  250,  250,  250,  250,  284, 1629,  589,
      167,  227,  227,  227,  227, 1628,  280,  168,  285, 1620,
      281,  286,  164,  287, 1619,  217,  283,   96,  166,   98,
       98,   98,   98,   98,   98,  284,  208,  208,  218,  208,
      208,  267,  268,  269,  270,  168,  285,  233,  234,  286,
      271,  287,  235,  288,  272,  236,  289,  290,   97,  237,
      291,  296,  762,  763,  238,  239,  297, 1618,  298,  267,
      268,  269,  270,  299,  300,  301,  302,  304,  271,  305,

      306,  288,  272,  303,  289,  290,   97,  292,  291,  296,
      293,  294,  309,  307,  297,  295,  298,  310,  314,  315,
      320,  299,  300,  301,  302,  304,  311,  305,  306,  308,
      312,  303,  324,  321,  327,  292,  313,  329,  293,  294,
      309,  307,  316,  295,  317,  310,  314,  315,  320,  318,
      322,  323,  325,  328,  311,  319,  330,  308,  312,  332,
      324,  321,  327,  333,  313,  329,  326,  337, 1617,  342,
      316,  343,  317,  331,  339,  334,  338,  318,  322,  323,
      325,  328,  344,  319,  330,  335,  340,  332,  345,  347,
      341,  333,  346,  348,  326,  337,  336,  342,  350,  343,

      353,  331,  339,  334,  338,  257,  351, 1455,  349,  352,
      344, 1375, 1376,  335,  340,  258,  345,  347,  341,  264,
      346,  348,  261,  262,  336, 1456,  350,  273,  353,  354,
      354,  278,  270,  356,  351,  354,  349,  352,  271,  354,
      354,  274,  272,  357,  282,  354,  354,  360,  283,  275,
      359,  262,  267,  268,  269,  363,  354,  284, 1616,  367,
      362,  297,  369, 1615,  289,  298,  271, 1614,  302,  274,
      272,  306,  368,  324,  332,  303,  370,  365,  354,  354,
      267,  268,  361,  292,  354,  371,  293,  294,  307,  297,
      311,  295,  289,  380,  312,  354,  302,  343,  379,  383,

      313,  388,  392,  382,  308,  385,  385, 1613,  385,  385,
      330,  292, 1612,  315,  373,  294,  307,  353,  386,  374,
     1611,  375,  312,  354,  354,  395, 1593,  331,  313,  354,
     1592,  339,  308,  384, 1591,  316, 1590,  317,  330,  334,
      354,  315,  318,  340,  347,  402,  348,  341,  319,  335,
      232, 1589,  344,  385,  385,  390,  385,  385,  345,  339,
      336,  349,  346,  316,  397,  317,  351,  334,  417,  352,
      318,  394,  347,  232,  400,  341,  387,  335,  247,  247,
      396,  403,  403,  403,  403,  419,  345,  420,  393,  349,
      346,  230, 1588,   83,  401,  231,  417,  352,  405,  421,

      406,  422,  233,  234,  407, 1587,  423,  235, 1586, 1585,
      236,  424,  425,  419,  237,  420,  700,  701,  702,  238,
      239, 1584,  426,  427,  428,  233,  234,  421,  429,  422,
      235,  248,  248,  236,  423,  249,  249,  237,  430,  424,
      425,  431,  238,  239,  250,  250,  250,  250,  250,  250,
      426,  427,  428,  432,  433,  434,  429,  435,  436,  437,
      438,  439,  440,  441,  442,  443,  430,  444,  445,  431,
      446,  447,  448,  449,  450,  451,  452,  453,  454,  455,
      456,  432,  433,  434,  457,  435,  436,  437,  438,  439,
      440,  441,  442,  443,  458,  444,  445, 1583,  446,  447,

      448,  449,  450,  451,  452,  453,  454,  455,  456,  464,
      465,  466,  457,  459,  460,  461,  462,  467,  468,  469,
      470,  471,  458,  472,  473,  463,  474,  475,  476,  477,
      478,  479,  480,  481,  482,  483,  484,  464,  465,  466,
      485,  486, 1582,  490,  491,  467,  468,  469,  470,  471,
      492,  472,  473,  463,  474,  475,  476,  477,  478,  479,
      480,  481,  482,  483,  484,  493,  488,  494,  485,  486,
      489,  490,  491,  495,  496,  497,  498,  499,  492,  501,
      502,  503,  504,  505,  506,  507,  508,  509,  510,  500,
      511,  512,  514,  493,  488,  494,  515,  516,  489,  517,

      513,  495,  496,  497,  498,  499,  518,  501,  502,  503,
      504,  505,  506,  507,  508,  509,  510,  500,  511,  512,
      514,  519,  520,  521,  515,  516,  522,  517,  513,  523,
      523,  421,  422,  425,  518,  523,  428,  433,  434,  435,
      438,  440,  443,  447,  448,  457,  523, 1581, 1580,  519,
      520,  521,  470,  473,  522,  548,  549,  550, 1579,  525,
      526,  528,  478,  486,  529,  530,  531,  532,  533,  535,
      537,  538,  540,  542,  459,  460,  461,  462,  492,  466,
      552,  473,  499,  501,  554,  554,  463,  554,  554,  505,
      555,  556,  509,  511,  500,  512,  591,  520,  569,  570,

      571,  522,  594,  595,  513, 1578,  557,  466, 1558,  596,
      499,  561, 1557, 1556,  463,  601,  602,  562,  603,  604,
      563,  564,  559,  565,  517,  572,  605,  606,  607,  573,
      594,  595,  513,  574,  574,  574,  574,  596,  597,  598,
      599,  600,  608,  601,  602,  609,  603,  604,  592,  611,
      612,  613,  517,  614,  605,  606,  607,  610,  593,  615,
      616,  617,  618,  619,  620,  621,  622,  623,  624,  625,
      608,  626,  627,  609,  628,  629,  630,  611,  612,  613,
      631,  614,  632,  633,  634,  610,  635,  615,  616,  617,
      618,  619,  620,  621,  622,  623,  624,  625,  636,  626,

      627,  637,  628,  629,  630,  638,  639,  641,  631,  642,
      632,  633,  634,  643,  635,  644,  645,  646,  647,  648,
      649,  650,  651,  652,  640,  653,  636,  654,  655,  637,
      656,  657,  658,  638,  639,  641,  659,  642,  660,  661,
      662,  643,  663,  644,  645,  646,  647,  648,  649,  650,
      651,  652,  640,  653,  664,  654,  655,  665,  656,  657,
      658,  666,  667,  668,  659,  669,  660,  661,  662,  670,
      663,  671,  673,  674,  675,  672,  676,  677,  678,  679,
      680,  681,  664,  688,  682,  665,  708,  709,  710,  666,
      667,  668,  689,  669,  683,  690,  691,  670,  692,  671,

      673,  674,  675,  672,  676,  677,  678,  679,  680,  681,
      693,  688,  682,  684,  685,  686,  687,  694,  695,  696,
      689,  697,  683,  690,  691,  601,  692,  597,  598,  599,
      600,  606,  611,  612,  613,  614,  617,  619,  693,  712,
      713,  714,  624,  625,  632,  694,  695,  696,  645,  697,
      721,  722,  723,  699,  651,  659,  665,  674,  675,  703,
      704,  612,  705,  706,  707,  711,  679,  688,  697,  766,
      715,  716,  718,  741,  742,  743,  729,  684,  685,  686,
      687,  767,  731,  732,  733,  735,  737,  768,  769,  770,
      771,  772,  773,  774,  738,  739,  745,  766,  775,  776,

      777,  778,  779,  781,  782,  783,  784,  785,  786,  767,
      787,  788,  793,  794,  795,  768,  769,  770,  771,  772,
      773,  774,  789,  790,  791,  792,  775,  776,  777,  778,
      779,  781,  782,  783,  784,  785,  786,  800,  787,  788,
      793,  794,  795,  796,  797,  798,  799,  801,  802,  803,
      804,  805,  806,  807,  808,  809,  810,  811,  812,  813,
      814,  815,  816,  817,  818,  800,  819,  820,  821,  822,
      823,  824,  826,  827,  828,  801,  802,  803,  804,  805,
      806,  829,  830,  831,  832,  825,  833,  834,  837,  838,
      835,  839,  840,  841,  842,  843,  844,  845,  823,  824,

      826,  827,  828,  836,  846,  847,  848,  849,  850,  829,
      830,  831,  832,  825,  833,  834,  837,  838,  835,  839,
      840,  841,  842,  843,  844,  845,  851,  852,  853,  854,
      855,  836,  846,  847,  848,  849,  850,  856,  857,  858,
      859,  860,  861,  862,  863,  864,  865,  866,  867,  868,
      869,  870,  871,  872,  851,  852,  853,  854,  855,  873,
      874,  875,  876,  877,  776,  856,  857,  858,  859,  860,
      861,  862,  863,  864,  865,  866,  867,  868,  869,  870,
      871,  872,  782,  783,  786,  788,  831,  873,  874,  875,
      876,  877,  879,  796,  797,  798,  799,  890,  891,  892,

      893,  894,  895,  896,  897,  898,  838,  846,  852,  859,
      880,  881,  882,  886,  900,  860,  864,  872,  925,  926,
      927,  928,  929,  930,  931,  932,  933,  934,  935,  936,
      937,  938,  939,  944,  901,  902,  903,  905,  940,  941,
      942,  943,  945,  907,  908,  909,  925,  926,  927,  946,
      948,  949,  950,  951,  952,  953,  954,  955,  956,  961,
      962,  944,  957,  958,  959,  960,  963,  964,  965,  966,
      945,  967,  968,  969,  970,  971,  972,  946,  948,  949,
      950,  951,  952,  953,  954,  955,  956,  961,  962,  973,
      974,  975,  976,  977,  963,  964,  965,  966,  978,  967,

      968,  969,  970,  971,  972,  979,  980,  981,  982,  983,
      984,  985,  986,  987,  988,  989,  990,  973,  974,  975,
      976,  977,  991,  992,  993,  994,  978,  995,  996,  997,
      998,  999, 1000,  979,  980,  981,  982,  983,  984,  985,
      986,  987,  988,  989,  990, 1001, 1002, 1004, 1005, 1006,
      991,  992,  993,  994, 1007,  995,  996,  997,  998,  999,
     1000, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
     1017, 1018, 1019, 1001, 1002, 1004, 1005, 1006, 1020, 1021,
     1022, 1023, 1007, 1024, 1025, 1026, 1027, 1028, 1029, 1008,
     1009, 1010, 1011, 1030, 1032, 1033,  946,  952,  953,  955,

     1039, 1040, 1041, 1042, 1043, 1044, 1031, 1045, 1046, 1047,
      957,  958,  959,  960,  982, 1028, 1029,  989, 1001, 1004,
     1008, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1028, 1065,
     1066, 1067, 1068, 1069, 1031, 1070, 1073, 1074, 1075, 1076,
     1077, 1071, 1051, 1078, 1079,  989, 1053, 1004, 1055, 1052,
     1072, 1080, 1081, 1082, 1555, 1554, 1056, 1065, 1066, 1067,
     1068, 1069, 1553, 1070, 1073, 1074, 1075, 1076, 1077, 1071,
     1100, 1078, 1079, 1083, 1084, 1085, 1086, 1552, 1551, 1080,
     1081, 1082, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
     1095, 1096, 1097, 1098, 1101, 1102, 1103, 1104, 1100, 1105,

     1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115,
     1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125,
     1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
     1136, 1137, 1138, 1139, 1140, 1141, 1302, 1303, 1304, 1117,
     1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
     1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
     1138, 1139, 1140, 1141, 1142, 1143, 1144, 1148, 1149, 1150,
     1151, 1550, 1152, 1157, 1145, 1153, 1154, 1155, 1158, 1159,
     1160, 1161, 1162, 1069, 1076, 1156, 1125, 1549, 1548, 1547,
     1146, 1546, 1545, 1544, 1181, 1148, 1149, 1150, 1151, 1147,

     1152, 1157, 1145, 1182, 1183, 1184, 1158, 1159, 1160, 1161,
     1162, 1164, 1165, 1156, 1168, 1170, 1171, 1172, 1146, 1153,
     1154, 1155, 1181, 1185, 1543, 1145, 1186, 1187, 1188, 1156,
     1189, 1182, 1183, 1184, 1190, 1191, 1192, 1193, 1194, 1195,
     1196, 1146, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204,
     1147, 1185, 1173, 1174, 1186, 1187, 1188, 1156, 1189, 1209,
     1210, 1211, 1190, 1191, 1192, 1205, 1206, 1207, 1208, 1146,
     1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
     1222, 1223, 1224, 1225, 1226, 1227, 1228, 1209, 1210, 1211,
     1229, 1230, 1231, 1232, 1233, 1234, 1542, 1237, 1212, 1213,

     1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223,
     1224, 1225, 1226, 1227, 1228, 1238, 1239, 1240, 1229, 1230,
     1231, 1232, 1233, 1234, 1235, 1237, 1241, 1242, 1243, 1244,
     1236, 1245, 1246, 1247, 1249, 1250, 1253, 1254, 1255, 1218,
     1232, 1233, 1234, 1238, 1239, 1240, 1541, 1235, 1266, 1267,
     1268, 1248, 1235, 1236, 1241, 1242, 1243, 1244, 1236, 1245,
     1246, 1247, 1249, 1250, 1272, 1273, 1274, 1258, 1260, 1261,
     1262, 1275, 1276, 1256, 1257, 1235, 1277, 1278, 1279, 1248,
     1280, 1264, 1281, 1282, 1283, 1269, 1270, 1284, 1285, 1286,
     1287, 1288, 1272, 1273, 1274, 1289, 1290, 1291, 1292, 1275,

     1276, 1293, 1294, 1295, 1277, 1278, 1279, 1296, 1280, 1297,
     1281, 1282, 1283, 1298, 1299, 1284, 1285, 1286, 1287, 1288,
     1300, 1301, 1305, 1289, 1290, 1291, 1292, 1306, 1307, 1293,
     1294, 1295, 1308, 1309, 1310, 1296, 1311, 1297, 1313, 1314,
     1316, 1298, 1299, 1317, 1318, 1319, 1320, 1291, 1300, 1301,
     1305, 1315, 1306, 1341, 1540, 1306, 1307, 1342, 1343, 1344,
     1308, 1309, 1310, 1345, 1311, 1329, 1313, 1314, 1316, 1346,
     1347, 1317, 1318, 1319, 1320, 1326, 1348, 1330, 1349, 1315,
     1334, 1341, 1331, 1332, 1350, 1342, 1343, 1344, 1351, 1352,
     1353, 1345, 1354, 1355, 1356, 1357, 1358, 1346, 1347, 1359,

     1360, 1361, 1362, 1363, 1348, 1364, 1349, 1365, 1366, 1367,
     1368, 1369, 1350, 1370, 1371, 1373, 1351, 1352, 1353, 1374,
     1354, 1355, 1356, 1357, 1358, 1377, 1378, 1359, 1360, 1361,
     1362, 1363, 1379, 1364, 1380, 1365, 1366, 1367, 1368, 1369,
     1381, 1370, 1371, 1373, 1382, 1383, 1384, 1374, 1355, 1369,
     1406, 1407, 1408, 1377, 1378, 1409, 1410, 1411, 1412, 1413,
     1379, 1414, 1380, 1415, 1416, 1417, 1418, 1419, 1381, 1420,
     1421, 1423, 1382, 1383, 1384, 1424, 1391, 1399, 1406, 1407,
     1408, 1425, 1426, 1409, 1410, 1411, 1412, 1413, 1427, 1414,
     1428, 1415, 1416, 1417, 1418, 1419, 1429, 1420, 1421, 1423,

     1430, 1431, 1432, 1424, 1433, 1434, 1435, 1436, 1437, 1425,
     1426, 1438, 1439, 1440, 1419, 1463, 1427, 1464, 1428, 1465,
     1466, 1467, 1468, 1469, 1429, 1471, 1470, 1472, 1430, 1431,
     1432, 1473, 1433, 1434, 1435, 1436, 1437, 1474, 1475, 1438,
     1439, 1440, 1447, 1463, 1476, 1464, 1477, 1465, 1466, 1467,
     1468, 1469, 1478, 1471, 1470, 1472, 1479, 1480, 1481, 1473,
     1482, 1483, 1484, 1485, 1486, 1474, 1475, 1487, 1488, 1489,
     1490, 1491, 1476, 1492, 1477, 1473, 1515, 1516, 1517, 1518,
     1478, 1519, 1520, 1521, 1479, 1480, 1481, 1522, 1482, 1483,
     1484, 1485, 1486, 1523, 1524, 1487, 1488, 1489, 1490, 1491,

     1525, 1492, 1526, 1499, 1515, 1516, 1517, 1518, 1527, 1519,
     1520, 1521, 1528, 1529, 1530, 1522, 1531, 1532, 1533, 1534,
     1535, 1523, 1524, 1536, 1537, 1538, 1559, 1560, 1525, 1561,
     1526, 1562, 1563, 1564, 1565, 1566, 1527, 1567, 1568, 1569,
     1528, 1529, 1530, 1570, 1531, 1532, 1533, 1534, 1535, 1571,
     1572, 1536, 1537, 1538, 1559, 1560, 1573, 1561, 1574, 1562,
     1563, 1564, 1565, 1566, 1575, 1567, 1568, 1569, 1576, 1577,
     1594, 1570, 1595, 1596, 1597, 1598, 1599, 1571, 1572, 1600,
     1601, 1602, 1603, 1604, 1573, 1605, 1574, 1606, 1607, 1608,
     1609, 1610, 1575, 1621, 1622, 1623, 1576, 1577, 1594, 1624,

     1595, 1596, 1597, 1598, 1599, 1625, 1626, 1600, 1601, 1602,
     1603, 1604, 1627, 1605, 1637, 1606, 1607, 1608, 1609, 1610,
     1638, 1621, 1622, 1623, 1639, 1640, 1641, 1624, 1646, 1647,
     1648, 1649, 1654, 1625, 1626, 1655, 1656, 1660, 1661, 1662,
     1627, 1664, 1637, 1665, 1666, 1668, 1539, 1514, 1638, 1513,
     1512, 1511, 1639, 1640, 1641, 1510, 1646, 1647, 1648, 1649,
     1654, 1509, 1508, 1655, 1656, 1660, 1661, 1662, 1507, 1664,
     1506, 1665, 1666, 1668,   72,   72,   72,   72,   72,   75,
       75,   75,   75,   75,   77,   77,   77,   77,   77,  240,
     1505,  240, 1504,  240,  242, 1503,  242,  242,  242,  243,

      243, 1502,  243,  243,  580, 1501,  580,  580,  580,  761,
      761,  761,  761,  761,  918, 1500,  918,  918,  918, 1060,
     1498, 1060, 1060, 1060, 1177, 1497, 1177, 1177, 1177, 1179,
     1496, 1179, 1179, 1179, 1271, 1495, 1271, 1271, 1271, 1494,
     1493, 1462, 1461, 1460, 1459, 1458, 1457, 1454, 1453, 1452,
     1451, 1450, 1449, 1448, 1446, 1445, 1444, 1443, 1442, 1441,
     1422, 1405, 1404, 1400, 1398, 1397, 1396, 1395, 1394, 1393,
     1392, 1390, 1389, 1385, 1372, 1340, 1339, 1338, 1337, 1336,
     1335, 1333, 1325, 1324, 1323, 1322, 1321, 1312, 1265, 1263,
     1259, 1252, 1251, 1180, 1178, 1176, 1175, 1169, 1167, 1166,

     1163, 1099,  923,  591, 1064, 1063, 1062, 1061, 1059, 1058,
     1057, 1054, 1050, 1049, 1048, 1034, 1003,  947,  924,  923,
      763,  922,  921,  920,  919,  917,  916,  915,  914,  913,
      912,  911,  910,  906,  904,  899,  889,  888,  887,  885,
      884,  883,  780,  878,  780,  765,  764,  760,  759,  758,
      757,  756,  755,  754,  753,  752,  751,  750,  749,  748,
      747,  746,  744,  740,  736,  734,  730,  728,  727,  726,
      725,  724,  720,  719,  717,  698,  590,  587,  586,  585,
      584,  583,  579,  578,  575,  568,  567,  566,  560,  558,
      553,  551,  547,  546,  545,  544,  543,  541,  539,  536,

      534,  527,  524,  487,  418,  416,  413,  412,  411,  410,
      404,  399,  398,  391,  389,  381,  378,  377,  376,  372,
      366,  364,  358,  355,  252,  251,  244,  241,  101,   88,
       85,   84, 1669,   76,   76,    9, 1669, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,

     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669
    } ;

static yyconst flex_int16_t yy_chk[3114] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        7,    2,   15,    7,    3,    4,   17,    8,    8,   18,
        7,    8,   11,   20,   11,   15,   19,   17,    8,   18,

       19,   22,   22,   24,   24, 1673,   32,   21,   19,   21,
       21,   21,   21,   21,   21,   25,   26,   28,   25,   26,
       25,   28,   26,   31,   20,   26,   32,   28,   45,   26,
       29,   46,   29,   31,   32,   28,   31,   28,   21,   83,
     1663,   83,   29,   25,   26,   28,   25,   26,   25,   28,
       26,   31,   20,   26,   32,   28,   45,   26,   29,   46,
       29,   31,   30,   28,   31,   28,   21,   27,   27,   33,
       29,   27,   36,   30,   27,  105,   30,   33,   27,   30,
       35,   27, 1659,   81,   38,   30,   35,   81,   43,   38,
       30, 1653,   36,   43,   69,   27,   27,   33,   43,   27,

       36,   30,   27,  105,   30,   33,   27,   30,   35,   27,
       39,   37,   38,   30,   35,   37,   43,   38,   39,   40,
       36,   43,   82,   40,   39,   37,   43,   39,   49, 1651,
       39,   37,   49,   40,  106, 1650,   57,  107,   39,   37,
     1645,   40,   49,   37,   44,  245,   39,   40,   44,  245,
       69,   40,   39,   37,   44,   39,   57,   42,   39,   37,
       42,   40,  106,   42,   57,  107,  235, 1644,   57,   40,
       41, 1643,   44,   42,  235,   82,   44,   41,   41,   82,
       42,  108,   44,   41,   57,   42,  591,  591,   42,   41,
     1642,   42,   41,  109,   56,   51,  110,   51,   41,   47,

       56,   42,   47, 1633,   47,   41,   41,   51,   42,  108,
       59,   41,   47,   47,   56,   59,  111,   41,   47,  112,
       41,  109,   56,   51,  110,   51, 1632,   47,   56,   47,
       47,   47,   47,   48,  114,   51,   48,   55,   59,   48,
     1631,  115,   48,   59,  111,   55,   48,  112,   54,   52,
       48,   48,  116, 1630,   61,   61,   48,   61,   61,  117,
       52,   48,  114,   52,   48,   55,   52,   48,   54,  115,
       48,   48,   52,   55,   48,   50,   54,   52,   55,   50,
      116,   55,  120, 1620,   54,   50, 1260,  117,   52,  122,
      248,   52,  248,   50,   52,   50,   54,   70, 1619,   70,

       52,   70,   53,   50, 1260,   58,  123,   50,  121,   58,
      120,   50,   53,   50,   66,   53,  121,  122,   66,   58,
       50,   50, 1618,   50,   66,   58,   53,   53,  124, 1617,
       53,  405,   53,   58,  123,   62,  121,   58,   66,   62,
       53,  405,   66,   53,  121,   65,   66,   58,  125,   62,
       65,  127,   66,   58,   60,   65,  124,   62,   68,   68,
       68,   68,   60,   62,   62,  113,  113,   62,   60,   62,
     1616,   60, 1322,   65,   60, 1337,  125,   62,   65,  127,
       62, 1614,   60,   65, 1322,   62,   65, 1337,   67, 1322,
       60,   63, 1337,  113,  113,  408,   60,   60,   60,   60,

       60,   60,   60,   63, 1613,  408,   63,   63,  126,   63,
       63,   63,  126,   63,   64,   71,   67,   64,  128,  414,
       64,   96,   96,   96,   96,   96,   96,  129, 1612,  414,
       64,   67,   67,   67,   67, 1611,  126,   64,  130, 1593,
      126,  131,   64,  132, 1592,   64,  128,   98,   64,   98,
       98,   98,   98,   98,   98,  129,   64,   64,   64,   64,
       64,  118,  118,  118,  119,   64,  130,   71,   71,  131,
      119,  132,   71,  133,  119,   71,  134,  135,   98,   71,
      136,  139,  762,  762,   71,   71,  140, 1589,  141,  118,
      118,  118,  119,  142,  143,  144,  145,  146,  119,  147,

      148,  133,  119,  145,  134,  135,   98,  138,  136,  139,
      138,  138,  150,  149,  140,  138,  141,  151,  153,  154,
      156,  142,  143,  144,  145,  146,  152,  147,  148,  149,
      152,  145,  158,  157,  160,  138,  152,  161,  138,  138,
      150,  149,  155,  138,  155,  151,  153,  154,  156,  155,
      157,  157,  159,  160,  152,  155,  162,  149,  152,  163,
      158,  157,  160,  164,  152,  161,  159,  166, 1588,  168,
      155,  169,  155,  162,  167,  165,  166,  155,  157,  157,
      159,  160,  170,  155,  162,  165,  167,  163,  170,  171,
      167,  164,  170,  172,  159,  166,  165,  168,  173,  169,

      175,  162,  167,  165,  166,  180,  174, 1399,  172,  174,
      170, 1312, 1312,  165,  167,  181,  170,  171,  167,  184,
      170,  172,  183,  183,  165, 1399,  173,  187,  175,  178,
      178,  191,  186,  180,  174,  178,  172,  174,  186,  181,
      181,  189,  186,  181,  192,  181,  178,  184,  193,  189,
      183,  183,  185,  185,  185,  187,  181,  194, 1586,  191,
      186,  202,  193, 1585,  195,  203,  186, 1584,  205,  189,
      186,  206,  192,  212,  216,  205,  193,  189,  195,  195,
      185,  185,  185,  198,  195,  194,  198,  198,  207,  202,
      209,  198,  195,  203,  209,  195,  205,  219,  202,  206,

      209,  212,  216,  205,  207,  208,  208, 1582,  208,  208,
      214,  198, 1581,  210,  198,  198,  207,  226,  209,  198,
     1580,  198,  209,  210,  210,  219, 1558,  214,  209,  210,
     1555,  218,  207,  207, 1554,  211, 1553,  211,  214,  217,
      210,  210,  211,  218,  221,  226,  224,  218,  211,  217,
      231, 1552,  220,  214,  214,  214,  214,  214,  220,  218,
      217,  224,  220,  211,  221,  211,  225,  217,  253,  225,
      211,  218,  221,  232,  224,  218,  211,  217,  246,  247,
      220,  227,  227,  227,  227,  255,  220,  256,  217,  224,
      220,  230, 1551,  230,  225,  230,  253,  225,  234,  257,

      234,  258,  231,  231,  234, 1550,  259,  231, 1549, 1548,
      231,  260,  261,  255,  231,  256,  527,  527,  527,  231,
      231, 1547,  262,  263,  264,  232,  232,  257,  265,  258,
      232,  246,  247,  232,  259,  246,  247,  232,  266,  260,
      261,  267,  232,  232,  250,  250,  250,  250,  250,  250,
      262,  263,  264,  268,  269,  269,  265,  270,  271,  272,
      273,  274,  275,  276,  277,  278,  266,  279,  280,  267,
      281,  282,  283,  285,  286,  287,  288,  289,  290,  291,
      292,  268,  269,  269,  293,  270,  271,  272,  273,  274,
      275,  276,  277,  278,  294,  279,  280, 1546,  281,  282,

      283,  285,  286,  287,  288,  289,  290,  291,  292,  296,
      297,  298,  293,  295,  295,  295,  295,  299,  300,  302,
      303,  304,  294,  305,  306,  295,  307,  308,  309,  310,
      311,  312,  313,  314,  315,  316,  317,  296,  297,  298,
      318,  319, 1545,  322,  323,  299,  300,  302,  303,  304,
      324,  305,  306,  295,  307,  308,  309,  310,  311,  312,
      313,  314,  315,  316,  317,  325,  321,  326,  318,  319,
      321,  322,  323,  327,  328,  329,  330,  331,  324,  332,
      333,  334,  335,  336,  337,  338,  339,  340,  342,  331,
      343,  344,  345,  325,  321,  326,  346,  347,  321,  348,

      344,  327,  328,  329,  330,  331,  349,  332,  333,  334,
      335,  336,  337,  338,  339,  340,  342,  331,  343,  344,
      345,  350,  351,  352,  346,  347,  353,  348,  344,  354,
      354,  356,  357,  359,  349,  354,  360,  361,  361,  362,
      363,  365,  367,  368,  370,  373,  354, 1544, 1541,  350,
      351,  352,  382,  383,  353,  380,  380,  380, 1540,  356,
      357,  359,  386,  387,  360,  361,  361,  362,  363,  365,
      367,  368,  370,  373,  374,  374,  374,  374,  388,  380,
      382,  383,  390,  392,  385,  385,  374,  385,  385,  393,
      386,  387,  394,  395,  390,  396,  416,  401,  400,  400,

      400,  402,  417,  418,  396, 1539,  388,  380, 1514,  420,
      390,  392, 1513, 1512,  374,  422,  423,  393,  424,  426,
      394,  395,  390,  396,  400,  401,  427,  428,  430,  402,
      417,  418,  396,  403,  403,  403,  403,  420,  421,  421,
      421,  421,  431,  422,  423,  432,  424,  426,  416,  433,
      433,  434,  400,  435,  427,  428,  430,  432,  416,  436,
      437,  438,  439,  440,  441,  442,  445,  446,  447,  448,
      431,  449,  450,  432,  451,  453,  455,  433,  433,  434,
      456,  435,  457,  458,  459,  432,  460,  436,  437,  438,
      439,  440,  441,  442,  445,  446,  447,  448,  461,  449,

      450,  462,  451,  453,  455,  463,  464,  466,  456,  467,
      457,  458,  459,  468,  460,  469,  470,  472,  473,  474,
      476,  477,  478,  479,  464,  480,  461,  481,  482,  462,
      483,  484,  485,  463,  464,  466,  486,  467,  487,  488,
      489,  468,  490,  469,  470,  472,  473,  474,  476,  477,
      478,  479,  464,  480,  491,  481,  482,  492,  483,  484,
      485,  493,  494,  495,  486,  496,  487,  488,  489,  497,
      490,  498,  499,  500,  501,  498,  502,  503,  504,  505,
      507,  508,  491,  512,  510,  492,  534,  534,  534,  493,
      494,  495,  513,  496,  510,  514,  515,  497,  516,  498,

      499,  500,  501,  498,  502,  503,  504,  505,  507,  508,
      517,  512,  510,  511,  511,  511,  511,  518,  519,  521,
      513,  522,  510,  514,  515,  526,  516,  525,  525,  525,
      525,  529,  530,  530,  531,  532,  533,  535,  517,  536,
      536,  536,  538,  540,  542,  518,  519,  521,  552,  522,
      545,  545,  545,  526,  555,  556,  557,  559,  561,  529,
      530,  530,  531,  532,  533,  535,  562,  565,  573,  594,
      538,  540,  542,  567,  567,  567,  552,  564,  564,  564,
      564,  595,  555,  556,  557,  559,  561,  596,  597,  598,
      599,  600,  602,  603,  562,  565,  573,  594,  605,  606,

      608,  609,  610,  612,  613,  614,  615,  616,  617,  595,
      618,  619,  621,  622,  623,  596,  597,  598,  599,  600,
      602,  603,  620,  620,  620,  620,  605,  606,  608,  609,
      610,  612,  613,  614,  615,  616,  617,  626,  618,  619,
      621,  622,  623,  625,  625,  625,  625,  627,  628,  629,
      630,  631,  633,  634,  634,  634,  634,  635,  635,  635,
      635,  636,  636,  636,  636,  626,  637,  637,  637,  637,
      638,  639,  640,  641,  642,  627,  628,  629,  630,  631,
      633,  643,  644,  645,  646,  639,  647,  648,  650,  651,
      649,  652,  653,  654,  655,  656,  657,  658,  638,  639,

      640,  641,  642,  649,  659,  660,  661,  662,  663,  643,
      644,  645,  646,  639,  647,  648,  650,  651,  649,  652,
      653,  654,  655,  656,  657,  658,  664,  665,  666,  668,
      669,  649,  659,  660,  661,  662,  663,  671,  672,  673,
      674,  675,  676,  677,  678,  679,  681,  682,  683,  684,
      685,  686,  687,  688,  664,  665,  666,  668,  669,  691,
      693,  694,  695,  696,  703,  671,  672,  673,  674,  675,
      676,  677,  678,  679,  681,  682,  683,  684,  685,  686,
      687,  688,  705,  706,  707,  711,  729,  691,  693,  694,
      695,  696,  703,  716,  716,  716,  716,  725,  725,  725,

      726,  726,  726,  727,  727,  727,  731,  732,  733,  735,
      705,  706,  707,  711,  729,  737,  738,  739,  766,  767,
      768,  769,  769,  769,  769,  770,  770,  770,  770,  771,
      771,  771,  771,  774,  731,  732,  733,  735,  772,  772,
      772,  772,  775,  737,  738,  739,  766,  767,  768,  776,
      778,  779,  780,  781,  782,  783,  785,  786,  787,  789,
      790,  774,  788,  788,  788,  788,  791,  792,  793,  794,
      775,  796,  797,  798,  799,  801,  802,  776,  778,  779,
      780,  781,  782,  783,  785,  786,  787,  789,  790,  803,
      804,  806,  823,  824,  791,  792,  793,  794,  826,  796,

      797,  798,  799,  801,  802,  828,  829,  830,  831,  832,
      833,  834,  835,  836,  837,  838,  839,  803,  804,  806,
      823,  824,  840,  842,  843,  844,  826,  845,  847,  848,
      849,  850,  851,  828,  829,  830,  831,  832,  833,  834,
      835,  836,  837,  838,  839,  852,  856,  859,  861,  862,
      840,  842,  843,  844,  863,  845,  847,  848,  849,  850,
      851,  864,  865,  866,  867,  868,  868,  868,  868,  869,
      869,  869,  869,  852,  856,  859,  861,  862,  870,  870,
      870,  870,  863,  871,  871,  871,  871,  872,  873,  864,
      865,  866,  867,  875,  876,  877,  879,  880,  881,  882,

      883,  883,  883,  884,  884,  884,  875,  885,  885,  885,
      886,  886,  886,  886,  900,  872,  873,  901,  903,  905,
      908,  875,  876,  877,  879,  880,  881,  882,  909,  925,
      926,  927,  944,  946,  875,  947,  949,  950,  951,  952,
      954,  948,  900,  956,  957,  901,  903,  905,  908,  901,
      948,  958,  959,  960, 1511, 1510,  909,  925,  926,  927,
      944,  946, 1509,  947,  949,  950,  951,  952,  954,  948,
      966,  956,  957,  961,  961,  961,  961, 1508, 1507,  958,
      959,  960,  962,  962,  962,  962,  963,  963,  963,  963,
      964,  964,  964,  964,  967,  967,  967,  967,  966,  968,

      968,  968,  968,  969,  969,  969,  969,  970,  970,  970,
      970,  972,  973,  974,  975,  976,  978,  980,  981,  982,
      983,  984,  985,  986,  987,  988,  991,  992,  993,  994,
      995,  996,  997,  998,  999, 1000, 1231, 1231, 1231,  972,
      973,  974,  975,  976,  978,  980,  981,  982,  983,  984,
      985,  986,  987,  988,  991,  992,  993,  994,  995,  996,
      997,  998,  999, 1000, 1001, 1001, 1001, 1002, 1003, 1004,
     1006, 1505, 1007, 1009, 1001, 1008, 1008, 1008, 1011, 1029,
     1030, 1031, 1033, 1035, 1036, 1008, 1051, 1504, 1503, 1502,
     1001, 1501, 1500, 1498, 1065, 1002, 1003, 1004, 1006, 1001,

     1007, 1009, 1001, 1066, 1067, 1068, 1011, 1029, 1030, 1031,
     1033, 1035, 1036, 1008, 1051, 1053, 1053, 1053, 1001, 1055,
     1055, 1055, 1065, 1070, 1497, 1053, 1071, 1072, 1073, 1055,
     1074, 1066, 1067, 1068, 1075, 1077, 1078, 1079, 1079, 1079,
     1079, 1053, 1080, 1080, 1080, 1080, 1081, 1081, 1081, 1081,
     1053, 1070, 1053, 1053, 1071, 1072, 1073, 1055, 1074, 1099,
     1117, 1118, 1075, 1077, 1078, 1082, 1082, 1082, 1082, 1053,
     1119, 1120, 1121, 1122, 1123, 1124, 1125, 1127, 1128, 1129,
     1130, 1131, 1132, 1133, 1135, 1136, 1137, 1099, 1117, 1118,
     1139, 1140, 1141, 1142, 1143, 1144, 1496, 1146, 1119, 1120,

     1121, 1122, 1123, 1124, 1125, 1127, 1128, 1129, 1130, 1131,
     1132, 1133, 1135, 1136, 1137, 1147, 1148, 1149, 1139, 1140,
     1141, 1142, 1143, 1144, 1145, 1146, 1150, 1151, 1153, 1154,
     1145, 1155, 1156, 1157, 1160, 1161, 1167, 1167, 1167, 1168,
     1170, 1171, 1172, 1147, 1148, 1149, 1495, 1174, 1176, 1176,
     1176, 1157, 1145, 1174, 1150, 1151, 1153, 1154, 1145, 1155,
     1156, 1157, 1160, 1161, 1181, 1182, 1183, 1168, 1170, 1171,
     1172, 1184, 1185, 1167, 1167, 1174, 1186, 1187, 1188, 1157,
     1189, 1174, 1190, 1191, 1192, 1176, 1176, 1209, 1210, 1211,
     1212, 1213, 1181, 1182, 1183, 1215, 1217, 1218, 1219, 1184,

     1185, 1220, 1221, 1222, 1186, 1187, 1188, 1223, 1189, 1225,
     1190, 1191, 1192, 1226, 1227, 1209, 1210, 1211, 1212, 1213,
     1229, 1230, 1235, 1215, 1217, 1218, 1219, 1236, 1237, 1220,
     1221, 1222, 1238, 1239, 1240, 1223, 1241, 1225, 1243, 1244,
     1246, 1226, 1227, 1247, 1248, 1249, 1250, 1258, 1229, 1230,
     1235, 1244, 1264, 1272, 1494, 1236, 1237, 1273, 1275, 1276,
     1238, 1239, 1240, 1277, 1241, 1261, 1243, 1244, 1246, 1278,
     1279, 1247, 1248, 1249, 1250, 1258, 1281, 1261, 1282, 1244,
     1264, 1272, 1261, 1261, 1283, 1273, 1275, 1276, 1284, 1285,
     1286, 1277, 1290, 1291, 1292, 1294, 1295, 1278, 1279, 1296,

     1297, 1298, 1299, 1300, 1281, 1301, 1282, 1302, 1303, 1304,
     1305, 1306, 1283, 1307, 1308, 1310, 1284, 1285, 1286, 1311,
     1290, 1291, 1292, 1294, 1295, 1313, 1314, 1296, 1297, 1298,
     1299, 1300, 1315, 1301, 1316, 1302, 1303, 1304, 1305, 1306,
     1317, 1307, 1308, 1310, 1318, 1319, 1320, 1311, 1326, 1334,
     1341, 1342, 1343, 1313, 1314, 1344, 1345, 1346, 1347, 1348,
     1315, 1349, 1316, 1350, 1351, 1352, 1354, 1355, 1317, 1357,
     1360, 1362, 1318, 1319, 1320, 1363, 1326, 1334, 1341, 1342,
     1343, 1364, 1365, 1344, 1345, 1346, 1347, 1348, 1366, 1349,
     1368, 1350, 1351, 1352, 1354, 1355, 1370, 1357, 1360, 1362,

     1371, 1372, 1374, 1363, 1376, 1377, 1378, 1379, 1380, 1364,
     1365, 1382, 1383, 1384, 1391, 1406, 1366, 1408, 1368, 1410,
     1411, 1412, 1413, 1414, 1370, 1417, 1414, 1418, 1371, 1372,
     1374, 1419, 1376, 1377, 1378, 1379, 1380, 1420, 1421, 1382,
     1383, 1384, 1391, 1406, 1422, 1408, 1423, 1410, 1411, 1412,
     1413, 1414, 1424, 1417, 1414, 1418, 1425, 1426, 1427, 1419,
     1428, 1430, 1431, 1432, 1433, 1420, 1421, 1434, 1435, 1436,
     1437, 1438, 1422, 1439, 1423, 1447, 1463, 1464, 1466, 1468,
     1424, 1469, 1470, 1471, 1425, 1426, 1427, 1472, 1428, 1430,
     1431, 1432, 1433, 1475, 1476, 1434, 1435, 1436, 1437, 1438,

     1477, 1439, 1478, 1447, 1463, 1464, 1466, 1468, 1479, 1469,
     1470, 1471, 1480, 1481, 1482, 1472, 1484, 1485, 1487, 1488,
     1489, 1475, 1476, 1490, 1491, 1492, 1515, 1516, 1477, 1517,
     1478, 1518, 1519, 1520, 1522, 1523, 1479, 1524, 1525, 1526,
     1480, 1481, 1482, 1527, 1484, 1485, 1487, 1488, 1489, 1528,
     1529, 1490, 1491, 1492, 1515, 1516, 1530, 1517, 1531, 1518,
     1519, 1520, 1522, 1523, 1532, 1524, 1525, 1526, 1535, 1536,
     1559, 1527, 1560, 1561, 1562, 1563, 1564, 1528, 1529, 1567,
     1568, 1569, 1570, 1571, 1530, 1572, 1531, 1573, 1574, 1575,
     1576, 1577, 1532, 1594, 1595, 1597, 1535, 1536, 1559, 1598,

     1560, 1561, 1562, 1563, 1564, 1602, 1603, 1567, 1568, 1569,
     1570, 1571, 1606, 1572, 1621, 1573, 1574, 1575, 1576, 1577,
     1623, 1594, 1595, 1597, 1625, 1626, 1627, 1598, 1637, 1638,
     1639, 1641, 1646, 1602, 1603, 1647, 1649, 1654, 1655, 1656,
     1606, 1660, 1621, 1661, 1662, 1665, 1493, 1462, 1623, 1461,
     1460, 1459, 1625, 1626, 1627, 1458, 1637, 1638, 1639, 1641,
     1646, 1457, 1456, 1647, 1649, 1654, 1655, 1656, 1455, 1660,
     1454, 1661, 1662, 1665, 1670, 1670, 1670, 1670, 1670, 1671,
     1671, 1671, 1671, 1671, 1672, 1672, 1672, 1672, 1672, 1674,
     1453, 1674, 1452, 1674, 1675, 1451, 1675, 1675, 1675, 1676,

     1676, 1450, 1676, 1676, 1677, 1449, 1677, 1677, 1677, 1678,
     1678, 1678, 1678, 1678, 1679, 1448, 1679, 1679, 1679, 1680,
     1446, 1680, 1680, 1680, 1681, 1445, 1681, 1681, 1681, 1682,
     1444, 1682, 1682, 1682, 1683, 1443, 1683, 1683, 1683, 1442,
     1441, 1405, 1404, 1403, 1402, 1401, 1400, 1398, 1397, 1396,
     1395, 1394, 1393, 1392, 1390, 1389, 1388, 1387, 1386, 1385,
     1361, 1340, 1339, 1336, 1333, 1332, 1331, 1330, 1329, 1328,
     1327, 1325, 1324, 1321, 1309, 1270, 1269, 1268, 1267, 1266,
     1265, 1263, 1257, 1256, 1255, 1254, 1253, 1242, 1175, 1173,
     1169, 1166, 1163, 1064, 1062, 1057, 1054, 1052, 1049, 1048,

     1034,  965,  924,  923,  921,  919,  917,  916,  912,  911,
      910,  906,  899,  888,  887,  878,  857,  777,  765,  764,
      761,  760,  757,  756,  755,  753,  752,  751,  750,  749,
      746,  744,  740,  736,  734,  728,  724,  720,  719,  710,
      709,  708,  704,  698,  611,  593,  592,  590,  589,  588,
      587,  586,  585,  584,  583,  582,  581,  579,  578,  577,
      576,  575,  568,  566,  560,  558,  553,  551,  550,  549,
      548,  546,  544,  543,  541,  524,  415,  413,  412,  411,
      410,  409,  407,  406,  404,  399,  398,  397,  391,  389,
      384,  381,  379,  378,  377,  376,  375,  372,  369,  366,

      364,  358,  355,  320,  254,  249,  239,  238,  237,  236,
      233,  223,  222,  215,  213,  204,  201,  200,  199,  196,
      190,  188,  182,  179,  103,   99,   80,   74,   23,   16,
       14,   13,    9,    6,    5, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,

     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
     1669, 1669, 1669
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "gpu/lolfx-scanner.l"
#line 2 "gpu/lolfx-scanner.l"
//
// Lol Engine
//
// Copyright: (c) 2010-2013 Sam Hocevar <sam@hocevar.net>
//   This program is free software; you can redistribute it and/or
//   modify it under the terms of the Do What The Fuck You Want To
//   Public License, Version 2, as published by Sam Hocevar. See
//   http://www.wtfpl.net/ for more details.
//

#include <lol/engine-internal.h>

#include <cstdlib>
using std::exit;
using std::malloc;
using std::realloc;
using std::free;
#include <iostream>

#include "gpu/lolfx-compiler.h"

typedef lol::LolFxParser::token token;
typedef lol::LolFxParser::token_type token_type;

#ifndef YY_DECL
#   define YY_DECL lol::LolFxParser::token_type \
        lol::LolFxScanner::lex(lol::LolFxParser::semantic_type* yylval, \
                               lol::LolFxParser::location_type* yylloc)
#endif

#define yyterminate() return token::T_END
#define YY_NO_UNISTD_H
#define YY_USER_ACTION yylloc->columns(yyleng);



#line 1694 "generated/lolfx-scanner.cpp"

#define INITIAL 0
#define C_COMMENT 1
#define CPP_COMMENT 2
#define PREPROCESSOR_COMMENT 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 47 "gpu/lolfx-scanner.l"



    /* reset location at the beginning of yylex() */
    yylloc->step();

    int language_guess = INITIAL;
    m_pp_stack.Push(BlockIsTrue);


 /*
  * GLSL keywords
  */

#line 1820 "generated/lolfx-scanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1670 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1669 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 61 "gpu/lolfx-scanner.l"
{ return token::GT_SUBROUTINE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 62 "gpu/lolfx-scanner.l"
{ return token::GT_PATCH; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 63 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLE; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 64 "gpu/lolfx-scanner.l"
{ return token::GT_FLAT; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "gpu/lolfx-scanner.l"
{ return token::GT_SMOOTH; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "gpu/lolfx-scanner.l"
{ return token::GT_LAYOUT; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER1DSHADOW; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DSHADOW; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLERCUBESHADOW; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER1DARRAY; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DARRAY; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER1DARRAYSHADOW; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DARRAYSHADOW; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER1D; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER2D; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER3D; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLERCUBE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER1DARRAY; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER2DARRAY; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER1D; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER2D; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER3D; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLERCUBE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER1DARRAY; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER2DARRAY; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DRECT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DRECTSHADOW; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER2DRECT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER2DRECT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLERBUFFER; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLERBUFFER; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLERBUFFER; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLERCUBEARRAY; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLERCUBEARRAYSHADOW; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLERCUBEARRAY; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLERCUBEARRAY; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DMS; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER2DMS; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER2DMS; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "gpu/lolfx-scanner.l"
{ return token::GT_SAMPLER2DMSARRAY; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "gpu/lolfx-scanner.l"
{ return token::GT_ISAMPLER2DMSARRAY; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "gpu/lolfx-scanner.l"
{ return token::GT_USAMPLER2DMSARRAY; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 104 "gpu/lolfx-scanner.l"
{ return token::GT_HIGHP; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 105 "gpu/lolfx-scanner.l"
{ return token::GT_MEDIUMP; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 106 "gpu/lolfx-scanner.l"
{ return token::GT_LOWP; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 107 "gpu/lolfx-scanner.l"
{ return token::GT_PRECISION; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 108 "gpu/lolfx-scanner.l"
{ return token::GT_INVARIANT; }
	YY_BREAK
/*
  * Deprecated GLSL keywords
  */
case 48:
YY_RULE_SETUP
#line 114 "gpu/lolfx-scanner.l"
{ return token::GT_ATTRIBUTE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 115 "gpu/lolfx-scanner.l"
{ return token::GT_VARYING; }
	YY_BREAK
/*
  * GLSL vector types
  */
case 50:
YY_RULE_SETUP
#line 121 "gpu/lolfx-scanner.l"
{ return token::GT_BVEC2; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 122 "gpu/lolfx-scanner.l"
{ return token::GT_BVEC3; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 123 "gpu/lolfx-scanner.l"
{ return token::GT_BVEC4; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 125 "gpu/lolfx-scanner.l"
{ return token::GT_IVEC2; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 126 "gpu/lolfx-scanner.l"
{ return token::GT_IVEC3; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 127 "gpu/lolfx-scanner.l"
{ return token::GT_IVEC4; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 129 "gpu/lolfx-scanner.l"
{ return token::GT_UVEC2; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 130 "gpu/lolfx-scanner.l"
{ return token::GT_UVEC3; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 131 "gpu/lolfx-scanner.l"
{ return token::GT_UVEC4; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 133 "gpu/lolfx-scanner.l"
{ return token::GT_VEC2; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 134 "gpu/lolfx-scanner.l"
{ return token::GT_VEC3; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 135 "gpu/lolfx-scanner.l"
{ return token::GT_VEC4; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 136 "gpu/lolfx-scanner.l"
{ return token::GT_MAT2; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 137 "gpu/lolfx-scanner.l"
{ return token::GT_MAT2X2; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 138 "gpu/lolfx-scanner.l"
{ return token::GT_MAT2X3; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 139 "gpu/lolfx-scanner.l"
{ return token::GT_MAT2X4; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 140 "gpu/lolfx-scanner.l"
{ return token::GT_MAT3; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 141 "gpu/lolfx-scanner.l"
{ return token::GT_MAT3X2; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 142 "gpu/lolfx-scanner.l"
{ return token::GT_MAT3X3; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 143 "gpu/lolfx-scanner.l"
{ return token::GT_MAT3X4; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 144 "gpu/lolfx-scanner.l"
{ return token::GT_MAT4; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 145 "gpu/lolfx-scanner.l"
{ return token::GT_MAT4X2; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 146 "gpu/lolfx-scanner.l"
{ return token::GT_MAT4X3; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 147 "gpu/lolfx-scanner.l"
{ return token::GT_MAT4X4; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 149 "gpu/lolfx-scanner.l"
{ return token::GT_DVEC2; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 150 "gpu/lolfx-scanner.l"
{ return token::GT_DVEC3; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 151 "gpu/lolfx-scanner.l"
{ return token::GT_DVEC4; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 152 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT2; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 153 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT2X2; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 154 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT2X3; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 155 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT2X4; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 156 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT3; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 157 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT3X2; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 158 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT3X3; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 159 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT3X4; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 160 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT4; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 161 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT4X2; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 162 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT4X3; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 163 "gpu/lolfx-scanner.l"
{ return token::GT_DMAT4X4; }
	YY_BREAK
/*
  * GLSL constant values
  */
case 89:
YY_RULE_SETUP
#line 169 "gpu/lolfx-scanner.l"
{ yylval->ival = 1; return token::BOOLCONSTANT; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 170 "gpu/lolfx-scanner.l"
{ yylval->ival = 0; return token::BOOLCONSTANT; }
	YY_BREAK
/*
  * GLSL keywords that are also valid or reserved in HLSL
  * and HLSL keywords that are also valid or reserved in GLSL.
  */
case 91:
YY_RULE_SETUP
#line 177 "gpu/lolfx-scanner.l"
{ return token::GHT_BOOL; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 178 "gpu/lolfx-scanner.l"
{ return token::GHT_BREAK; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 179 "gpu/lolfx-scanner.l"
{ return token::GHT_CASE; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 180 "gpu/lolfx-scanner.l"
{ return token::GHT_CENTROID; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 181 "gpu/lolfx-scanner.l"
{ return token::GHT_CONST; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 182 "gpu/lolfx-scanner.l"
{ return token::GHT_CONTINUE; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 183 "gpu/lolfx-scanner.l"
{ return token::GHT_DEFAULT; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 184 "gpu/lolfx-scanner.l"
{ return token::GHT_DISCARD; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 185 "gpu/lolfx-scanner.l"
{ return token::GHT_DO; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 186 "gpu/lolfx-scanner.l"
{ return token::GHT_DOUBLE; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 187 "gpu/lolfx-scanner.l"
{ return token::GHT_ELSE; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 188 "gpu/lolfx-scanner.l"
{ return token::GHT_FLOAT; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 189 "gpu/lolfx-scanner.l"
{ return token::GHT_FOR; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 190 "gpu/lolfx-scanner.l"
{ return token::GHT_IF; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 191 "gpu/lolfx-scanner.l"
{ return token::GHT_IN; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 192 "gpu/lolfx-scanner.l"
{ return token::GHT_INOUT; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 193 "gpu/lolfx-scanner.l"
{ return token::GHT_INT; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 194 "gpu/lolfx-scanner.l"
{ return token::GHT_NOPERSPECTIVE; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 195 "gpu/lolfx-scanner.l"
{ return token::GHT_OUT; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 196 "gpu/lolfx-scanner.l"
{ return token::GHT_RETURN; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 197 "gpu/lolfx-scanner.l"
{ return token::GHT_SAMPLER1D; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 198 "gpu/lolfx-scanner.l"
{ return token::GHT_SAMPLER2D; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 199 "gpu/lolfx-scanner.l"
{ return token::GHT_SAMPLER3D; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 200 "gpu/lolfx-scanner.l"
{ return token::GHT_SAMPLERCUBE; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 201 "gpu/lolfx-scanner.l"
{ return token::GHT_STRUCT; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 202 "gpu/lolfx-scanner.l"
{ return token::GHT_SWITCH; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 203 "gpu/lolfx-scanner.l"
{ return token::GHT_UINT; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 204 "gpu/lolfx-scanner.l"
{ return token::GHT_UNIFORM; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 205 "gpu/lolfx-scanner.l"
{ return token::GHT_VOID; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 206 "gpu/lolfx-scanner.l"
{ return token::GHT_WHILE; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 208 "gpu/lolfx-scanner.l"
{ return token::HGT_BOOL; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 209 "gpu/lolfx-scanner.l"
{ return token::HGT_BREAK; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 210 "gpu/lolfx-scanner.l"
{ return token::HGT_CASE; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 211 "gpu/lolfx-scanner.l"
{ return token::HGT_CENTROID; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 212 "gpu/lolfx-scanner.l"
{ return token::HGT_CONST; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 213 "gpu/lolfx-scanner.l"
{ return token::HGT_CONTINUE; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 214 "gpu/lolfx-scanner.l"
{ return token::HGT_DEFAULT; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 215 "gpu/lolfx-scanner.l"
{ return token::HGT_DISCARD; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 216 "gpu/lolfx-scanner.l"
{ return token::HGT_DO; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 217 "gpu/lolfx-scanner.l"
{ return token::HGT_DOUBLE; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 218 "gpu/lolfx-scanner.l"
{ return token::HGT_ELSE; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 219 "gpu/lolfx-scanner.l"
{ return token::HGT_FLOAT; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 220 "gpu/lolfx-scanner.l"
{ return token::HGT_FOR; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 221 "gpu/lolfx-scanner.l"
{ return token::HGT_IF; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 222 "gpu/lolfx-scanner.l"
{ return token::HGT_IN; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 223 "gpu/lolfx-scanner.l"
{ return token::HGT_INOUT; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 224 "gpu/lolfx-scanner.l"
{ return token::HGT_INT; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 225 "gpu/lolfx-scanner.l"
{ return token::HGT_NOPERSPECTIVE; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 226 "gpu/lolfx-scanner.l"
{ return token::HGT_OUT; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 227 "gpu/lolfx-scanner.l"
{ return token::HGT_RETURN; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 228 "gpu/lolfx-scanner.l"
{ return token::HGT_SAMPLER1D; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 229 "gpu/lolfx-scanner.l"
{ return token::HGT_SAMPLER2D; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 230 "gpu/lolfx-scanner.l"
{ return token::HGT_SAMPLER3D; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 231 "gpu/lolfx-scanner.l"
{ return token::HGT_SAMPLERCUBE; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 232 "gpu/lolfx-scanner.l"
{ return token::HGT_STRUCT; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 233 "gpu/lolfx-scanner.l"
{ return token::HGT_SWITCH; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 234 "gpu/lolfx-scanner.l"
{ return token::HGT_UINT; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 235 "gpu/lolfx-scanner.l"
{ return token::HGT_UNIFORM; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 236 "gpu/lolfx-scanner.l"
{ return token::HGT_VOID; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 237 "gpu/lolfx-scanner.l"
{ return token::HGT_WHILE; }
	YY_BREAK
/*
  * HLSL keywords
  * Gathered from http://msdn.microsoft.com/en-us/library/windows/desktop/bb509568%28v=vs.85%29.aspx
  */
case 151:
YY_RULE_SETUP
#line 244 "gpu/lolfx-scanner.l"
{ return token::HT_APPENDSTRUCTUREDBUFFER; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 245 "gpu/lolfx-scanner.l"
{ return token::HT_ASM; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 246 "gpu/lolfx-scanner.l"
{ return token::HT_ASM_FRAGMENT; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 247 "gpu/lolfx-scanner.l"
{ return token::HT_BLENDSTATE; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 248 "gpu/lolfx-scanner.l"
{ return token::HT_BUFFER; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 249 "gpu/lolfx-scanner.l"
{ return token::HT_BYTEADDRESSBUFFER; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 250 "gpu/lolfx-scanner.l"
{ return token::HT_CBUFFER; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 251 "gpu/lolfx-scanner.l"
{ return token::HT_COLUMN_MAJOR; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 252 "gpu/lolfx-scanner.l"
{ return token::HT_COMPILE; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 253 "gpu/lolfx-scanner.l"
{ return token::HT_COMPILE_FRAGMENT; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 254 "gpu/lolfx-scanner.l"
{ return token::HT_COMPILESHADER; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 255 "gpu/lolfx-scanner.l"
{ return token::HT_COMPUTESHADER; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 256 "gpu/lolfx-scanner.l"
{ return token::HT_CONSUMESTRUCTUREDBUFFER; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 257 "gpu/lolfx-scanner.l"
{ return token::HT_DEPTHSTENCILSTATE; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 258 "gpu/lolfx-scanner.l"
{ return token::HT_DEPTHSTENCILVIEW; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 259 "gpu/lolfx-scanner.l"
{ return token::HT_DOMAINSHADER; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 260 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 261 "gpu/lolfx-scanner.l"
{ return token::HT_EXTERN; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 262 "gpu/lolfx-scanner.l"
{ return token::HT_FALSE; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 263 "gpu/lolfx-scanner.l"
{ return token::HT_FXGROUP; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 264 "gpu/lolfx-scanner.l"
{ return token::HT_GEOMETRYSHADER; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 265 "gpu/lolfx-scanner.l"
{ return token::HT_GROUPSHARED; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 266 "gpu/lolfx-scanner.l"
{ return token::HT_HALF; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 267 "gpu/lolfx-scanner.l"
{ return token::HT_HULLSHADER; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 268 "gpu/lolfx-scanner.l"
{ return token::HT_INLINE; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 269 "gpu/lolfx-scanner.l"
{ return token::HT_INPUTPATCH; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 270 "gpu/lolfx-scanner.l"
{ return token::HT_INTERFACE; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 271 "gpu/lolfx-scanner.l"
{ return token::HT_LINE; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 272 "gpu/lolfx-scanner.l"
{ return token::HT_LINEADJ; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 273 "gpu/lolfx-scanner.l"
{ return token::HT_LINEAR; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 274 "gpu/lolfx-scanner.l"
{ return token::HT_LINESTREAM; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 275 "gpu/lolfx-scanner.l"
{ return token::HT_MATRIX; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 276 "gpu/lolfx-scanner.l"
{ return token::HT_NAMESPACE; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 277 "gpu/lolfx-scanner.l"
{ return token::HT_NOINTERPOLATION; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 278 "gpu/lolfx-scanner.l"
{ return token::HT_NULL; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 279 "gpu/lolfx-scanner.l"
{ return token::HT_OUTPUTPATCH; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 280 "gpu/lolfx-scanner.l"
{ return token::HT_PACKOFFSET; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 281 "gpu/lolfx-scanner.l"
{ return token::HT_PASS; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 282 "gpu/lolfx-scanner.l"
{ return token::HT_PIXELFRAGMENT; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 283 "gpu/lolfx-scanner.l"
{ return token::HT_PIXELSHADER; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 284 "gpu/lolfx-scanner.l"
{ return token::HT_POINT; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 285 "gpu/lolfx-scanner.l"
{ return token::HT_POINTSTREAM; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 286 "gpu/lolfx-scanner.l"
{ return token::HT_PRECISE; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 287 "gpu/lolfx-scanner.l"
{ return token::HT_RASTERIZERSTATE; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 288 "gpu/lolfx-scanner.l"
{ return token::HT_RENDERTARGETVIEW; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 289 "gpu/lolfx-scanner.l"
{ return token::HT_REGISTER; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 290 "gpu/lolfx-scanner.l"
{ return token::HT_ROW_MAJOR; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 291 "gpu/lolfx-scanner.l"
{ return token::HT_RWBUFFER; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 292 "gpu/lolfx-scanner.l"
{ return token::HT_RWBYTEADDRESSBUFFER; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 293 "gpu/lolfx-scanner.l"
{ return token::HT_RWSTRUCTUREDBUFFER; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 294 "gpu/lolfx-scanner.l"
{ return token::HT_RWTEXTURE1D; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 295 "gpu/lolfx-scanner.l"
{ return token::HT_RWTEXTURE1DARRAY; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 296 "gpu/lolfx-scanner.l"
{ return token::HT_RWTEXTURE2D; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 297 "gpu/lolfx-scanner.l"
{ return token::HT_RWTEXTURE2DARRAY; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 298 "gpu/lolfx-scanner.l"
{ return token::HT_RWTEXTURE3D; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 299 "gpu/lolfx-scanner.l"
{ return token::HT_SAMPLER; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 300 "gpu/lolfx-scanner.l"
{ return token::HT_SAMPLER_STATE; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 301 "gpu/lolfx-scanner.l"
{ return token::HT_SAMPLERSTATE; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 302 "gpu/lolfx-scanner.l"
{ return token::HT_SAMPLERCOMPARISONSTATE; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 303 "gpu/lolfx-scanner.l"
{ return token::HT_SHARED; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 304 "gpu/lolfx-scanner.l"
{ return token::HT_SNORM; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 305 "gpu/lolfx-scanner.l"
{ return token::HT_STATEBLOCK; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 306 "gpu/lolfx-scanner.l"
{ return token::HT_STATEBLOCK_STATE; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 307 "gpu/lolfx-scanner.l"
{ return token::HT_STATIC; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 308 "gpu/lolfx-scanner.l"
{ return token::HT_STRING; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 309 "gpu/lolfx-scanner.l"
{ return token::HT_STRUCTUREDBUFFER; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 310 "gpu/lolfx-scanner.l"
{ return token::HT_TBUFFER; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 311 "gpu/lolfx-scanner.l"
{ return token::HT_TECHNIQUE; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 312 "gpu/lolfx-scanner.l"
{ return token::HT_TECHNIQUE10; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 313 "gpu/lolfx-scanner.l"
{ return token::HT_TECHNIQUE11XZ; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 314 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 315 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE1D; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 316 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE1DARRAY; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 317 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE2D; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 318 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE2DARRAY; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 319 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE2DMS; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 320 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE2DMSARRAY; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 321 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURE3D; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 322 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURECUBE; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 323 "gpu/lolfx-scanner.l"
{ return token::HT_TEXTURECUBEARRAY; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 324 "gpu/lolfx-scanner.l"
{ return token::HT_TRUE; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 325 "gpu/lolfx-scanner.l"
{ return token::HT_TYPEDEF; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 326 "gpu/lolfx-scanner.l"
{ return token::HT_TRIANGLE; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 327 "gpu/lolfx-scanner.l"
{ return token::HT_TRIANGLEADJ; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 328 "gpu/lolfx-scanner.l"
{ return token::HT_TRIANGLESTREAM; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 329 "gpu/lolfx-scanner.l"
{ return token::HT_UNORM; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 330 "gpu/lolfx-scanner.l"
{ return token::HT_VECTOR; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 331 "gpu/lolfx-scanner.l"
{ return token::HT_VERTEXFRAGMENT; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 332 "gpu/lolfx-scanner.l"
{ return token::HT_VERTEXSHADER; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 333 "gpu/lolfx-scanner.l"
{ return token::HT_VOLATILE; }
	YY_BREAK
/*
  * HLSL vector types
  * TODO: this can probably be factored somehow
  */
case 241:
YY_RULE_SETUP
#line 340 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL1; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 341 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL1x1; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 342 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL2x1; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 343 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL3x1; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 344 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL4x1; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 345 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL2; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 346 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL1x2; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 347 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL2x2; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 348 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL3x2; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 349 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL4x2; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 350 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL3; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 351 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL1x3; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 352 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL2x3; }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 353 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL3x3; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 354 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL4x3; }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 355 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL4; }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 356 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL1x4; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 357 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL2x4; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 358 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL3x4; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 359 "gpu/lolfx-scanner.l"
{ return token::HT_BOOL4x4; }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 361 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT1; }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 362 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT1x1; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 363 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT2x1; }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 364 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT3x1; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 365 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT4x1; }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 366 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT2; }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 367 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT1x2; }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 368 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT2x2; }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 369 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT3x2; }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 370 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT4x2; }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 371 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT3; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 372 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT1x3; }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 373 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT2x3; }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 374 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT3x3; }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 375 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT4x3; }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 376 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT4; }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 377 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT1x4; }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 378 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT2x4; }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 379 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT3x4; }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 380 "gpu/lolfx-scanner.l"
{ return token::HT_FLOAT4x4; }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 382 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE1; }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 383 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE1x1; }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 384 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE2x1; }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 385 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE3x1; }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 386 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE4x1; }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 387 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE2; }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 388 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE1x2; }
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 389 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE2x2; }
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 390 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE3x2; }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 391 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE4x2; }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 392 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE3; }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 393 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE1x3; }
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 394 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE2x3; }
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 395 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE3x3; }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 396 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE4x3; }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 397 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE4; }
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 398 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE1x4; }
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 399 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE2x4; }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 400 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE3x4; }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 401 "gpu/lolfx-scanner.l"
{ return token::HT_DOUBLE4x4; }
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 403 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD1; }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 404 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD1x1; }
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 405 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD2x1; }
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 406 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD3x1; }
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 407 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD4x1; }
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 408 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD2; }
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 409 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD1x2; }
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 410 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD2x2; }
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 411 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD3x2; }
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 412 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD4x2; }
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 413 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD3; }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 414 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD1x3; }
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 415 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD2x3; }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 416 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD3x3; }
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 417 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD4x3; }
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 418 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD4; }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 419 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD1x4; }
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 420 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD2x4; }
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 421 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD3x4; }
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 422 "gpu/lolfx-scanner.l"
{ return token::HT_DWORD4x4; }
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 424 "gpu/lolfx-scanner.l"
{ return token::HT_INT1; }
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 425 "gpu/lolfx-scanner.l"
{ return token::HT_INT1x1; }
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 426 "gpu/lolfx-scanner.l"
{ return token::HT_INT2x1; }
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 427 "gpu/lolfx-scanner.l"
{ return token::HT_INT3x1; }
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 428 "gpu/lolfx-scanner.l"
{ return token::HT_INT4x1; }
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 429 "gpu/lolfx-scanner.l"
{ return token::HT_INT2; }
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 430 "gpu/lolfx-scanner.l"
{ return token::HT_INT1x2; }
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 431 "gpu/lolfx-scanner.l"
{ return token::HT_INT2x2; }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 432 "gpu/lolfx-scanner.l"
{ return token::HT_INT3x2; }
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 433 "gpu/lolfx-scanner.l"
{ return token::HT_INT4x2; }
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 434 "gpu/lolfx-scanner.l"
{ return token::HT_INT3; }
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 435 "gpu/lolfx-scanner.l"
{ return token::HT_INT1x3; }
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 436 "gpu/lolfx-scanner.l"
{ return token::HT_INT2x3; }
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 437 "gpu/lolfx-scanner.l"
{ return token::HT_INT3x3; }
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 438 "gpu/lolfx-scanner.l"
{ return token::HT_INT4x3; }
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 439 "gpu/lolfx-scanner.l"
{ return token::HT_INT4; }
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 440 "gpu/lolfx-scanner.l"
{ return token::HT_INT1x4; }
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 441 "gpu/lolfx-scanner.l"
{ return token::HT_INT2x4; }
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 442 "gpu/lolfx-scanner.l"
{ return token::HT_INT3x4; }
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 443 "gpu/lolfx-scanner.l"
{ return token::HT_INT4x4; }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 445 "gpu/lolfx-scanner.l"
{ return token::HT_UINT1; }
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 446 "gpu/lolfx-scanner.l"
{ return token::HT_UINT1x1; }
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 447 "gpu/lolfx-scanner.l"
{ return token::HT_UINT2x1; }
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 448 "gpu/lolfx-scanner.l"
{ return token::HT_UINT3x1; }
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 449 "gpu/lolfx-scanner.l"
{ return token::HT_UINT4x1; }
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 450 "gpu/lolfx-scanner.l"
{ return token::HT_UINT2; }
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 451 "gpu/lolfx-scanner.l"
{ return token::HT_UINT1x2; }
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 452 "gpu/lolfx-scanner.l"
{ return token::HT_UINT2x2; }
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 453 "gpu/lolfx-scanner.l"
{ return token::HT_UINT3x2; }
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 454 "gpu/lolfx-scanner.l"
{ return token::HT_UINT4x2; }
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 455 "gpu/lolfx-scanner.l"
{ return token::HT_UINT3; }
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 456 "gpu/lolfx-scanner.l"
{ return token::HT_UINT1x3; }
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 457 "gpu/lolfx-scanner.l"
{ return token::HT_UINT2x3; }
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 458 "gpu/lolfx-scanner.l"
{ return token::HT_UINT3x3; }
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 459 "gpu/lolfx-scanner.l"
{ return token::HT_UINT4x3; }
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 460 "gpu/lolfx-scanner.l"
{ return token::HT_UINT4; }
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 461 "gpu/lolfx-scanner.l"
{ return token::HT_UINT1x4; }
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 462 "gpu/lolfx-scanner.l"
{ return token::HT_UINT2x4; }
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 463 "gpu/lolfx-scanner.l"
{ return token::HT_UINT3x4; }
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 464 "gpu/lolfx-scanner.l"
{ return token::HT_UINT4x4; }
	YY_BREAK
/*
  * HLSL preprocessor directives
  * Gathered from http://msdn.microsoft.com/en-us/library/windows/desktop/bb943993%28v=vs.85%29.aspx
  */
case 361:
YY_RULE_SETUP
#line 471 "gpu/lolfx-scanner.l"
{
    /* FIXME: this is very, very limited */
    char const *tmp = strstr(yytext, "define") + 6;
    while (*tmp == ' ' || *tmp == '\n')
        tmp++;
    if (*tmp == '\0')
        return token::PREPROCESSOR_DEFINE;
    char const *tmp2 = tmp;
    while (*tmp != ' ' && *tmp != '\n' && *tmp != '\0')
        tmp++;
    String key(tmp2, (int)(tmp - tmp2));
    while (*tmp == ' ' || *tmp == '\n')
        tmp++;
    String val(*tmp ? tmp : "1");

    Log::Debug("new macro: ‘%s’ = ‘%s’\n", key.C(), val.C());
    m_pp_defines[key] = val;
}
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 490 "gpu/lolfx-scanner.l"
{
    if (m_pp_stack.Count() <= 1)
        return token::PREPROCESSOR_ELIF;
    m_pp_stack.Last() = BlockIsForeverFalse;
    BEGIN(PREPROCESSOR_COMMENT);
}
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 497 "gpu/lolfx-scanner.l"
{
    if (m_pp_stack.Count() <= 1)
        return token::PREPROCESSOR_ELSE;
    m_pp_stack.Last() = BlockIsForeverFalse;
    BEGIN(PREPROCESSOR_COMMENT);
}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 504 "gpu/lolfx-scanner.l"
{
    if (m_pp_stack.Count() <= 1)
        return token::PREPROCESSOR_ENDIF;
    m_pp_stack.Pop();
}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 510 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_ERROR; }
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 512 "gpu/lolfx-scanner.l"
{
    if (IsExpressionTrue(strstr(yytext, "if") + 2))
    {
        m_pp_stack.Push(BlockIsTrue);
    }
    else
    {
        m_pp_stack.Push(BlockIsFalse);
        BEGIN(PREPROCESSOR_COMMENT);
    }
}
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 524 "gpu/lolfx-scanner.l"
{
    /* FIXME: this is very, very limited */
    char const *tmp = strstr(yytext, "ifdef") + 5;
    while (*tmp == ' ' || *tmp == '\n')
        tmp++;
    if (*tmp == '\0')
        return token::PREPROCESSOR_IFDEF;
    char const *tmp2 = tmp;
    while (*tmp != ' ' && *tmp != '\n' && *tmp != '\0')
        tmp++;
    String key(tmp2, (int)(tmp - tmp2));
    if (m_pp_defines.HasKey(key))
    {
        m_pp_stack.Push(BlockIsTrue);
    }
    else
    {
        m_pp_stack.Push(BlockIsFalse);
        BEGIN(PREPROCESSOR_COMMENT);
    }
}
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 546 "gpu/lolfx-scanner.l"
{
    /* FIXME: this is very, very limited */
    char const *tmp = strstr(yytext, "ifndef") + 6;
    while (*tmp == ' ' || *tmp == '\n')
        tmp++;
    if (*tmp == '\0')
        return token::PREPROCESSOR_IFDEF;
    char const *tmp2 = tmp;
    while (*tmp != ' ' && *tmp != '\n' && *tmp != '\0')
        tmp++;
    String key(tmp2, (int)(tmp - tmp2));
    if (m_pp_defines.HasKey(key))
    {
        m_pp_stack.Push(BlockIsFalse);
        BEGIN(PREPROCESSOR_COMMENT);
    }
    else
    {
        m_pp_stack.Push(BlockIsTrue);
    }
}
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 568 "gpu/lolfx-scanner.l"
{ return token::PREPROCESSOR_INCLUDE; }
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 570 "gpu/lolfx-scanner.l"
{ /* ignore for now */ }
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 572 "gpu/lolfx-scanner.l"
{ /* ignore for now */ }
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 574 "gpu/lolfx-scanner.l"
{
    /* FIXME: this is very, very limited */
    char const *tmp = strstr(yytext, "undef") + 5;
    while (*tmp == ' ' || *tmp == '\n')
        tmp++;
    if (*tmp == '\0')
        return token::PREPROCESSOR_UNDEF;
    char const *tmp2 = tmp;
    while (*tmp != ' ' && *tmp != '\n' && *tmp != '\0')
        tmp++;
    String key(tmp2, (int)(tmp - tmp2));

    Log::Debug("undef macro: ‘%s’\n", key.C());
    m_pp_defines.Remove(key);
}
	YY_BREAK
case 373:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 590 "gpu/lolfx-scanner.l"
{
    m_pp_stack.Push(BlockIsForeverFalse);
}
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 593 "gpu/lolfx-scanner.l"
{
    switch (m_pp_stack.Last())
    {
        case BlockIsFalse:
            m_pp_stack.Last() = BlockIsTrue;
            BEGIN(INITIAL);
            break;
        case BlockIsForeverFalse:
            break;
        case BlockIsTrue:
            m_pp_stack.Last() = BlockIsForeverFalse;
            break;
    }
}
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 607 "gpu/lolfx-scanner.l"
{
    switch (m_pp_stack.Last())
    {
        case BlockIsFalse:
            if (IsExpressionTrue(strstr(yytext, "elif") + 4))
            {
                m_pp_stack.Last() = BlockIsTrue;
                BEGIN(INITIAL);
            }
            break;
        case BlockIsForeverFalse:
            break;
        case BlockIsTrue:
            m_pp_stack.Last() = BlockIsForeverFalse;
            break;
    }
}
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 624 "gpu/lolfx-scanner.l"
{
    m_pp_stack.Pop();
    if (m_pp_stack.Last() == BlockIsTrue)
        BEGIN(INITIAL);
}
	YY_BREAK
case 377:
/* rule 377 can match eol */
YY_RULE_SETUP
#line 629 "gpu/lolfx-scanner.l"
{ yylloc->lines(1); }
	YY_BREAK
case 378:
/* rule 378 can match eol */
YY_RULE_SETUP
#line 630 "gpu/lolfx-scanner.l"
{ }
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 631 "gpu/lolfx-scanner.l"
{ BEGIN(C_COMMENT); }
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 632 "gpu/lolfx-scanner.l"
{ }
	YY_BREAK
/*
  * GLSL preprocessor directives
  */
case 381:
YY_RULE_SETUP
#line 638 "gpu/lolfx-scanner.l"
{ /* ignore for now */ }
	YY_BREAK
/*
  * HLSL reserved keywords
  * Gathered from http://msdn.microsoft.com/en-us/library/windows/desktop/bb509569%28v=vs.85%29.aspx
  */
case 382:
YY_RULE_SETUP
#line 645 "gpu/lolfx-scanner.l"
{ return token::HT_AUTO; }
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 646 "gpu/lolfx-scanner.l"
{ return token::HT_CATCH; }
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 647 "gpu/lolfx-scanner.l"
{ return token::HT_CHAR; }
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 648 "gpu/lolfx-scanner.l"
{ return token::HT_CLASS; }
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 649 "gpu/lolfx-scanner.l"
{ return token::HT_CONST_CAST; }
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 650 "gpu/lolfx-scanner.l"
{ return token::HT_DELETE; }
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 651 "gpu/lolfx-scanner.l"
{ return token::HT_DYNAMIC_CAST; }
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 652 "gpu/lolfx-scanner.l"
{ return token::HT_ENUM; }
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 653 "gpu/lolfx-scanner.l"
{ return token::HT_EXPLICIT; }
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 654 "gpu/lolfx-scanner.l"
{ return token::HT_FRIEND; }
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 655 "gpu/lolfx-scanner.l"
{ return token::HT_GOTO; }
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 656 "gpu/lolfx-scanner.l"
{ return token::HT_LONG; }
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 657 "gpu/lolfx-scanner.l"
{ return token::HT_MUTABLE; }
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 658 "gpu/lolfx-scanner.l"
{ return token::HT_NEW; }
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 659 "gpu/lolfx-scanner.l"
{ return token::HT_OPERATOR; }
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 660 "gpu/lolfx-scanner.l"
{ return token::HT_PRIVATE; }
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 661 "gpu/lolfx-scanner.l"
{ return token::HT_PROTECTED; }
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 662 "gpu/lolfx-scanner.l"
{ return token::HT_PUBLIC; }
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 663 "gpu/lolfx-scanner.l"
{ return token::HT_REINTERPRET_CAST; }
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 664 "gpu/lolfx-scanner.l"
{ return token::HT_SHORT; }
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 665 "gpu/lolfx-scanner.l"
{ return token::HT_SIGNED; }
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 666 "gpu/lolfx-scanner.l"
{ return token::HT_SIZEOF; }
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 667 "gpu/lolfx-scanner.l"
{ return token::HT_STATIC_CAST; }
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 668 "gpu/lolfx-scanner.l"
{ return token::HT_TEMPLATE; }
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 669 "gpu/lolfx-scanner.l"
{ return token::HT_THIS; }
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 670 "gpu/lolfx-scanner.l"
{ return token::HT_THROW; }
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 671 "gpu/lolfx-scanner.l"
{ return token::HT_TRY; }
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 672 "gpu/lolfx-scanner.l"
{ return token::HT_TYPENAME; }
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 673 "gpu/lolfx-scanner.l"
{ return token::HT_UNION; }
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 674 "gpu/lolfx-scanner.l"
{ return token::HT_UNSIGNED; }
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 675 "gpu/lolfx-scanner.l"
{ return token::HT_USING; }
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 676 "gpu/lolfx-scanner.l"
{ return token::HT_VIRTUAL; }
	YY_BREAK
/*
  * Various tokens
  */
case 414:
YY_RULE_SETUP
#line 682 "gpu/lolfx-scanner.l"
{ return token::T_INC; }
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 683 "gpu/lolfx-scanner.l"
{ return token::T_DEC; }
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 684 "gpu/lolfx-scanner.l"
{ return token::T_LE; }
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 685 "gpu/lolfx-scanner.l"
{ return token::T_GE; }
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 686 "gpu/lolfx-scanner.l"
{ return token::T_EQ; }
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 687 "gpu/lolfx-scanner.l"
{ return token::T_NE; }
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 688 "gpu/lolfx-scanner.l"
{ return token::T_LEFT; }
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 689 "gpu/lolfx-scanner.l"
{ return token::T_RIGHT; }
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 690 "gpu/lolfx-scanner.l"
{ return token::T_AND; }
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 691 "gpu/lolfx-scanner.l"
{ return token::T_OR; }
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 692 "gpu/lolfx-scanner.l"
{ return token::T_XOR; }
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 694 "gpu/lolfx-scanner.l"
{ return token::T_MULEQ; }
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 695 "gpu/lolfx-scanner.l"
{ return token::T_DIVEQ; }
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 696 "gpu/lolfx-scanner.l"
{ return token::T_MODEQ; }
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 697 "gpu/lolfx-scanner.l"
{ return token::T_ADDEQ; }
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 698 "gpu/lolfx-scanner.l"
{ return token::T_SUBEQ; }
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 699 "gpu/lolfx-scanner.l"
{ return token::T_LEFTEQ; }
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 700 "gpu/lolfx-scanner.l"
{ return token::T_RIGHTEQ; }
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 701 "gpu/lolfx-scanner.l"
{ return token::T_ANDEQ; }
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 702 "gpu/lolfx-scanner.l"
{ return token::T_XOREQ; }
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 703 "gpu/lolfx-scanner.l"
{ return token::T_OREQ; }
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 705 "gpu/lolfx-scanner.l"
{
    yylval->fval = std::atof(yytext);
    return token::FLOATCONSTANT;
}
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 709 "gpu/lolfx-scanner.l"
{
    yylval->uval = std::atoi(yytext);
    return token::UINTCONSTANT;
}
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 713 "gpu/lolfx-scanner.l"
{
    yylval->ival = std::atoi(yytext);
    return token::INTCONSTANT;
}
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 718 "gpu/lolfx-scanner.l"
{
    /* Copy token for now */
    yylval->sval = strdup(yytext);
    return token::FIELDSELECTION;
}
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 724 "gpu/lolfx-scanner.l"
{
    /* Copy token for now */
    yylval->sval = strdup(yytext);
    return token::IDENTIFIER;
}
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 730 "gpu/lolfx-scanner.l"
{ /* ignore whitespace */ }
	YY_BREAK
case 441:
/* rule 441 can match eol */
YY_RULE_SETUP
#line 731 "gpu/lolfx-scanner.l"
{ yylloc->lines(1); }
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 732 "gpu/lolfx-scanner.l"
{ return (token_type)*yytext; /* accept all characters */ }
	YY_BREAK
/*
  * Ignore C comments
  */
case 443:
YY_RULE_SETUP
#line 738 "gpu/lolfx-scanner.l"
{ BEGIN(C_COMMENT); }
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 739 "gpu/lolfx-scanner.l"
{ }
	YY_BREAK
case 445:
/* rule 445 can match eol */
YY_RULE_SETUP
#line 740 "gpu/lolfx-scanner.l"
{ yylloc->lines(1); }
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 741 "gpu/lolfx-scanner.l"
{ }
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 742 "gpu/lolfx-scanner.l"
{
    if (m_pp_stack.Last() == BlockIsTrue)
        BEGIN(INITIAL);
    else
        BEGIN(PREPROCESSOR_COMMENT);
}
	YY_BREAK
/*
  * Ignore C++ comments
  */
case 448:
YY_RULE_SETUP
#line 753 "gpu/lolfx-scanner.l"
{ BEGIN(CPP_COMMENT); }
	YY_BREAK
case 449:
/* rule 449 can match eol */
YY_RULE_SETUP
#line 754 "gpu/lolfx-scanner.l"
{ yylloc->lines(1); BEGIN(INITIAL); }
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 755 "gpu/lolfx-scanner.l"
{ }
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 757 "gpu/lolfx-scanner.l"
ECHO;
	YY_BREAK
#line 4356 "generated/lolfx-scanner.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(C_COMMENT):
case YY_STATE_EOF(CPP_COMMENT):
case YY_STATE_EOF(PREPROCESSOR_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	LolFxfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	LolFxfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					LolFxrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) LolFxrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1670 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1670 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1669);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) LolFxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) LolFxalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		LolFxfree((void *) b->yy_ch_buf  );

	LolFxfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)LolFxalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)LolFxrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) LolFxalloc(new_size  );

		else
			(yy_start_stack) = (int *) LolFxrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *LolFxalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *LolFxrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void LolFxfree (void * ptr )
{
	free( (char *) ptr );	/* see LolFxrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 757 "gpu/lolfx-scanner.l"



lol::LolFxScanner::LolFxScanner(char const *command)
    : LolFxFlexLexer(0, 0),
      m_input(command)
{
}

lol::LolFxScanner::~LolFxScanner()
{
}

int lol::LolFxScanner::LexerInput(char* buf, int max_size)
{
    buf[0] = m_input[0];
    if (buf[0])
        ++m_input;
    return buf[0] ? 1 : 0;
}

bool lol::LolFxScanner::IsExpressionTrue(char const *buf)
{
    /* FIXME: this is really too limited */
    return std::atoi(buf) != 0;
}

#ifdef yylex
#undef yylex
#endif
int LolFxFlexLexer::yylex()
{
    std::cerr << "in LolFxFlexLexer::yylex() !" << std::endl;
    return 0;
}

int LolFxFlexLexer::yywrap()
{
    return 1;
}


